Title	Identification of Tasks, Datasets, Evaluation Metrics, and Numeric Scores for Scientific Leaderboards Construction
Abstract:	While the fast-paced inception of novel tasks and new datasets helps foster active research in a community towards interesting directions, keeping track of the abundance of research activity in different areas on different datasets is likely to become increasingly difficult. The community could greatly benefit from an automatic system able to summarize scientific results, e.g., in the form of a leaderboard. In this paper we build two datasets and develop a framework (TDMS-IE) aimed at automatically extracting task, dataset, metric and score from NLP papers, towards the automatic construction of leaderboards. Experiments show that our model outperforms several baselines by a large margin. Our model is a first step towards automatic leaderboard construction, e.g., in the NLP domain.
Introduction	Recent years have witnessed a significant increase in the number of laboratory-based evaluation benchmarks in many of scientific disciplines, e.g., in the year 2018 alone, 140,616 papers were submitted to the pre-print repository arXiv 1 and among them, 3,710 papers are under the Computer Science -Computation and Language category. This massive increase in evaluation benchmarks (e.g., in the form of shared tasks) is particularly true for an empirical field such as NLP, which strongly encourages the research community to develop a set of publicly available benchmark tasks, datasets and tools so as to reinforce reproducible experiments. Researchers have realized the importance of conducting meta-analysis of a number of comparable publications, i.e., the ones which use similar, if not identical, experimental settings, from shared tasks and proceedings, as shown by special issues dedicated to analysis of reproducibility in experiments (Ferro et al., 2018) , or by detailed comparative analysis of experimental results reported on the same dataset in published papers (Armstrong et al., 2009) . A useful output of this meta-analysis is often a summary of the results of a comparable set of experiments (in terms of the tasks they are applied on, the datasets on which they are tested and the metrics used for evaluation) in a tabular form, commonly referred to as a leaderboard. Such a meta-analysis summary in the form of a leaderboard is potentially useful to researchers for the purpose of (1) choosing the appropriate existing literature for fair comparisons against a newly proposed method; and (2) selecting strong baselines, which the new method should be compared against. Although recently there has been some effort to manually keep an account of progress on various research fields in the form of leaderboards, either by individual researchers 2 or in a moderated crowd-sourced environment by organizations 3 , it is likely to become increasingly difficult and timeconsuming over the passage of time. In this paper, we develop a model to automatically identify tasks, datasets, evaluation metrics, and to extract the corresponding best numeric scores from experimental scientific papers. An illustrative example is shown in Figure 1: given the sample paper shown on the left, which carries out research work on three different tasks (i.e., coreference resolution, named entity recognition, and entity linking), the system is supposed to extract the corresponding Task-Dataset-Metric-Score tuples as shown on the right part in Figure 1 . It is noteworthy that we aim to identify a set of pre- … … … … … Leaderboard Annotations Figure 1 : An illustrative example of leaderboard construction from a sample article. The cue words related to the annotated tasks, datasets, evaluation metrics and the corresponding best scores are shown in blue, red, purple and green, respectively. Note that sometimes the cue words appearing in the article are different from the documentlevel annotations, e.g., Avg. -Avg. F1, NER -Named Entity Recognition. defined Task-Dataset-Metric (TDM) triples from a taxonomy for a paper, and the corresponding cue words appearing in the paper could have a different surface form, e.g., Named Entity Recognition (taxonomy) -Name Tagging (paper). Different from most previous work on information extraction from scientific literature which concentrates mainly on the abstract section or individual paragraphs Gábor et al., 2018; Luan et al., 2018) , our task needs to analyze the entire paper. More importantly, our main goal is to tag papers using TDM triples from a taxonomy and to use these triples to organize papers. We adopt an approach similar to that used for some natural language inference (NLI) tasks (Bowman et al., 2015; Poliak et al., 2018) . Specifically, given a scientific paper in PDF format, our system first extracts the key contents from the abstract and experimental sections, as well as from the tables. Then, we identify a set of Task-Dataset-Metric (TDM) triples or Dataset-Metric (DM) pairs per paper. Our approach predicts if the textual context matches the TDM/DM label hypothesis, forcing the model to learn the similarity patterns between the text and various TDM triples. For instance, the model will capture the similarities between ROUGE-2 and "Rg-2". We further demonstrate that our framework is able to generalize to the new (unobserved) TDM triples at test time in a zero-shot TDM triple identification setup. To evaluate our approach, we create a dataset NLP-TDMS which contains around 800 leaderboard annotations for more than 300 papers. Experiments show that our model outperforms several baselines by a large margin for extracting TDM triples. We further carry out experiments on a much larger dataset ARC-PDN and demonstrate that our system can support the construction of various leaderboards from a large number of scientific papers in the NLP domain. To the best of our knowledge, our work is the first attempt towards the creation of NLP Leaderboards in an automatic fashion. We pre-process both datasets (papers in PDF format) using GRO-BID (Lopez, 2009) and an in-house PDF table extractor. The processed datasets and code are publicly available at: https://github.com/ IBM/science-result-extractor. 
Related Work	A number of studies have recently explored methods for extracting information from scientific papers. Initial interest was shown in the analysis of citations (Athar and Teufel, 2012a,b; Jurgens et al., 2018) and analysis of the topic trends in the scientific communities (Vogel and Jurafsky, 2012) . Gupta and Manning (2011) ; Gbor et al. (2016) propose unsupervised methods for the extraction of entities such as papers' focus and methodology; similarly, in (Tsai et al., 2013) , an unsupervised bootstrapping method is used to identify and cluster the main concepts of a paper. But only in 2017, formalized a new task (SemEval 2017 Task 10) for the identification of three types of entities (called keyphrases, i.e., Tasks, Methods, and Materials) and two relation types (hyponym-of and synonymof ) in a corpus of 500 paragraphs from articles in the domains of Computer Science, Material Sciences and Physics. Gábor et al. (2018) also presented the task of IE from scientific papers (Se-Macro P Macro R Macro F1 Table caption 79.2 87.0 82.6 Numeric value + IsBolded + Table caption 71.1 77.7 74.0 Numeric value + Row label+ Table caption 55.5 71.4 61.4 Numeric value + Column label + Table caption 49.8 67.2 55.4 Numeric value + IsBolded + Row label + Column label + Table caption 36.6 60.9 43.0 (Luan et al., 2018) , (1) we concentrate on the identification of entities from a taxonomy that are necessary for the reconstruction of leaderboards (i.e., task, dataset, metric); (2) we analyse the entire paper, not only the abstract (the reason being that the score information is rarely contained in the abstract). Our method for TDMS identification resembles some approaches used for textual entailment (Dagan et al., 2006) or natural language inference (NLI) (Bowman et al., 2015) . We follow the example of White et al. (2017) and Poliak et al. (2018) who reframe different NLP tasks, including extraction tasks, as NLI problems. Eichler et al. (2017) and Obamuyide and Vlachos (2018) have both used NLI approaches for relation extraction. Our work differs in the information extracted and consequently in what context and hypothesis information we model. Currently, one of the best performing NLI models (e.g., on the SNLI dataset) for three way classification is (Liu et al., 2019) . The authors apply deep neural networks and make use of BERT (Devlin et al., 2019) , a novel language representation model. They reach an accuracy of 91.1%. Kim et al. (2019) exploit denselyconnected co-attentive recurrent neural network, and reach 90% accuracy. In our scenario, we generate pseudo premises and hypotheses, then apply the standard transformer encoder (Ashish et al., 2017; Devlin et al., 2019) to train two NLI models. 
Dataset Construction	We create two datasets for testing our approach for task, dataset, metric, and score (TDMS) identification. Both datasets are taken from a collection of NLP papers in PDF format and both require similar pre-processing. First, we parse the PDFs using GROBID (Lopez, 2009) to extract the title, abstract, and for each section, the section title and its corresponding content. Then we apply an improved table parser we developed, built on GROBID's output, to extract all tables containing numeric cells from the paper. Each extracted table contains the table caption and a list of numeric cells. For each numeric cell, we detect whether it has a bold typeface, and associate it to its corresponding row and column headers. For instance, for the sample paper shown in Figure 1 , after processing the table shown, we extract the bolded number "85.60" and find its corresponding column headers "{Test, NER}". We evaluated our table parser on a set of 10 papers from different venues (e.g., EMNLP, Computational Linguistics journal). In total, these papers contain 50 tables with 1,063 numeric content cells. Table 1 shows the results for extracting different table elements. Our table parser achieves a macro F 1 score of 82.6 for identifying table captions, and 74.0 macro F 1 for extracting tuples of <Numeric value, Bolded Info, Table caption>. In general, it obtains higher recall than precision in all evaluation dimensions. In the remainder of this section we describe our two datasets in detail. 
NLP-TDMS	The content of the NLP-progress Github repository 4 provides us with expert annotations of various leaderboards for a few hundred papers in the NLP domain. The repository is organized following a "language-domain/task-dataset-leaderboard" structure. After crawling this information together with the corresponding papers (in PDF format), we clean the dataset manually. This includes: (1) normalizing task name, dataset name, and evaluation metrics across leaderboards created by different experts, e.g., using "F1" to represent "Fscore" and "Fscore"; (2) for each leaderboard table, only keeping the best result from the same paper 5 ; (3) splitting a leaderboard table into several leaderboard tables if its column headers represent datasets instead of evaluation metrics. The resulting dataset NLP-TDMS (Full) contains 332 papers with 848 leaderboard annotations. Each leaderboard annotation is a tuple containing task, dataset, metric, and score (as shown in Figure 1) . In total, we have 168 distinct leaderboards (i.e., <Task, Dataset, Metric> triples) and only around half of them (77) are associated with at least five papers. We treat these manually curated TDM triples as an NLP knowledge taxonomy and we aim to explore how well we can associate a paper to the corresponding TDM triples. We further create NLP-TDMS (Exp) by removing those leaderboards that are associated with fewer than five papers. If all leaderboard annotations of a paper belong to these removed leaderboards, we tag this paper as "Unknown". Table 2 compares statistics of NLP-TDMS (Full) and NLP-TDMS (Exp). All experiments in this paper (except experiments in the zero-shot setup in Section 7) are on NLP-TDMS (Exp) and going forward we will refer to that only as NLP-TDMS.  
ARC-PDN	To test our model in a more realistic scenario, we create a second dataset ARC-PDN. 6 We select papers (in PDF format) published in ACL, EMNLP, and NAACL between 2010 to 2015 from the most recent version of the ACL Anthology Reference Corpus (ARC) (Bird et al., 2008) . Table 3 shows statistics about papers and extracted tables in this dataset after the PDF parsing described above. 4 Method for TDMS Identification 
Problem Definition	We represent each leaderboard as a <Task, Dataset, Metric> triple (TDM triple). Given an experimental scientific paper D, we want to identify relevant TDM triples from a taxonomy and extract the best numeric score for each predicted TDM triple. However, scientific papers are often long documents and only some parts of the document are useful to predict TDM triples and the associated scores. Hence, we define a document representation, called DocTAET and a table score representation, called SC (score context), as follows: DocTAET. For each scientific paper, its Doc-TAET representation contains the following four parts: Title, Abstract, ExpSetup, and TableInfo. Title and Abstract often help in predicting Task. Ex-pSetup contains all sentences which are likely to describe the experimental setup, which can help to predict Dataset and Metric. We use a few heuristics to extract such sentences. 7 Finally, table captions and column headers are important in predicting Dataset and Metric. We collect them in the 6 PDN comes from the anthology's directory prefixes for ACL, EMNLP, and NAACL, respectively. 7 A sentence is included in ExpSetup if it: (1) contains any of the following cue words/phrases: {experiment on, experiment in, evaluation(s), evaluate, evaluated, dataset(s), corpus, corpora}; and (2) belongs to a section whose title contains any of the following words: {experiment(s), evaluation, dataset(s)}. TableInfo part. Figure 2 (upper right) illustrates the DocTAET extraction for a given paper. 
SC.	For each table in a scientific paper, we focus on boldfaced numeric scores because they are more likely to be the best scores for the corresponding TDM triples. 8 For a specific boldfaced numeric score in a table, its context (SC) contains its corresponding column headers and the table caption. Figure 2 (lower right) shows the extracted SC for the scores 85.60 and 61.71. 
TDMS-IE System	We develop a system called TDMS-IE to associate TDM triples to a given experimental scientific paper. Our system also extracts the best numeric score for each predicted TDM triple. Figure 3 shows the system architecture for TDMS-IE. 
TDMS-IE Classification Models	To predict correct TDM triples and associate the appropriate scores, we adopt a natural language inference approach (NLI) (Poliak et al., 2018) and learn a binary classifier for pairs of document contexts and TDM label hypotheses. Specifically, we split the problem into two tasks: (1) given a document representation DocTAET, we would like to predict whether a specific TDM triple can be inferred (e.g., give a document we infer <Summarization, Gigaword, ROUGE-2>); (2) we predict whether a <Dataset, Metric> tuple (DM) can be inferred given a score context SC. 9 This setup has two advantages: first, it naturally captures the inter-relations between different labels by encoding the three types of labels (i.e., task, dataset, metric) into the same hypothesis. Second, similar to approaches for NLI, it forces the model to focus on learning the similarity patterns between DocTAET and various TDM triples. For instance, the model will capture the similarities between ROUGE-2 and "Rg-2". Recently, a multi-head self-attention encoder (Ashish et al., 2017) has been shown to perform well in various NLP tasks, including NLI (Devlin et al., 2019) . We apply the standard transformer encoder (Devlin et al., 2019) to train our models, one for TDM triple prediction, and one for score 8 We randomly choose 10 papers from NLP-TDMS (Full) and compare their TDMS tuple annotations with the results reported in the original tables. We found that 78% (18/23) of the annotated tuples contain boldfaced numeric scores. 9 We look for the relation SC-DM, rather then SC-TDM, because rarely the task is mentioned in SC. extraction. In the following we describe how we generate training instances for these two models. DocTAET-TDM model. Illustrated in Figure 3 (upper left), this model predicts whether a TDM triple can be inferred from a DocTAET. For a set of n TDM triples ({t 1 , t 2 , ..., t n }) from a taxonomy, if a paper d i (DocTAET) is annotated with t 1 and t 2 , we then generate two positive training instances (d i ⇒ t 1 and d i ⇒ t 2 ) and n − 2 negative training instances ( d i ⇒ t j , 2 < j ≤ n). SC-DM model. Illustrated in Figure 3 (lower left), this model predicts whether a score context SC indicates a DM pair. To form training instances, we start with the list of DM pairs ({p 1 , p 2 , ..., p m }) from a taxonomy and a paper d i , which is annotated with a TDM triple t (containing p 1 ) and a numeric score s. We first try to extract the score contexts (SC) for all bolded numeric scores. If d i 's annotated score s is equal to one of the bolded scores s k (typically there should not be more than one), we generate a positive training instance (SC s k=1 ⇒ p 1 ). Negative instances can be generated for this context by choosing other DM s not associated with the context, i.e., m − 1 negative training instances (SC s k=1 ⇒ p j , 1 < j ≤ m). For example, an SC with "ROUGE for anonymized CNN/Daily Mail" might form a positive instance with DM <CNN / Daily Mail, ROUGE-L>, and then a negative instance with DM <Penn Treebank, LAS>. Additional negative training instances come from bolded scores s k which do not match s (e.g., SC s k ⇒ p j , 1 < k, 1 ≤ j ≤ m). 
Inference	During the inference stage (see Figure 3 (right) ), for a given scientific paper in PDF format, our system first uses the PDF parser and table extractor (described in Section 3) to generate the document representation DocTAET. We also extract all boldfaced scores and their contexts from each table. Next, we apply the DocTAET-TDM model to predict TDM triples among all TDM triple candidates for the paper 10 . Then, to extract scores for the predicted TDM triples, we apply the SC-DM model to every extracted score context (SC) and predicted DM pair (taken from the predicted TDM triples). This step tells us how likely it is that a Abstract: We present a joint model of three core tasks in the entity analysis stack: coreference resolution (within-document clustering), named entity recognition (coarse semantic typing), and entity linking (matching to Wikipedia entities). Our model is formally a structured conditional random field. Unary factors encode local features from strong baselines for each task. We then add binary and ternary factors to capture cross-task interactions, such as the constraint that coreferent mentions have the same semantic type. On the ACE 2005 and OntoNotes datasets, we achieve state-of-the-art results for all three tasks. Moreover, joint modeling improves performance on each task over strong independent baselines.  
Abstract	We present a joint model of three core tasks in the entity analysis stack … ExpSetup We present results on two corpora. First, we use the ACE 2005 corpus (NIST, 2005): … TableInfo score context suggests a DM pair. Finally, for each predicted TDM triple, we select the score whose context has the highest confidence in predicting a link to the constituent DM pair. 
Training/Test Datasets	We split NLP-TDMS (described in Section 3) into training and test sets. The partitioning ensures that every TDM triple annotated in NLP-TDMS appears both in the training and test set, so that a classifier will not have to predict unseen labels (or infer unseen hypotheses). Table 4 shows statistics on these two splits. The 77 leaderboards in this dataset constitute the set of n TDM triples we aim to predict (see Section 4.2). For evaluation, we report macro-and microaveraged precision, recall, and F 1 score for extracting TDM triples and TDMS tuples over papers in the test set. 
Implementation Details	Both of our models (DocTAET-TDM and SC-DM) have 12 transformer blocks, 768 hidden units, and 12 self-attention heads. For DocTAET-TDM, we first initialize it using BERT BASE , then fine-tune the model for 3 epochs with the learning rate of 5e − 5. During training and testing, the maximum text length is set to 512 tokens. Note that the document representation DocTAET can contain more than 1000 tokens for some scientific papers, often due to very long content in ExpSetup and Table- Info. Therefore, in these cases, we use only the first 150 tokens from ExpSetup and TableInfo respectively. We initialize the SC-DM model using the trained DocTAET-TDM model. We suspect that DocTAET-TDM already captures some of the relationship between score contexts and DM pairs. After initialization, we continue fine-tuning the model for 3 epochs with the learning rate of 5e−5. For SC-DM, we set a maximum token length of 128 for both training and testing. 
Baselines	In this section, we introduce three baselines against which we can evaluate our method. 
StringMatch (SM)	. Given a paper, for each TDM triple, we first check whether the content of the title, abstract, or introduction contains the name of the task. Then we inspect the contexts of all extracted boldfaced scores to check whether: (1) the name of the dataset is mentioned in the table caption and one of the associated column headers matches the metric name; or (2) the metric name is mentioned in the table caption and one of the associated column headers matches the dataset name. If more than one numeric score is identified during the previous step, we choose the highest or lowest value according to the property of the metric (e.g., accuracy should be high, while perplexity should be low). Finally, if all of the above conditions are satisfied for a given paper, we predict the TDM triple along with the chosen score. Otherwise, we tag the paper as "Unknown". Multi-label classification (MLC). For a machine learning baseline, we treat this task as a multi-class, multi-label classification problem where we would like to predict the TDM label for a given paper (as opposed to predicting whether we can infer a given TDM label based on the paper). The class labels are TDM triples and each paper can have multiple TDM labels as they may report results from different tasks, datasets, and with different metrics. For this classification we ignore instances with the 'Unknown' label in training because this does not form a coherent class (and would otherwise dominate the other classes). Then, for each paper, we extract bag-of-word features with tf-idf weights from the DocTAET representation described in Section 4. We train a multinomial logistic regression classifier implemented in scikit-learn (Pedregosa et al., 2011) using SAGA optimization (Defazio et al., 2014) . In this multi-label setting, the classifier can return an empty set of labels. When this is the case we take the most likely TDM label as the prediction. After predicting TDM labels we need a separate baseline classifier to compare to the SC-DM model. Similar to the SC-DM model, the MLC should predict the best score based on the SC. For training this classifier we form instances from triples of paper, score, and SC (as described in Section 4), with a binary label for whether or not this score is the actual leaderboard score from the paper. This version of the training set for classification has 1647 instances, but is quite skewed with only 67 true labels. This skew is not as problematic because for this baseline we are not classifying whether or not the SC matches the leaderboard score, but instead we simply pick the most likely SC for a given paper. 11 The scores chosen (in this case one per paper) are combined with the TDM predictions above to form the final TDMS predictions reported in Section 6.1. EntityLinking (EL) for TDM triples prediction. We apply the state-of-the-art IE system on scientific literature (Luan et al., 2018) to extract task, material and metric mentions from DocTAET. We then generate possible TDM triples by combining these three types of mentions (note that many combinations could be invalid TDM triples). Finally we link these candidates to the valid TDM triples in a taxonomy 12 based on Jaccard similarity. Specifically, we predict a TDM triple for a paper if the similarity score between the triple and a candidate is greater than α (α is estimated in the training set). If none of TDM triples was identified, we tag the paper as "Unknown". 6 Experimental Results 
Extraction Results on NLP-TDMS	We evaluate our TDMS-IE on the test dataset of NLP-TDMS. Table 5 shows the results of our model compared to baselines in different evaluation settings: TDM extraction (Table 5a) , TDM extraction excluding papers with "Unknown" annotation (Table 5b) , and TDMS extraction excluding papers with "Unknown" annotation (Table 5c ). TDMS-IE outperforms baselines by a large margin in all evaluation metrics for the first two evaluation scenarios, where the task is to extract triples <Task, Dataset, Metric>. On testing papers with at least one TDM triple annotation, it achieves a macro F 1 score of 56.6 and a micro F 1 score of 66.0 for predicting TDM triples, versus the 37.3 macro F 1 , and 33.6 micro F 1 of the multi-label classification approach. However, when we add the score extraction (TDMS), even if TDMS-IE outperforms the baselines, the overall performances are still unsatisfactory, underlining the challenging nature of the task. A qualitative analysis showed that many of the errors were triggered by the noise from the table parser, e.g., failing to identify bolded numeric scores or column headers (see Table 1 ). Sometimes a few papers bold the numeric scores for methods from the previous work when comparing to the state-of-the-art results, and our model wrongly predicts these bolded scores for the targeting TDM triples. 
Ablations	To understand the effect of ExpSetup and Table- Info in document representation DocTAET for predicting TDM triples, we carry out an ablation experiment. We train and test our system with DocTAET containing only Ti-tle+Abstract, Title+Abstract+ExpSetup, and Ti-tle+Abstract+TableInfo respectively. Table 6 reports the results of different configurations for DocTAET. We observe that both ExpSetup and TableInfo are helpful for predicting TDM triples. It also seems that descriptions from table captions and headers (TableInfo) are more informative than descriptions of experiments (ExpSetup). 
Results on ARC-PDN	To test whether our system can support to construct various leaderboards from a large number of NLP papers, we apply our model trained on the NLP-TDMS training set to ARC-PDN. We exclude five papers which also appear in the training set and predict TDMS tuples for each paper. The set of 77 candidate TDM triples comes from the training data, and many of these contain datasets that appear only after 2015. Consequently, fewer papers are tagged with these triples. Therefore, for evaluation we manually choose ten TDM triples among all TDM triples with at least ten associated papers. These ten TDM triples cover various research areas in NLP and contain datasets appearing before 2015. For each chosen TDM triple, we rank predicted papers according to the confidence score from the DocTAET-TDM model and manually evaluate the top ten results. Table 7 reports P@1, P@3, P@5, and P@10 for each leaderboard (i.e., TDM triple). The macro Table 6 : Ablation experiments results of TDMS-IE for Task + Dataset + Metric prediction. Task:Dataset:Metric P@1 P@3 P@5 P@10 #Correct Score #Wrong Task Dependency parsing:Penn Treebank:UAS 1.0 1.0 0.8 0.9 2 0 Summarization: Table 7 : Results of TDMS-IE for ten leaderboards on ARC-PDN. average P@1 and P@3 are 0.70 and 0.67, respectively, which is encouraging. Overall, 86% of papers are related to the target task T. We found that most false positives are due to the fact that these papers conduct research on the target task T, but report results on a different dataset or use the target dataset D as a resource to extract features. For instance, most predicted papers for the leaderboard <Machine translation, WMT 2014 EN-FR, BLEU> are papers about Machine translation but these papers report results on the dataset WMT 2012 EN-FR or WMT 2014 EN-DE. For TDMS extraction, only five extracted TDMS tuples are correct. This is a challenging task and more efforts are required to address it in the future. 
Zero-shot TDM Classification	Since our framework in principle captures the similarities between DocTAET and various TDM triples, we estimate that it can perform zero-shot classification of new TDM triples at test time. We split NLP-TDMS (Full) into the training/test sets. The training set contains 210 papers with 96 (distinctive) TDM triple annotations and the test set contains 108 papers whose TDM triple annotations do not appear in the training set. We train our DocTAET-TDM model on the training set as described in Section 4.2.1. At test time, we use all valid TDM triples from NLP-TDMS (Full) to form the hypothesis space. To improve efficiency, one could also reduce this hypothesis space by focusing on the related Task or Dataset mentioned in the paper. On the test set of zero-shot TDM pairs classification, our model achieves a macro F 1 score of 41.6 and a micro F 1 score of 54.9, versus the 56.6 macro F 1 , and 66.0 micro F 1 of the few-shot TDM pairs classification described in Section 6.1. 
Conclusions	In this paper, we have reported a framework to automatically extract tasks, datasets, evaluation metrics and scores from a set of published scientific papers in PDF format, in order to reconstruct the leaderboards for various tasks. We have proposed a method, inspired by natural language inference, to facilitate learning similarity patterns between labels and the content words of papers. Our first model extracts <Task, Dataset, Metric> (TDM) triples, and our second model associates the best score reported in the paper to the corresponding TDM triple. We created two datasets in the NLP domain to test our system. Experiments show that our model outperforms the baselines by a large margin in the identification of TDM triples. In the future, more effort is needed to extract the best score. Also the work reported in this paper is based on a small TDM taxonomy, we plan to construct a TDM knowledge base and provide an applicable system for a wide range of NLP papers. 
	https://arxiv.org/ https://github.com/sebastianruder/ NLP-progress In this paper, we focus on tagging papers with different leaderboards (i.e., TDM triples). For each leaderboard table, an ideal situation would be to extract all results reported in the same paper and associate them to different methods, we leave this for future work. The TDM triple candidates could be the valid TDM triples from the training set, or a set of TDM triples from a taxonomy. Papers in the test set have an average of 47.3 scores to choose between.12 In this experiment, the taxonomy consists of 77 TDM triples reported inTable 4. 