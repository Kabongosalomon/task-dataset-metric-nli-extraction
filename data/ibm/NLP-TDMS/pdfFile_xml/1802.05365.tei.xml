<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/yhou/git/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-02-06T23:31+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Deep contextualized word representations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><forename type="middle">E</forename><surname>Peters</surname></persName>
							<email>matthewp@allenai.org</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Allen Institute for Artificial Intelligence * Paul G. Allen School of Computer Science &amp; Engineering</orgName>
								<orgName type="institution" key="instit2">University of Washington</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Neumann</surname></persName>
							<email>markn@allenai.org</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Allen Institute for Artificial Intelligence * Paul G. Allen School of Computer Science &amp; Engineering</orgName>
								<orgName type="institution" key="instit2">University of Washington</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Mohit Iyyer †</roleName><forename type="first">Matt</forename><surname>Gardner</surname></persName>
							<email>mattg@allenai.org</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Allen Institute for Artificial Intelligence * Paul G. Allen School of Computer Science &amp; Engineering</orgName>
								<orgName type="institution" key="instit2">University of Washington</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Clark</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Allen Institute for Artificial Intelligence * Paul G. Allen School of Computer Science &amp; Engineering</orgName>
								<orgName type="institution" key="instit2">University of Washington</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenton</forename><surname>Lee</surname></persName>
							<email>kentonl@cs.washington.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Allen Institute for Artificial Intelligence * Paul G. Allen School of Computer Science &amp; Engineering</orgName>
								<orgName type="institution" key="instit2">University of Washington</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luke</forename><surname>Zettlemoyer</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Allen Institute for Artificial Intelligence * Paul G. Allen School of Computer Science &amp; Engineering</orgName>
								<orgName type="institution" key="instit2">University of Washington</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Deep contextualized word representations</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We introduce a new type of deep contextual-ized word representation that models both (1) complex characteristics of word use (e.g., syntax and semantics), and (2) how these uses vary across linguistic contexts (i.e., to model polysemy). Our word vectors are learned functions of the internal states of a deep bidirec-tional language model (biLM), which is pre-trained on a large text corpus. We show that these representations can be easily added to existing models and significantly improve the state of the art across six challenging NLP problems, including question answering, tex-tual entailment and sentiment analysis. We also present an analysis showing that exposing the deep internals of the pre-trained network is crucial, allowing downstream models to mix different types of semi-supervision signals.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Pre-trained word representations ( <ref type="bibr">Mikolov et al., 2013;</ref><ref type="bibr">Pennington et al., 2014</ref>) are a key component in many neural language understanding models. However, learning high quality representations can be challenging. They should ideally model both (1) complex characteristics of word use (e.g., syntax and semantics), and (2) how these uses vary across linguistic contexts (i.e., to model polysemy). In this paper, we introduce a new type of deep contextualized word representation that directly addresses both challenges, can be easily integrated into existing models, and significantly improves the state of the art in every considered case across a range of challenging language understanding problems.</p><p>Our representations differ from traditional word type embeddings in that each token is assigned a representation that is a function of the entire input sentence. We use vectors derived from a bidirectional LSTM that is trained with a coupled language model (LM) objective on a large text corpus. For this reason, we call them ELMo (Embeddings from Language Models) representations. Unlike previous approaches for learning contextualized word vectors ( <ref type="bibr">Peters et al., 2017;</ref><ref type="bibr">McCann et al., 2017)</ref>, ELMo representations are deep, in the sense that they are a function of all of the internal layers of the biLM. More specifically, we learn a linear combination of the vectors stacked above each input word for each end task, which markedly improves performance over just using the top LSTM layer.</p><p>Combining the internal states in this manner allows for very rich word representations. Using intrinsic evaluations, we show that the higher-level LSTM states capture context-dependent aspects of word meaning (e.g., they can be used without modification to perform well on supervised word sense disambiguation tasks) while lowerlevel states model aspects of syntax (e.g., they can be used to do part-of-speech tagging). Simultaneously exposing all of these signals is highly beneficial, allowing the learned models select the types of semi-supervision that are most useful for each end task.</p><p>Extensive experiments demonstrate that ELMo representations work extremely well in practice. We first show that they can be easily added to existing models for six diverse and challenging language understanding problems, including textual entailment, question answering and sentiment analysis. The addition of ELMo representations alone significantly improves the state of the art in every case, including up to 20% relative error reductions. For tasks where direct comparisons are possible, ELMo outperforms CoVe ( <ref type="bibr">McCann et al., 2017)</ref>, which computes contextualized representations using a neural machine translation encoder. Finally, an analysis of both ELMo and CoVe reveals that deep representations outperform those derived from just the top layer of an LSTM. Our trained models and code are publicly available, and we expect that ELMo will provide similar gains for many other NLP problems. <ref type="bibr">1</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related work</head><p>Due to their ability to capture syntactic and semantic information of words from large scale unlabeled text, pretrained word vectors ( <ref type="bibr">Turian et al., 2010;</ref><ref type="bibr">Mikolov et al., 2013;</ref><ref type="bibr">Pennington et al., 2014</ref>) are a standard component of most state-ofthe-art NLP architectures, including for question answering ( <ref type="bibr">Liu et al., 2017)</ref>, textual entailment ( <ref type="bibr">Chen et al., 2017</ref>) and semantic role labeling ( <ref type="bibr">He et al., 2017</ref>). However, these approaches for learning word vectors only allow a single contextindependent representation for each word.</p><p>Previously proposed methods overcome some of the shortcomings of traditional word vectors by either enriching them with subword information (e.g., <ref type="bibr">Wieting et al., 2016;</ref><ref type="bibr">Bojanowski et al., 2017)</ref> or learning separate vectors for each word sense (e.g., <ref type="bibr">Neelakantan et al., 2014</ref>). Our approach also benefits from subword units through the use of character convolutions, and we seamlessly incorporate multi-sense information into downstream tasks without explicitly training to predict predefined sense classes.</p><p>Other recent work has also focused on learning context-dependent representations. context2vec ( <ref type="bibr">Melamud et al., 2016</ref>) uses a bidirectional Long Short Term Memory (LSTM; <ref type="bibr">Hochreiter and Schmidhuber, 1997</ref>) to encode the context around a pivot word. Other approaches for learning contextual embeddings include the pivot word itself in the representation and are computed with the encoder of either a supervised neural machine translation (MT) system (CoVe; <ref type="bibr">McCann et al., 2017)</ref> or an unsupervised language model ( <ref type="bibr">Peters et al., 2017</ref>). Both of these approaches benefit from large datasets, although the MT approach is limited by the size of parallel corpora. In this paper, we take full advantage of access to plentiful monolingual data, and train our biLM on a corpus with approximately 30 million sentences ( <ref type="bibr">Chelba et al., 2014</ref>). We also generalize these approaches to deep contextual representations, which we show work well across a broad range of diverse NLP tasks.</p><p>Previous work has also shown that different layers of deep biRNNs encode different types of information. For example, introducing multi-task syntactic supervision (e.g., part-of-speech tags) at the lower levels of a deep LSTM can improve overall performance of higher level tasks such as dependency parsing <ref type="bibr">(Hashimoto et al., 2017)</ref> or CCG super tagging <ref type="bibr">(Søgaard and Goldberg, 2016)</ref>. In an RNN-based encoder-decoder machine translation system, <ref type="bibr">Belinkov et al. (2017)</ref> showed that the representations learned at the first layer in a 2-layer LSTM encoder are better at predicting POS tags then second layer. Finally, the top layer of an LSTM for encoding word context ( <ref type="bibr">Melamud et al., 2016</ref>) has been shown to learn representations of word sense. We show that similar signals are also induced by the modified language model objective of our ELMo representations, and it can be very beneficial to learn models for downstream tasks that mix these different types of semi-supervision. <ref type="bibr">Dai and Le (2015)</ref> and <ref type="bibr">Ramachandran et al. (2017)</ref> pretrain encoder-decoder pairs using language models and sequence autoencoders and then fine tune with task specific supervision. In contrast, after pretraining the biLM with unlabeled data, we fix the weights and add additional taskspecific model capacity, allowing us to leverage large, rich and universal biLM representations for cases where downstream training data size dictates a smaller supervised model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">ELMo: Embeddings from Language Models</head><p>Unlike most widely used word embeddings <ref type="bibr">(Pen- nington et al., 2014</ref>), ELMo word representations are functions of the entire input sentence, as described in this section. They are computed on top of two-layer biLMs with character convolutions (Sec. 3.1), as a linear function of the internal network states (Sec. 3.2). This setup allows us to do semi-supervised learning, where the biLM is pretrained at a large scale (Sec. 3.4) and easily incorporated into a wide range of existing neural NLP architectures (Sec. 3.3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Bidirectional language models</head><p>Given a sequence of N tokens, (t 1 , t 2 , ..., t N ), a forward language model computes the probability of the sequence by modeling the probability of token t k given the history (t 1 , ..., t k−1 ):</p><formula xml:id="formula_0">p(t 1 , t 2 , . . . , t N ) = N k=1 p(t k | t 1 , t 2 , . . . , t k−1 ).</formula><p>Recent state-of-the-art neural language models <ref type="bibr">(Józefowicz et al., 2016;</ref><ref type="bibr">Melis et al., 2017;</ref><ref type="bibr">Mer- ity et al., 2017</ref>) compute a context-independent token representation x LM k (via token embeddings or a CNN over characters) then pass it through L layers of forward LSTMs. At each position k, each LSTM layer outputs a context-dependent representation</p><formula xml:id="formula_1">− → h LM k,j where j = 1, . . . , L. The top layer LSTM output, − → h LM k,L</formula><p>, is used to predict the next token t k+1 with a Softmax layer.</p><p>A backward LM is similar to a forward LM, except it runs over the sequence in reverse, predicting the previous token given the future context:</p><formula xml:id="formula_2">p(t 1 , t 2 , . . . , t N ) = N k=1 p(t k | t k+1 , t k+2 , . . . , t N ).</formula><p>It can be implemented in an analogous way to a forward LM, with each backward LSTM layer j in a L layer deep model producing representations</p><formula xml:id="formula_3">← − h LM k,j of t k given (t k+1 , . . . , t N ).</formula><p>A biLM combines both a forward and backward LM. Our formulation jointly maximizes the log likelihood of the forward and backward directions:</p><formula xml:id="formula_4">N k=1 ( log p(t k | t 1 , . . . , t k−1 ; Θ x , − → Θ LST M , Θ s ) + log p(t k | t k+1 , . . . , t N ; Θ x , ← − Θ LST M , Θ s ) ) .</formula><p>We tie the parameters for both the token representation (Θ x ) and Softmax layer (Θ s ) in the forward and backward direction while maintaining separate parameters for the LSTMs in each direction. Overall, this formulation is similar to the approach of <ref type="bibr">Peters et al. (2017)</ref>, with the exception that we share some weights between directions instead of using completely independent parameters. In the next section, we depart from previous work by introducing a new approach for learning word representations that are a linear combination of the biLM layers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">ELMo</head><p>ELMo is a task specific combination of the intermediate layer representations in the biLM. For each token t k , a L-layer biLM computes a set of 2L + 1 representations</p><formula xml:id="formula_5">R k = {x LM k , − → h LM k,j , ← − h LM k,j | j = 1, . . . , L} = {h LM k,j | j = 0, . . . , L},</formula><p>where h LM k,0 is the token layer and h LM</p><formula xml:id="formula_6">k,j = [ − → h LM k,j ; ← − h LM k,j ]</formula><p>, for each biLSTM layer. For inclusion in a downstream model, ELMo collapses all layers in R into a single vector, ELMo k = E(R k ; Θ e ). In the simplest case, ELMo just selects the top layer, E(R k ) = h LM k,L , as in TagLM ( <ref type="bibr">Peters et al., 2017)</ref> and CoVe <ref type="bibr">(Mc- Cann et al., 2017</ref>). More generally, we compute a task specific weighting of all biLM layers:</p><formula xml:id="formula_7">ELMo task k = E(R k ; Θ task ) = γ task L j=0 s task j h LM k,j .</formula><p>(1) In (1), s task are softmax-normalized weights and the scalar parameter γ task allows the task model to scale the entire ELMo vector. γ is of practical importance to aid the optimization process (see supplemental material for details). Considering that the activations of each biLM layer have a different distribution, in some cases it also helped to apply layer normalization ( <ref type="bibr" target="#b0">Ba et al., 2016)</ref> to each biLM layer before weighting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Using biLMs for supervised NLP tasks</head><p>Given a pre-trained biLM and a supervised architecture for a target NLP task, it is a simple process to use the biLM to improve the task model. We simply run the biLM and record all of the layer representations for each word. Then, we let the end task model learn a linear combination of these representations, as described below.</p><p>First consider the lowest layers of the supervised model without the biLM. Most supervised NLP models share a common architecture at the lowest layers, allowing us to add ELMo in a consistent, unified manner. Given a sequence of tokens (t 1 , . . . , t N ), it is standard to form a context-independent token representation x k for each token position using pre-trained word embeddings and optionally character-based representations. Then, the model forms a context-sensitive representation h k , typically using either bidirectional RNNs, CNNs, or feed forward networks.</p><p>To add ELMo to the supervised model, we first freeze the weights of the biLM and then concatenate the ELMo vector ELMo task k with x k and pass the ELMo enhanced representation [x k ; ELMo task k ] into the task RNN. For some tasks (e.g., SNLI, SQuAD), we observe further improvements by also including ELMo at the output of the task RNN by introducing another set of output specific linear weights and replacing h k with [h k ; ELMo task k ]. As the remainder of the supervised model remains unchanged, these additions can happen within the context of more complex neural models. For example, see the SNLI experiments in Sec. 4 where a bi-attention layer follows the biLSTMs, or the coreference resolution experiments where a clustering model is layered on top of the biLSTMs.</p><p>Finally, we found it beneficial to add a moderate amount of dropout to <ref type="bibr">ELMo (Srivastava et al., 2014</ref>) and in some cases to regularize the ELMo weights by adding λw 2 2 to the loss. This imposes an inductive bias on the ELMo weights to stay close to an average of all biLM layers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Pre-trained bidirectional language model architecture</head><p>The pre-trained biLMs in this paper are similar to the architectures in Józefowicz et al. <ref type="formula">(2016)</ref> and <ref type="bibr">Kim et al. (2015)</ref>, but modified to support joint training of both directions and add a residual connection between LSTM layers. We focus on large scale biLMs in this work, as <ref type="bibr">Peters et al. (2017)</ref> highlighted the importance of using biLMs over forward-only LMs and large scale training.</p><p>To balance overall language model perplexity with model size and computational requirements for downstream tasks while maintaining a purely character-based input representation, we halved all embedding and hidden dimensions from the single best model CNN-BIG-LSTM in <ref type="bibr">Józefowicz et al. (2016)</ref>. The final model uses L = 2 biLSTM layers with 4096 units and 512 dimension projections and a residual connection from the first to second layer. The context insensitive type representation uses 2048 character n-gram convolutional filters followed by two highway layers ( <ref type="bibr">Srivastava et al., 2015</ref>) and a linear projection down to a 512 representation. As a result, the biLM provides three layers of representations for each input token, including those outside the training set due to the purely character input. In contrast, traditional word embedding methods only provide one layer of representation for tokens in a fixed vocabulary.</p><p>After training for 10 epochs on the 1B Word Benchmark ( <ref type="bibr">Chelba et al., 2014</ref>), the average forward and backward perplexities is 39.7, compared to 30.0 for the forward CNN-BIG-LSTM. Generally, we found the forward and backward perplexities to be approximately equal, with the backward value slightly lower.</p><p>Once pretrained, the biLM can compute representations for any task. In some cases, fine tuning the biLM on domain specific data leads to significant drops in perplexity and an increase in downstream task performance. This can be seen as a type of domain transfer for the biLM. As a result, in most cases we used a fine-tuned biLM in the downstream task. See supplemental material for details. <ref type="table">Table 1</ref> shows the performance of ELMo across a diverse set of six benchmark NLP tasks. In every task considered, simply adding ELMo establishes a new state-of-the-art result, with relative error reductions ranging from 6 -20% over strong base models. This is a very general result across a diverse set model architectures and language understanding tasks. In the remainder of this section we provide high-level sketches of the individual task results; see the supplemental material for full experimental details.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Evaluation</head><p>Question answering The Stanford Question Answering Dataset (SQuAD) ( <ref type="bibr">Rajpurkar et al., 2016)</ref> contains 100K+ crowd sourced questionanswer pairs where the answer is a span in a given Wikipedia paragraph. Our baseline model <ref type="bibr">(Clark and Gardner, 2017</ref>) is an improved version of the Bidirectional Attention Flow model in <ref type="bibr">Seo et al. (BiDAF;</ref><ref type="bibr">2017)</ref>. It adds a self-attention layer after the bidirectional attention component, simplifies some of the pooling operations and substitutes the LSTMs for gated recurrent units (GRUs; <ref type="bibr">Cho et al., 2014</ref>). After adding ELMo to the baseline model, test set F 1 improved by 4.7% from 81.1% to 85.8%, a 24.9% relative error reduction over the baseline, and improving the overall single model state-of-the-art by 1.4%. A 11 member ensemble pushes F 1 to 87.4, the overall state-of-the-art at time of submission to the leaderboard. <ref type="bibr">2</ref> The increase of 4.7% with ELMo is also significantly larger then the 1.8% improvement from adding CoVe to a baseline model ( <ref type="bibr">McCann et al., 2017)</ref>.  Textual entailment Textual entailment is the task of determining whether a "hypothesis" is true, given a "premise". The Stanford Natural Language Inference (SNLI) corpus <ref type="bibr">(Bowman et al., 2015</ref>) provides approximately 550K hypothesis/premise pairs. Our baseline, the ESIM sequence model from <ref type="bibr">Chen et al. (2017)</ref>, uses a biL-STM to encode the premise and hypothesis, followed by a matrix attention layer, a local inference layer, another biLSTM inference composition layer, and finally a pooling operation before the output layer. Overall, adding ELMo to the ESIM model improves accuracy by an average of 0.7% across five random seeds. A five member ensemble pushes the overall accuracy to 89.3%, exceeding the previous ensemble best of 88.9% ( <ref type="bibr">Gong et al., 2018)</ref>.</p><p>Semantic role labeling A semantic role labeling (SRL) system models the predicate-argument structure of a sentence, and is often described as answering "Who did what to whom". <ref type="bibr">He et al. (2017)</ref> modeled SRL as a BIO tagging problem and used an 8-layer deep biLSTM with forward and backward directions interleaved, following <ref type="bibr">Zhou and Xu (2015</ref> Coreference resolution Coreference resolution is the task of clustering mentions in text that refer to the same underlying real world entities. Our baseline model is the end-to-end span-based neural model of <ref type="bibr">Lee et al. (2017)</ref>. It uses a biLSTM and attention mechanism to first compute span representations and then applies a softmax mention ranking model to find coreference chains. In our experiments with the OntoNotes coreference annotations from the CoNLL 2012 shared task ( <ref type="bibr">Pradhan et al., 2012</ref>   <ref type="table">Table 1</ref>, our ELMo enhanced biLSTM-CRF achieves 92.22% F 1 averaged over five runs. The key difference between our system and the previous state of the art from <ref type="bibr">Peters et al. (2017)</ref> is that we allowed the task model to learn a weighted average of all biLM layers, whereas Peters et al. (2017) only use the top biLM layer. As shown in Sec. 5.1, using all layers instead of just the last layer improves performance across multiple tasks.</p><p>Sentiment analysis The fine-grained sentiment classification task in the Stanford Sentiment Treebank (SST-5; Socher et al., 2013) involves selecting one of five labels (from very negative to very positive) to describe a sentence from a movie review. The sentences contain diverse linguistic phenomena such as idioms and complex syntac-    </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Analysis</head><p>This section provides an ablation analysis to validate our chief claims and to elucidate some interesting aspects of ELMo representations. Sec. 5.1 shows that using deep contextual representations in downstream tasks improves performance over previous work that uses just the top layer, regardless of whether they are produced from a biLM or MT encoder, and that ELMo representations provide the best overall performance. Sec. 5.3 explores the different types of contextual information captured in biLMs and uses two intrinsic evaluations to show that syntactic information is better represented at lower layers while semantic information is captured a higher layers, consistent with MT encoders. It also shows that our biLM consistently provides richer representations then CoVe. Additionally, we analyze the sensitivity to where ELMo is included in the task model (Sec. 5.2), training set size (Sec. 5.4), and visualize the ELMo learned weights across the tasks (Sec. 5.5).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Alternate layer weighting schemes</head><p>There are many alternatives to Equation 1 for combining the biLM layers. Previous work on contextual representations used only the last layer, whether it be from a biLM ( <ref type="bibr">Peters et al., 2017)</ref> or an MT encoder (CoVe; <ref type="bibr">McCann et al., 2017)</ref>. The choice of the regularization parameter λ is also important, as large values such as λ = 1 effectively reduce the weighting function to a simple average over the layers, while smaller values (e.g., λ = 0.001) allow the layer weights to vary. <ref type="table" target="#tab_4">Table 2</ref> compares these alternatives for SQuAD, SNLI and SRL. Including representations from all layers improves overall performance over just using the last layer, and including contextual representations from the last layer improves performance over the baseline. For example, in the case of SQuAD, using just the last biLM layer improves development F 1 by 3.9% over the baseline. Averaging all biLM layers instead of using just the last layer improves F 1 another 0.3% (comparing "Last Only" to λ=1 columns), and allowing the task model to learn individual layer weights improves F 1 another 0.2% (λ=1 vs. λ=0.001). A small λ is preferred in most cases with ELMo, although for NER, a task with a smaller training set, the results are insensitive to λ (not shown).</p><p>The overall trend is similar with CoVe but with smaller increases over the baseline. For SNLI, averaging all layers with λ=1 improves development accuracy from 88.2 to 88.7% over using just the last layer. SRL F 1 increased a marginal 0.1% to 82.2 for the λ=1 case compared to using the last layer only.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Where to include ELMo?</head><p>All of the task architectures in this paper include word embeddings only as input to the lowest layer biRNN. However, we find that including ELMo at the output of the biRNN in task-specific architectures improves overall results for some tasks. As shown in <ref type="table" target="#tab_5">Table 3</ref>, including ELMo at both the input and output layers for SNLI and SQuAD improves over just the input layer, but for SRL (and coreference resolution, not shown) performance is highest when it is included at just the input layer. One possible explanation for this result is that both the SNLI and SQuAD architectures use attention layers after the biRNN, so introducing ELMo at this layer allows the model to attend directly to the biLM's internal representations. In the SRL case,  . . } they were actors who had been handed fat roles in a successful play , and had talent enough to fill the roles competently , with nice understatement .  the task-specific context representations are likely more important than those from the biLM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">What information is captured by the biLM's representations?</head><p>Since adding ELMo improves task performance over word vectors alone, the biLM's contextual representations must encode information generally useful for NLP tasks that is not captured in word vectors. Intuitively, the biLM must be disambiguating the meaning of words using their context. Consider "play", a highly polysemous word. The top of <ref type="table" target="#tab_7">Table 4</ref> lists nearest neighbors to "play" using GloVe vectors. They are spread across several parts of speech (e.g., "played", "playing" as verbs, and "player", "game" as nouns) but concentrated in the sportsrelated senses of "play". In contrast, the bottom two rows show nearest neighbor sentences from the SemCor dataset (see below) using the biLM's context representation of "play" in the source sentence. In these cases, the biLM is able to disambiguate both the part of speech and word sense in the source sentence. These observations can be quantified using an  intrinsic evaluation of the contextual representations similar to <ref type="bibr">Belinkov et al. (2017)</ref>. To isolate the information encoded by the biLM, the representations are used to directly make predictions for a fine grained word sense disambiguation (WSD) task and a POS tagging task. Using this approach, it is also possible to compare to CoVe, and across each of the individual layers. Word sense disambiguation Given a sentence, we can use the biLM representations to predict the sense of a target word using a simple 1-nearest neighbor approach, similar to <ref type="bibr">Melamud et al. (2016)</ref>. To do so, we first use the biLM to compute representations for all words in SemCor 3.0, our training corpus <ref type="bibr">(Miller et al., 1994)</ref>, and then take the average representation for each sense. At test time, we again use the biLM to compute representations for a given target word and take the nearest neighbor sense from the training set, falling back to the first sense from WordNet for lemmas not observed during training. <ref type="table" target="#tab_8">Table 5</ref> compares WSD results using the evaluation framework from <ref type="bibr">Raganato et al. (2017b)</ref> across the same suite of four test sets in <ref type="bibr">Raganato et al. (2017a)</ref>. Overall, the biLM top layer representations have F 1 of 69.0 and are better at WSD then the first layer. This is competitive with a state-of-the-art WSD-specific supervised model using hand crafted features ( <ref type="bibr">Iacobacci et al., 2016)</ref> and a task specific biLSTM that is also trained with auxiliary coarse-grained semantic labels and POS tags <ref type="figure" target="#fig_4">(Raganato et al., 2017a)</ref>. The CoVe biLSTM layers follow a similar pattern to those from the biLM (higher overall performance at the second layer compared to the first); however, our biLM outperforms the CoVe biLSTM, which trails the WordNet first sense baseline.</p><p>POS tagging To examine whether the biLM captures basic syntax, we used the context representations as input to a linear classifier that predicts POS tags with the Wall Street Journal portion of the Penn Treebank (PTB) <ref type="bibr">(Marcus et al., 1993)</ref>. As the linear classifier adds only a small amount of model capacity, this is direct test of the biLM's representations. Similar to WSD, the biLM representations are competitive with carefully tuned, task specific biLSTMs ( <ref type="bibr">Ling et al., 2015;</ref><ref type="bibr">Ma and Hovy, 2016)</ref>. However, unlike WSD, accuracies using the first biLM layer are higher than the top layer, consistent with results from deep biLSTMs in multi-task training <ref type="bibr">(Søgaard and Gold- berg, 2016;</ref><ref type="bibr">Hashimoto et al., 2017)</ref> and MT <ref type="bibr">(Be- linkov et al., 2017)</ref>. CoVe POS tagging accuracies follow the same pattern as those from the biLM, and just like for WSD, the biLM achieves higher accuracies than the CoVe encoder.</p><p>Implications for supervised tasks Taken together, these experiments confirm different layers in the biLM represent different types of information and explain why including all biLM layers is important for the highest performance in downstream tasks. In addition, the biLM's representations are more transferable to WSD and POS tagging than those in CoVe, helping to illustrate why ELMo outperforms CoVe in downstream tasks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Sample efficiency</head><p>Adding ELMo to a model increases the sample efficiency considerably, both in terms of number of parameter updates to reach state-of-the-art performance and the overall training set size. For example, the SRL model reaches a maximum development F 1 after 486 epochs of training without ELMo. After adding ELMo, the model exceeds the baseline maximum at epoch 10, a 98% relative decrease in the number of updates needed to reach  the same level of performance.</p><p>In addition, ELMo-enhanced models use smaller training sets more efficiently than models without ELMo. <ref type="figure" target="#fig_4">Figure 1</ref> compares the performance of baselines models with and without ELMo as the percentage of the full training set is varied from 0.1% to 100%. Improvements with ELMo are largest for smaller training sets and significantly reduce the amount of training data needed to reach a given level of performance. In the SRL case, the ELMo model with 1% of the training set has about the same F 1 as the baseline model with 10% of the training set. <ref type="figure" target="#fig_5">Figure 2</ref> visualizes the softmax-normalized learned layer weights. At the input layer, the task model favors the first biLSTM layer. For coreference and SQuAD, the this is strongly favored, but the distribution is less peaked for the other tasks. The output layer weights are relatively balanced, with a slight preference for the lower layers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Visualization of learned weights</head><p>We have introduced a general approach for learning high-quality deep context-dependent representations from biLMs, and shown large improvements when applying ELMo to a broad range of NLP tasks. Through ablations and other controlled experiments, we have also confirmed that the biLM layers efficiently encode different types of syntactic and semantic information about wordsin-context, and that using all layers improves overall task performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Supplemental Material to accompany Deep contextualized word representations</head><p>This supplement contains details of the model architectures, training routines and hyper-parameter choices for the state-of-the-art models in Section 4.</p><p>All of the individual models share a common architecture in the lowest layers with a context independent token representation below several layers of stacked RNNs -LSTMs in every case except the SQuAD model that uses GRUs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.1 Fine tuning biLM</head><p>As noted in Sec. 3.4, fine tuning the biLM on task specific data typically resulted in significant drops in perplexity. To fine tune on a given task, the supervised labels were temporarily ignored, the biLM fine tuned for one epoch on the training split and evaluated on the development split. Once fine tuned, the biLM weights were fixed during task training. <ref type="table" target="#tab_12">Table 7</ref> lists the development set perplexities for the considered tasks. In every case except CoNLL 2012, fine tuning results in a large improvement in perplexity, e.g., from 72.1 to 16.8 for SNLI.</p><p>The impact of fine tuning on supervised performance is task dependent. In the case of SNLI, fine tuning the biLM increased development accuracy 0.6% from 88.9% to 89.5% for our single best model. However, for sentiment classification development set accuracy is approximately the same regardless whether a fine tuned biLM was used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2 Importance of γ in Eqn. (1)</head><p>The γ parameter in Eqn. (1) was of practical importance to aid optimization, due to the different distributions between the biLM internal representations and the task specific representations. It is especially important in the last-only case in Sec. 5.1. Without this parameter, the last-only case performed poorly (well below the baseline) for SNLI and training failed completely for SRL.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.3 Textual Entailment</head><p>Our baseline SNLI model is the ESIM sequence model from <ref type="bibr">Chen et al. (2017)</ref>. Following the original implementation, we used 300 dimensions for all LSTM and feed forward layers and pretrained 300 dimensional GloVe embeddings that were fixed during training. For regularization, we  added 50% variational dropout ( <ref type="bibr">Gal and Ghahra- mani, 2016</ref>) to the input of each LSTM layer and 50% dropout ( <ref type="bibr">Srivastava et al., 2014</ref>) at the input to the final two fully connected layers. All feed forward layers use ReLU activations. Parameters were optimized using Adam ( <ref type="bibr">Kingma and Ba, 2015</ref>) with gradient norms clipped at 5.0 and initial learning rate 0.0004, decreasing by half each time accuracy on the development set did not increase in subsequent epochs. The batch size was 32.</p><p>The best ELMo configuration added ELMo vectors to both the input and output of the lowest layer LSTM, using (1) with layer normalization and λ = 0.001. Due to the increased number of parameters in the ELMo model, we added 2 regularization with regularization coefficient 0.0001 to all recurrent and feed forward weight matrices and 50% dropout after the attention layer. <ref type="table" target="#tab_13">Table 8</ref> compares test set accuracy of our system to previously published systems. Overall, adding ELMo to the ESIM model improved accuracy by 0.7% establishing a new single model state-of-the-art of 88.7%, and a five member ensemble pushes the overall accuracy to 89.3%.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.4 Question Answering</head><p>Our QA model is a simplified version of the model from <ref type="bibr">Clark and Gardner (2017)</ref>. It embeds tokens by concatenating each token's case-sensitive 300 dimensional GloVe word vector <ref type="bibr">(Penning- ton et al., 2014</ref>) with a character-derived embedding produced using a convolutional neural network followed by max-pooling on learned character embeddings. The token embeddings are passed through a shared bi-directional GRU, and then the bi-directional attention mechanism from BiDAF ( <ref type="bibr">Seo et al., 2017</ref>). The augmented con-</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Model</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acc.</head><p>Feature based <ref type="bibr">(Bowman et al., 2015)</ref> 78.2 DIIN ( <ref type="bibr">Gong et al., 2018)</ref> 88.0 BCN+Char+CoVe ( <ref type="bibr">McCann et al., 2017)</ref> 88.1 ESIM ( <ref type="bibr">Chen et al., 2017)</ref> 88.0 ESIM+TreeLSTM ( <ref type="bibr">Chen et al., 2017)</ref> 88.6 ESIM+ELMo 88.7 ± 0.17 DIIN ensemble ( <ref type="bibr">Gong et al., 2018)</ref> 88.9 ESIM+ELMo ensemble 89.3 text vectors are then passed through a linear layer with ReLU activations, a residual self-attention layer that uses a GRU followed by the same attention mechanism applied context-to-context, and another linear layer with ReLU activations. Finally, the results are fed through linear layers to predict the start and end token of the answer. Variational dropout is used before the input to the GRUs and the linear layers at a rate of 0.2. A dimensionality of 90 is used for the GRUs, and 180 for the linear layers. We optimize the model using Adadelta with a batch size of 45. At test time we use an exponential moving average of the weights and limit the output span to be of at most size 17. We do not update the word vectors during training.</p><p>Performance was highest when adding ELMo without layer normalization to both the input and output of the contextual GRU layer and leaving the ELMo weights unregularized (λ = 0). <ref type="table" target="#tab_15">Table 9</ref> compares test set results from the SQuAD leaderboard as of November 17, 2017 when we submitted our system. Overall, our submission had the highest single model and ensemble results, improving the previous single model result (SAN) by 1.4% F 1 and our baseline by 4.2%. A 11 member ensemble pushes F 1 to 87.4%, 1.0% increase over the previous ensemble best.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.5 Semantic Role Labeling</head><p>Our baseline SRL model is an exact reimplementation of <ref type="bibr">(He et al., 2017)</ref>. Words are represented using a concatenation of 100 dimensional vector representations, initialized using GloVe <ref type="bibr">(Penning- ton et al., 2014</ref>) and a binary, per-word predicate feature, represented using an 100 dimensional em-bedding. This 200 dimensional token representation is then passed through an 8 layer "interleaved" biLSTM with a 300 dimensional hidden size, in which the directions of the LSTM layers alternate per layer. This deep LSTM uses Highway connections ( <ref type="bibr">Srivastava et al., 2015</ref>) between layers and variational recurrent dropout ( <ref type="bibr">Gal and Ghahramani, 2016</ref>). This deep representation is then projected using a final dense layer followed by a softmax activation to form a distribution over all possible tags. Labels consist of semantic roles from PropBank ( <ref type="bibr">Palmer et al., 2005</ref>) augmented with a BIO labeling scheme to represent argument spans. During training, we minimize the negative log likelihood of the tag sequence using Adadelta with a learning rate of 1.0 and ρ = 0.95 <ref type="bibr">(Zeiler, 2012)</ref>. At test time, we perform Viterbi decoding to enforce valid spans using BIO constraints. Variational dropout of 10% is added to all LSTM hidden layers. Gradients are clipped if their value exceeds 1.0. Models are trained for 500 epochs or until validation F1 does not improve for 200 epochs, whichever is sooner. The pretrained GloVe vectors are fine-tuned during training. The final dense layer and all cells of all LSTMs are initialized to be orthogonal. The forget gate bias is initialized to 1 for all LSTMs, with all other gates initialized to 0, as per ( <ref type="bibr">Józefowicz et al., 2015)</ref>. <ref type="table" target="#tab_16">Table 10</ref> compares test set F1 scores of our ELMo augmented implementation of ( <ref type="bibr">He et al., 2017</ref>) with previous results. Our single model score of 84.6 F1 represents a new state-of-the-art result on the CONLL 2012 Semantic Role Labeling task, surpassing the previous single model result by 2.9 F1 and a 5-model ensemble by 1.2 F1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.6 Coreference resolution</head><p>Our baseline coreference model is the end-to-end neural model from <ref type="bibr">Lee et al. (2017)</ref> with all hyModel EM F 1 BiDAF ( <ref type="bibr">Seo et al., 2017)</ref> 68.0 77.3 BiDAF + Self Attention 72.1 81.1 DCN+ 75.1 83.1 Reg-RaSoR 75.8 83.3 FusionNet 76.0 83.9 r-net ( <ref type="bibr">Wang et al., 2017)</ref> 76.5 84.3 SAN ( <ref type="bibr">Liu et al., 2017)</ref> 76.8 84.    perparameters exactly following the original implementation. The best configuration added ELMo to the input of the lowest layer biLSTM and weighted the biLM layers using (1) without any regularization (λ = 0) or layer normalization. 50% dropout was added to the ELMo representations. <ref type="table" target="#tab_17">Table 11</ref> compares our results with previously published results. Overall, we improve the single model state-of-the-art by 3.2% average F 1 , and our single model result improves the previous ensemble best by 1.6% F 1 . Adding ELMo to the output from the biLSTM in addition to the biLSTM input reduced F 1 by approximately 0.7% (not shown).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.7 Named Entity Recognition</head><p>Our baseline NER model concatenates 50 dimensional pre-trained Senna vectors <ref type="bibr">(Collobert et al., 2011</ref>) with a CNN character based representation. The character representation uses 16 dimensional character embeddings and 128 convolutional filters of width three characters, a ReLU activation and by max pooling. The token representation is passed through two biLSTM layers, the first with 200 hidden units and the second with 100 hidden units before a final dense layer and softmax layer. During training, we use a CRF loss and at test time perform decoding using the Viterbi algorithm while ensuring that the output tag sequence is valid.</p><p>Variational dropout is added to the input of both biLSTM layers. During training the gradients are rescaled if their 2 norm exceeds 5.0 and parameters updated using Adam with constant learning rate of 0.001. The pre-trained Senna embeddings are fine tuned during training. We employ early stopping on the development set and report the averaged test set score across five runs with different random seeds.</p><p>ELMo was added to the input of the lowest layer task biLSTM. As the CoNLL 2003 NER data set is relatively small, we found the best performance by constraining the trainable layer weights to be effectively constant by setting λ = 0.1 with (1). <ref type="table" target="#tab_4">Table 12</ref> compares test set F 1 scores of our ELMo enhanced biLSTM-CRF tagger with previous results. Overall, the 92.22% F 1 from our system establishes a new state-of-the-art. When compared to <ref type="bibr">Peters et al. (2017)</ref>, using representations Model F 1 ± std.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Collobert et al. (2011) ♣</head><p>89.59 <ref type="bibr">Lample et al. (2016)</ref> 90.94 <ref type="bibr">Ma and Hovy (2016)</ref> 91.2 Chiu and Nichols (2016) ♣,♦ 91.62 ± 0.33 <ref type="bibr">Peters et al. (2017)</ref> ♦ 91.93 ± 0.19 biLSTM-CRF + ELMo 92.22 ± 0.10  from all layers of the biLM provides a modest improvement.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.8 Sentiment classification</head><p>We use almost the same biattention classification network architecture described in <ref type="bibr">McCann et al. (2017)</ref>, with the exception of replacing the final maxout network with a simpler feedforward network composed of two ReLu layers with dropout. A BCN model with a batch-normalized maxout network reached significantly lower validation accuracies in our experiments, although there may be discrepancies between our implementation and that of <ref type="bibr">McCann et al. (2017)</ref>. To match the CoVe training setup, we only train on phrases that contain four or more tokens. We use 300-d hidden states for the biLSTM and optimize the model parameters with Adam ( <ref type="bibr">Kingma and Ba, 2015</ref>) using a learning rate of 0.0001. The trainable biLM layer weights are regularized by λ = 0.001, and we add ELMo to both the input and output of the biLSTM; the output ELMo vectors are computed with a second biLSTM and concatenated to the input.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>TASK</head><label></label><figDesc></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Following recent state-of-the-art systems (Lample et al., 2016; Peters et al., 2017), the base- line model uses pre-trained word embeddings, a character-based CNN representation, two biLSTM layers and a conditional random field (CRF) loss (Lafferty et al., 2001), similar to Collobert et al. (2011). As shown in</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Task</head><label></label><figDesc></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Source</head><label></label><figDesc></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Comparison of baseline vs. ELMo performance for SNLI and SRL as the training set size is varied from 0.1% to 100%.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Visualization of softmax normalized biLM layer weights across tasks and ELMo locations. Normalized weights less then 1/3 are hatched with horizontal lines and those greater then 2/3 are speckled.</figDesc><graphic url="image-1.png" coords="8,330.23,260.08,173.10,65.03" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Development set performance for SQuAD, 
SNLI and SRL comparing using all layers of the biLM 
(with different choices of regularization strength λ) to 
just the top layer. 

Task 
Input 
Only 

Input &amp; 
Output 

Output 
Only 
SQuAD 
85.1 
85.6 
84.8 
SNLI 
88.9 
89.5 
88.7 
SRL 
84.7 
84.3 
80.9 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 3 :</head><label>3</label><figDesc></figDesc><table>Development set performance for SQuAD, 
SNLI and SRL when including ELMo at different lo-
cations in the supervised model. 

tic constructions such as negations that are diffi-
cult for models to learn. Our baseline model is 
the biattentive classification network (BCN) from 
McCann et al. (2017), which also held the prior 
state-of-the-art result when augmented with CoVe 
embeddings. Replacing CoVe with ELMo in the 
BCN model results in a 1.0% absolute accuracy 
improvement over the state of the art. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="true"><head>Table 4 : Nearest neighbors to "play" using GloVe and the context embeddings from a biLM.</head><label>4</label><figDesc></figDesc><table>Model 
F 1 

WordNet 1st Sense Baseline 65.9 
Raganato et al. (2017a) 
69.9 
Iacobacci et al. (2016) 
70.1 
CoVe, First Layer 
59.4 
CoVe, Second Layer 
64.7 
biLM, First layer 
67.4 
biLM, Second layer 
69.0 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8" validated="false"><head>Table 5 :</head><label>5</label><figDesc>All-words fine grained WSD F 1 . For CoVe and the biLM, we report scores for both the first and second layer biLSTMs.</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10" validated="false"><head>Table 6 :</head><label>6</label><figDesc>Test set POS tagging accuracies for PTB. For CoVe and the biLM, we report scores for both the first and second layer biLSTMs.</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_12" validated="false"><head>Table 7 :</head><label>7</label><figDesc></figDesc><table>Development set perplexity before and after 
fine tuning for one epoch on the training set for vari-
ous datasets (lower is better). Reported values are the 
average of the forward and backward perplexities. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_13" validated="false"><head>Table 8 :</head><label>8</label><figDesc></figDesc><table>SNLI test set accuracy. 3 Single model results occupy the portion, with ensemble results at the bottom. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_15" validated="true"><head>Table 9 :</head><label>9</label><figDesc>Test set results for SQuAD, showing both Exact Match (EM) and F 1 . The top half of the table contains single model results with ensembles at the bottom. References provided where available.</figDesc><table>Model 
F 1 

Pradhan et al. (2013) 
77.5 
Zhou and Xu (2015) 
81.3 
He et al. (2017), single 
81.7 
He et al. (2017), ensemble 83.4 
He et al. (2017), our impl. 81.4 
He et al. (2017) + ELMo 
84.6 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_16" validated="false"><head>Table 10 :</head><label>10</label><figDesc></figDesc><table>SRL CoNLL 2012 test set F 1 . 

Model 
Average F 1 

Durrett and Klein (2013) 
60.3 
Wiseman et al. (2016) 
64.2 
Clark and Manning (2016) 
65.7 
Lee et al. (2017) (single) 
67.2 
Lee et al. (2017) (ensemble) 68.8 
Lee et al. (2017) + ELMo 
70.4 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_17" validated="false"><head>Table 11 :</head><label>11</label><figDesc></figDesc><table>Coreference resolution average F 1 on the test 
set from the CoNLL 2012 shared task. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_18" validated="false"><head>Table 12 :</head><label>12</label><figDesc></figDesc><table>Test set F 1 for CoNLL 2003 NER task. Mod-
els with ♣ included gazetteers and those with ♦ used 
both the train and development splits for training. 

Model 
Acc. 

DMN (Kumar et al., 2016) 
52.1 
LSTM-CNN (Zhou et al., 2016) 
52.4 
NTI (Munkhdalai and Yu, 2017) 
53.1 
BCN+Char+CoVe (McCann et al., 2017) 53.7 
BCN+ELMo 
54.7 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_19" validated="false"><head>Table 13 :</head><label>13</label><figDesc></figDesc><table>Test set accuracy for SST-5. 

</table></figure>

			<note place="foot" n="1"> http://allennlp.org/elmo</note>

			<note place="foot" n="2"> As of November 17, 2017.</note>

			<note place="foot" n="3"> A comprehensive comparison can be found at https: //nlp.stanford.edu/projects/snli/</note>
		</body>
		<back>
			<div type="annex">
			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jimmy</forename><surname>Ba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ryan</forename><surname>Kiros</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geoffrey</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<idno>abs/1607.06450</idno>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
