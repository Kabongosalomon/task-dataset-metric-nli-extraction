<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/yhou/git/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-02-07T07:26+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Semi-supervised sequence tagging with bidirectional language models</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><forename type="middle">E</forename><surname>Peters</surname></persName>
							<email>matthewp@allenai.org</email>
							<affiliation key="aff0">
								<orgName type="department">Allen Institute for Artificial Intelligence</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Waleed</forename><surname>Ammar</surname></persName>
							<email>waleeda@allenai.org</email>
							<affiliation key="aff0">
								<orgName type="department">Allen Institute for Artificial Intelligence</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chandra</forename><surname>Bhagavatula</surname></persName>
							<email>chandrab@allenai.org</email>
							<affiliation key="aff0">
								<orgName type="department">Allen Institute for Artificial Intelligence</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Russell</forename><surname>Power</surname></persName>
							<email>russellp@allenai.org</email>
							<affiliation key="aff0">
								<orgName type="department">Allen Institute for Artificial Intelligence</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Semi-supervised sequence tagging with bidirectional language models</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Pre-trained word embeddings learned from unlabeled text have become a standard component of neural network archi-tectures for NLP tasks. However, in most cases, the recurrent network that operates on word-level representations to produce context sensitive representations is trained on relatively little labeled data. In this paper, we demonstrate a general semi-supervised approach for adding pre-trained context embeddings from bidi-rectional language models to NLP systems and apply it to sequence labeling tasks. We evaluate our model on two standard datasets for named entity recognition (NER) and chunking, and in both cases achieve state of the art results, surpassing previous systems that use other forms of transfer or joint learning with additional labeled data and task specific gazetteers.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Due to their simplicity and efficacy, pre-trained word embedding have become ubiquitous in NLP systems. Many prior studies have shown that they capture useful semantic and syntactic information ( <ref type="bibr">Mikolov et al., 2013;</ref><ref type="bibr">Pennington et al., 2014</ref>) and including them in NLP systems has been shown to be enormously helpful for a variety of downstream tasks <ref type="bibr" target="#b8">(Collobert et al., 2011</ref>).</p><p>However, in many NLP tasks it is essential to represent not just the meaning of a word, but also the word in context. For example, in the two phrases "A Central Bank spokesman" and "The Central African Republic", the word 'Central' is used as part of both an Organization and Location. Accordingly, current state of the art sequence tagging models typically include a bidirectional recurrent neural network (RNN) that encodes token sequences into a context sensitive representation before making token specific predictions ( <ref type="bibr">Yang et al., 2017;</ref><ref type="bibr">Ma and Hovy, 2016;</ref><ref type="bibr">Lample et al., 2016;</ref><ref type="bibr" target="#b12">Hashimoto et al., 2016)</ref>.</p><p>Although the token representation is initialized with pre-trained embeddings, the parameters of the bidirectional RNN are typically learned only on labeled data. Previous work has explored methods for jointly learning the bidirectional RNN with supplemental labeled data from other tasks (e.g., <ref type="bibr">Søgaard and Goldberg, 2016;</ref><ref type="bibr">Yang et al., 2017)</ref>.</p><p>In this paper, we explore an alternate semisupervised approach which does not require additional labeled data. We use a neural language model (LM), pre-trained on a large, unlabeled corpus to compute an encoding of the context at each position in the sequence (hereafter an LM embedding) and use it in the supervised sequence tagging model. Since the LM embeddings are used to compute the probability of future words in a neural LM, they are likely to encode both the semantic and syntactic roles of words in context.</p><p>Our main contribution is to show that the context sensitive representation captured in the LM embeddings is useful in the supervised sequence tagging setting. When we include the LM embeddings in our system overall performance increases from 90.87% to 91.93% F 1 for the CoNLL 2003 NER task, a more then 1% absolute F1 increase, and a substantial improvement over the previous state of the art. We also establish a new state of the art result (96.37% F 1 ) for the CoNLL 2000 Chunking task.</p><p>As a secondary contribution, we show that using both forward and backward LM embeddings boosts performance over a forward only LM. We also demonstrate that domain specific pre-training is not necessary by applying a LM trained in the news domain to scientific papers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Language model augmented sequence taggers (TagLM) 2.1 Overview</head><p>The main components in our language-modelaugmented sequence tagger (TagLM) are illustrated in <ref type="figure">Fig. 1</ref>. After pre-training word embeddings and a neural LM on large, unlabeled corpora (Step 1), we extract the word and LM embeddings for every token in a given input sequence (Step 2) and use them in the supervised sequence tagging model (Step 3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Baseline sequence tagging model</head><p>Our baseline sequence tagging model is a hierarchical neural tagging model, closely following a number of recent studies <ref type="bibr">(Ma and Hovy, 2016;</ref><ref type="bibr">Lample et al., 2016;</ref><ref type="bibr">Yang et al., 2017;</ref><ref type="bibr" target="#b5">Chiu and Nichols, 2016</ref>) (left side of <ref type="figure">Figure 2</ref>). Given a sentence of tokens (t 1 , t 2 , . . . , t N ) it first forms a representation, x k , for each token by concatenating a character based representation c k with a token embedding w k :</p><formula xml:id="formula_0">c k = C(t k ; θ c ) w k = E(t k ; θ w ) x k = [c k ; w k ]<label>(1)</label></formula><p>The character representation c k captures morphological information and is either a convolutional neural network (CNN) ( <ref type="bibr">Ma and Hovy, 2016;</ref><ref type="bibr" target="#b5">Chiu and Nichols, 2016</ref>) or RNN ( <ref type="bibr">Yang et al., 2017;</ref><ref type="bibr">Lample et al., 2016</ref>). It is parameterized by C(·, θ c ) with parameters θ c . The token embeddings, w k , are obtained as a lookup E(·, θ w ), initialized using pre-trained word embeddings, and fine tuned during training <ref type="bibr" target="#b8">(Collobert et al., 2011</ref>). To learn a context sensitive representation, we employ multiple layers of bidirectional RNNs. For each token position, k, the hidden state h k,i of RNN layer i is formed by concatenating the hidden states from the forward ( − → h k,i ) and backward ( ← − h k,i ) RNNs. As a result, the bidirectional RNN is able to use both past and future information to make a prediction at token k. More formally, for the first RNN layer that operates on x k to output h k,1 :</p><formula xml:id="formula_1">− → h k,1 = − → R 1 (x k , − → h k−1,1 ; θ− → R 1 ) ← − h k,1 = ← − R 1 (x k , ← − h k+1,1 ; θ← − R 1 ) h k,1 = [ − → h k,1 ; ← − h k,1 ]<label>(2)</label></formula><p>Step 2: Prepare word embedding and LM embedding for each token in the input sequence.</p><p>The need to capture future context in the LM embeddings suggests itis beneficial to also consider a \textit{backward} LM in additionalto the traditional \textit{forward} LM. A backward LM predicts the previous token given the future context. Given a sentence with $N$ tokens, it computes\[P(t _ { k -1} | t_k, t_{k+1}, ..., t_N). \]A ba ck w a r d LM ca n be implemThe need to capture future context in the LM embeddings suggests itis beneficial to also consider a \textit{backward} LM in additionalto the traditional \textit{forward} LM . A ba ck w a r d LM pr edi ct s t he pr ev i ous t ok en g i v en t he fut ur e context. Given a sentence with $N$ tokens, it computes\[P(t _ { k -1} | t_k, t_{k+1}, ..., t_N). \]A ba ck w a r d LM ca n be i mpl e me nt e d i n a n analogous way to a forward LM and produces an embedding $\ov erleftarrow{\ma t hbf{h}}^{LM}_k$, for the sequence $(t_k, t_{k+1}, ..., t_N)$, the output embeddings of the top lay er LSTM. The need to capture future context in the LM embeddings suggests itis beneficial to also consider a \textit{backward} LM in additionalto the traditional \textit{forward} LM. A backward LM predicts the previous token given the future context. Given a sentence with $N$ tokens, it computes\[P(t _ { k -1} | t_k, t_{k+1}, ..., t_N). \]A ba ck w a r d LM ca n be i mpl ement ed i n a n a na l og ous w a y t o a for w a r d LM a nd produces an embedding $\ov erleftarrow{\ma t hbf{h}}^{LM}_k$, for the sequence $(t_k, t_{k+1}, ..., t_N)$, the output embeddings of the top layer LS T M .ent ed in an analogous way to a forward LM and produces an embedding $\ov erleftarrow{\ma t hbf{h}}^{LM}_k$, for the sequence $(t_k, t_{k+1}, ..., t_N)$, the output embeddings of the top layer LSTM.  Two representations of the word "York"</p><p>Step 3: Use both word embeddings and LM embeddings in the sequence tagging model. New York is located … <ref type="figure">Figure 1</ref>:</p><p>The main components in TagLM, our language-model-augmented sequence tagging system. The language model component (in orange) is used to augment the input token representation in a traditional sequence tagging models (in grey).</p><p>The second RNN layer is similar and uses h k,1 to output h k,2 . In this paper, we use L = 2 layers of RNNs in all experiments and parameterize R i as either Gated Recurrent Units (GRU) ( <ref type="bibr" target="#b6">Cho et al., 2014)</ref> or Long Short-Term Memory units (LSTM) <ref type="bibr" target="#b14">(Hochreiter and Schmidhuber, 1997</ref>) depending on the task.</p><p>Finally, the output of the final RNN layer h k,L is used to predict a score for each possible tag using a single dense layer. Due to the dependencies between successive tags in our sequence labeling tasks (e.g. using the BIOES labeling scheme, it is not possible for I-PER to follow B-LOC), it is beneficial to model and decode each sentence jointly instead of independently predicting the label for each token. Accordingly, we add another layer with parameters for each label bigram, computing the sentence conditional random field (CRF) loss ( <ref type="bibr">Lafferty et al., 2001</ref>) using the forward-backward algorithm at training time, and using the Viterbi algorithm to find the most likely tag sequence at test time, similar to Collobert et al. Figure 2: Overview of TagLM, our language model augmented sequence tagging architecture. The top level embeddings from a pre-trained bidirectional LM are inserted in a stacked bidirectional RNN sequence tagging model. See text for details.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Bidirectional LM</head><p>A language model computes the probability of a token sequence (t 1 , t 2 , . . . , t N )</p><formula xml:id="formula_3">p(t 1 , t 2 , . . . , t N ) = N k=1 p(t k | t 1 , t 2 , . . . , t k−1 ).</formula><p>Recent state of the art neural language models <ref type="bibr">(Józefowicz et al., 2016</ref>) use a similar architecture to our baseline sequence tagger where they pass a token representation (either from a CNN over characters or as token embeddings) through multiple layers of LSTMs to embed the history</p><formula xml:id="formula_4">(t 1 , t 2 , . . . , t k ) into a fixed dimensional vector − → h LM k</formula><p>. This is the forward LM embedding of the token at position k and is the output of the top LSTM layer in the language model. Finally, the language model predicts the probability of token t k+1 using a softmax layer over words in the vocabulary.</p><p>The need to capture future context in the LM embeddings suggests it is beneficial to also consider a backward LM in additional to the traditional forward LM. A backward LM predicts the previous token given the future context. Given a sentence with N tokens, it computes</p><formula xml:id="formula_5">p(t 1 , t 2 , . . . , t N ) = N k=1 p(t k | t k+1 , t k+2 , . . . , t N ).</formula><p>A backward LM can be implemented in an analogous way to a forward LM and produces the backward LM embedding ← − h LM k , for the sequence (t k , t k+1 , . . . , t N ), the output embeddings of the top layer LSTM.</p><p>In our final system, after pre-training the forward and backward LMs separately, we remove the top layer softmax and concatenate the forward and backward LM embeddings to form bidirectional LM embeddings, i.e.,</p><formula xml:id="formula_6">h LM k = [ − → h LM k ; ← − h LM k ].</formula><p>Note that in our formulation, the forward and backward LMs are independent, without any shared parameters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Combining LM with sequence model</head><p>Our combined system, TagLM, uses the LM embeddings as additional inputs to the sequence tagging model. In particular, we concatenate the LM embeddings h LM with the output from one of the bidirectional RNN layers in the sequence model. In our experiments, we found that introducing the LM embeddings at the output of the first layer performed the best. More formally, we simply replace (2) with</p><formula xml:id="formula_7">h k,1 = [ − → h k,1 ; ← − h k,1 ; h LM k ].<label>(3)</label></formula><p>There are alternate possibilities for adding the LM embeddings to the sequence model. One possibility adds a non-linear mapping after the concatenation and before the second RNN (e.g. replacing (3) with</p><formula xml:id="formula_8">f ([ − → h k,1 ; ← − h k,1 ; h LM k ])</formula><p>where f is a non-linear function). Another possibility introduces an attention-like mechanism that weights the all LM embeddings in a sentence before including them in the sequence model. Our initial results with the simple concatenation were encouraging so we did not explore these alternatives in this study, preferring to leave them for future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Experiments</head><p>We evaluate our approach on two well benchmarked sequence tagging tasks, the CoNLL 2003 NER task <ref type="bibr">(Sang and Meulder, 2003</ref>) and the <ref type="bibr">CoNLL 2000 Chunking task (Sang and</ref><ref type="bibr">Buch- holz, 2000</ref>). We report the official evaluation metric (micro-averaged F 1 ). In both cases, we use the BIOES labeling scheme for the output tags, following previous work which showed it outperforms other options (e.g., <ref type="bibr">Ratinov and Roth, 2009</ref>  <ref type="bibr">(Yang et al., 2017;</ref><ref type="bibr" target="#b5">Chiu and Nichols, 2016)</ref> we trained on both the train and development sets after tuning hyperparameters on the development set.</p><p>The hyperparameters for our baseline model are similar to <ref type="bibr">Yang et al. (2017)</ref>. We use two bidirectional GRUs with 80 hidden units and 25 dimensional character embeddings for the token character encoder. The sequence layer uses two bidirectional GRUs with 300 hidden units each. For regularization, we add 25% dropout to the input of each GRU, but not to the recurrent connections.</p><p>CoNLL 2000 chunking. The CoNLL 2000 chunking task uses sections 15-18 from the Wall Street Journal corpus for training and section 20 for testing. It defines 11 syntactic chunk types (e.g., NP, VP, ADJP) in addition to other. We randomly sampled 1000 sentences from the training set as a held-out development set.</p><p>The baseline sequence tagger uses 30 dimensional character embeddings and a CNN with 30 filters of width 3 characters followed by a tanh non-linearity for the token character encoder. The sequence layer uses two bidirectional LSTMs with 200 hidden units. Following <ref type="bibr">Ma and Hovy (2016)</ref> we added 50% dropout to the character embeddings, the input to each LSTM layer (but not recurrent connections) and to the output of the final LSTM layer.</p><p>Pre-trained language models. The primary bidirectional LMs we used in this study were trained on the 1B Word Benchmark ( <ref type="bibr" target="#b4">Chelba et al., 2014</ref>), a publicly available benchmark for largescale language modeling. The training split has approximately 800 million tokens, about a 4000X increase over the number training tokens in the CoNLL datasets. <ref type="bibr">Józefowicz et al. (2016)</ref> explored several model architectures and released their best single model and training recipes. Following <ref type="bibr">Sak et al. (2014)</ref>, they used linear projection layers at the output of each LSTM layer to reduce the computation time but still maintain a large LSTM state. Their single best model took three weeks to train on 32 GPUs and achieved 30.0 test perplexity. It uses a character CNN with 4096 filters for input, followed by two stacked LSTMs, each with 8192 hidden units and a 1024 dimensional projection layer. We use CNN-BIG-LSTM to refer to this language model in our results.</p><p>In addition to CNN-BIG-LSTM from <ref type="bibr">Józefowicz et al. (2016)</ref>, <ref type="bibr">1</ref> we used the same corpus to train two additional language models with fewer parameters: forward LSTM-2048-512 and backward LSTM-2048-512. Both language models use token embeddings as input to a single layer LSTM with 2048 units and a 512 dimension projection layer. We closely followed the procedure outlined in <ref type="bibr">Józefowicz et al. (2016)</ref>, except we used synchronous parameter updates across four GPUs instead of asynchronous updates across 32 GPUs and ended training after 10 epochs. The test set perplexities for our forward and backward LSTM-2048-512 language models are 47.7 and 47.3, respectively. <ref type="bibr">2</ref> Model F 1 ± std Chiu and Nichols (2016) 90.91 ± 0.20 <ref type="bibr">Lample et al. (2016)</ref> 90.94 <ref type="bibr">Ma and Hovy (2016)</ref> 91.37 Our baseline without LM 90.87 ± 0.13 TagLM 91.93 ± 0.19  Training. All experiments use the Adam optimizer ( <ref type="bibr" target="#b18">Kingma and Ba, 2015</ref>) with gradient norms clipped at 5.0. In all experiments, we fine tune the pre-trained Senna word embeddings but fix all weights in the pre-trained language models. In addition to explicit dropout regularization, we also use early stopping to prevent over-fitting and use the following process to determine when to stop training. We first train with a constant learning rate α = 0.001 on the training data and monitor the development set performance at each epoch. Then, at the epoch with the highest development performance, we start a simple learning rate annealing schedule: decrease α an order of magnitude (i.e., divide by ten), train for five epochs, decrease α an order of magnitude again, train for five more epochs and stop. Following <ref type="bibr" target="#b5">Chiu and Nichols (2016)</ref>, we train each final model configuration ten times with different random seeds and report the mean and standard deviation F 1 . It is important to estimate the variance of model performance since the test data sets are relatively small. <ref type="table" target="#tab_3">Tables 1 and 2</ref> compare results from TagLM with previously published state of the art results without additional labeled data or task specific gazetteers. <ref type="table" target="#tab_6">Tables 3 and 4</ref> compare results of TagLM to other systems that include additional labeled data or gazetteers. In both tasks, TagLM establishes a new state of the art using bidirectional LMs (the forward CNN-BIG-LSTM and the backward LSTM-2048-512).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Overall system results</head><p>In the CoNLL 2003 NER task, our model scores 91.93 mean F 1 , which is a statistically significant increase over the previous best result of 91.62 ±0.33 from <ref type="bibr" target="#b5">Chiu and Nichols (2016)</ref> that used gazetteers (at 95%, two-sided Welch t-test, p = 0.021).</p><p>In the CoNLL 2000 Chunking task, TagLM achieves 96.37 mean F 1 , exceeding all previously published results without additional labeled data by more then 1% absolute F 1 . The improvement over the previous best result of 95.77 in <ref type="bibr" target="#b12">Hashimoto et al. (2016)</ref> that jointly trains with Penn Treebank (PTB) POS tags is statistically significant at 95% (p &lt; 0.001 assuming standard deviation of 0.1).</p><p>Importantly, the LM embeddings amounts to an average absolute improvement of 1.06 and 1.37 F 1 in the NER and Chunking tasks, respectively.</p><p>Adding external resources. Although we do not use external labeled data or gazetteers, we found that TagLM outperforms previous state of the art results in both tasks when external resources (labeled data or task specific gazetteers) are available. Furthermore, <ref type="table" target="#tab_6">Tables 3 and 4</ref> show that, in most cases, the improvements we obtain by adding LM embeddings are larger then the improvements previously obtained by adding other forms of transfer or joint learning. For example, <ref type="bibr">Yang et al. (2017)</ref> noted an improvement of only 0.06 F 1 in the NER task when transfer learning from both CoNLL 2000 chunks and PTB POS tags and <ref type="bibr" target="#b5">Chiu and Nichols (2016)</ref> reported an increase of 0.71 F 1 when adding gazetteers to their baseline. In the Chunking task, previous work has reported from 0.28 to 0.75 improvement in F 1 when including supervised labels from the PTB POS tags or <ref type="bibr">CoNLL 2003</ref><ref type="bibr">entities (Yang et al., 2017</ref><ref type="bibr">Søgaard and Goldberg, 2016;</ref><ref type="bibr" target="#b12">Hashimoto et al., 2016</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Analysis</head><p>To elucidate the characteristics of our LM augmented sequence tagger, we ran a number of additional experiments on the CoNLL 2003 NER task.</p><p>How to use LM embeddings? In this experiment, we concatenate the LM embeddings at dif-    Use LM embeddings at F 1 ± std input to the first RNN layer 91.55 ± 0.21 output of the first RNN layer 91.93 ± 0.19 output of the second RNN layer 91.72 ± 0.13 ferent locations in the baseline sequence tagger. In particular, we used the LM embeddings h LM k to:</p><p>• augment the input of the first RNN layer; i.e.,</p><formula xml:id="formula_9">x k = [c k ; w k ; h LM k ],</formula><p>• augment the output of the first RNN layer; i.e.,</p><formula xml:id="formula_10">h k,1 = [ − → h k,1 ; ← − h k,1 ; h LM k ], 3 and</formula><p>• augment the output of the second RNN layer; i.e., <ref type="table" target="#tab_8">Table 5</ref> shows that the second alternative performs best. We speculate that the second RNN layer in the sequence tagging model is able to capture interactions between task specific context as expressed in the first RNN layer and general context as expressed in the LM embeddings in a way that improves overall system performance. These results are consistent with <ref type="bibr">Søgaard and Goldberg (2016)</ref> who found that chunking performance was sensitive to the level at which additional POS supervision was added.</p><formula xml:id="formula_11">h k,2 = [ − → h k,2 ; ← − h k,2 ; h LM k ].</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Does it matter which language model to use?</head><p>In this experiment, we compare six different configurations of the forward and backward language models (including the baseline model which does not use any language models). The results are reported in <ref type="table" target="#tab_9">Table 6</ref>.</p><p>We find that adding backward LM embeddings consistently outperforms forward-only LM embeddings, with F 1 improvements between 0.22 and 0.27%, even with the relatively small backward LSTM-2048-512 LM.</p><p>LM size is important, and replacing the forward LSTM-2048-512 with CNN-BIG-LSTM (test perplexities of 47.7 to 30.0 on 1B Word Benchmark) improves F 1 by 0.26 -0.31%, about as much as adding backward LM. Accordingly, we hypothesize (but have not tested) that replacing the backward LSTM-2048-512 with a backward LM analogous to the CNN-BIG-LSTM would further improve performance.</p><p>To highlight the importance of including language models trained on a large scale data, we also experimented with training a language model on just the CoNLL 2003 training and development data. Due to the much smaller size of this data Forward language model Backward language model LM perplexity F 1 ± std Fwd Bwd --N/A N/A 90.87 ± 0.13 LSTM-512-256 * LSTM-512-256 * 106.9 104.2 90.79 ± 0.15 LSTM-2048-512 -47.7 N/A 91.40 ± 0.18 LSTM-2048-512 LSTM-2048-512 47.7 47.3 91.62 ± 0.23 CNN-BIG-LSTM -30.0 N/A 91.66 ± 0.13 CNN-BIG-LSTM LSTM-2048-512 30.0 47.3 91.93 ± 0.19 set, we decreased the model size to 512 hidden units with a 256 dimension projection and normalized tokens in the same manner as input to the sequence tagging model (lower-cased, with all digits replaced with 0). The test set perplexities for the forward and backward models (measured on the CoNLL 2003 test data) were 106.9 and 104.2, respectively. Including embeddings from these language models decreased performance slightly compared to the baseline system without any LM. This result supports the hypothesis that adding language models help because they learn composition functions (i.e., the RNN parameters in the language model) from much larger data compared to the composition functions in the baseline tagger, which are only learned from labeled data.</p><p>Importance of task specific RNN. To understand the importance of including a task specific sequence RNN we ran an experiment that removed the task specific sequence RNN and used only the LM embeddings with a dense layer and CRF to predict output tags. In this setup, performance was very low, 88.17 F 1 , well below our baseline. This result confirms that the RNNs in the baseline tagger encode essential information which is not encoded in the LM embeddings. This is unsurprising since the RNNs in the baseline tagger are trained on labeled examples, unlike the RNN in the language model which is only trained on unlabeled examples. Note that the LM weights are fixed in this experiment.</p><p>Dataset size. A priori, we expect the addition of LM embeddings to be most beneficial in cases where the task specific annotated datasets are small. To test this hypothesis, we replicated the setup from <ref type="bibr">Yang et al. (2017)</ref>   <ref type="formula" target="#formula_0">(2017)</ref> are 3.97% for cross-lingual transfer from CoNLL 2002 Spanish NER and 6.28% F 1 for transfer from PTB POS tags. However, they found only a 0.06% F 1 increase when using the full training data and transferring from both CoNLL 2000 chunks and PTB POS tags. Taken together, this suggests that for very small labeled training sets, transferring from other tasks yields a large improvement, but this improvement almost disappears when the training data is large. On the other hand, our approach is less dependent on the training set size and significantly improves performance even with larger training sets.</p><p>Number of parameters. Our TagLM formulation increases the number of parameters in the second RNN layer R 2 due to the increase in the input dimension h 1 if all other hyperparameters are held constant. To confirm that this did not have a material impact on the results, we ran two additional experiments. In the first, we trained a system without a LM but increased the second RNN layer hidden dimension so that number of parameters was the same as in TagLM. In this case, performance decreased slightly (by 0.15% F 1 ) compared to the baseline model, indicating that solely increasing parameters does not improve performance. In the second experiment, we decreased the hidden dimension of the second RNN layer in TagLM to give it the same number of parameters as the baseline no LM model. In this case, test F 1 increased slightly to 92.00 ± 0.11 indicating that the additional parameters in TagLM are slightly hurting performance. 4</p><p>Does the LM transfer across domains? One artifact of our evaluation framework is that both the labeled data in the chunking and NER tasks and the unlabeled text in the 1 Billion Word Benchmark used to train the bidirectional LMs are derived from news articles. To test the sensitivity to the LM training domain, we also applied TagLM with a LM trained on news articles to the SemEval 2017 Shared Task 10, ScienceIE. 5 ScienceIE requires end-to-end joint entity and relationship extraction from scientific publications across three diverse fields (computer science, material sciences, and physics) and defines three broad entity types (Task, Material and Process). For this task, TagLM increased F 1 on the development set by 4.12% (from 49.93 to to 54.05%) for entity extraction over our baseline without LM embeddings and it was a major component in our winning submission to ScienceIE, Scenario 1 ( <ref type="bibr" target="#b0">Ammar et al., 2017)</ref>. We conclude that LM embeddings can improve the performance of a sequence tagger even when the data comes from a different domain.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Related work</head><p>Unlabeled data. TagLM was inspired by the widespread use of pre-trained word embeddings in supervised sequence tagging models. Besides pre-trained word embeddings, our method is most closely related to <ref type="bibr">Li and McCallum (2005)</ref>. Instead of using a LM, <ref type="bibr">Li and McCallum (2005)</ref> uses a probabilistic generative model to infer contextsensitive latent variables for each token, which are then used as extra features in a supervised CRF tagger ( <ref type="bibr">Lafferty et al., 2001</ref>). Other semisupervised learning methods for structured prediction problems include co-training <ref type="bibr" target="#b3">(Blum and Mitchell, 1998;</ref><ref type="bibr">Pierce and Cardie, 2001</ref>), expectation maximization ( <ref type="bibr">Nigam et al., 2000;</ref><ref type="bibr">Mohit and Hwa, 2005</ref>), structural learning (Ando and <ref type="bibr" target="#b1">Zhang, 2005</ref>) and maximum discriminant functions ( <ref type="bibr">Suzuki et al., 2007;</ref><ref type="bibr">Suzuki and Isozaki, 2008)</ref>. It is easy to combine TagLM with any of the above methods by including LM embeddings as additional features in the discriminative components of the model (except for expectation maximization). A detailed discussion of semisupervised learning methods in NLP can be found in <ref type="bibr">(Søgaard, 2013)</ref>. <ref type="bibr">Melamud et al. (2016)</ref> learned a context encoder from unlabeled data with an objective function similar to a bi-directional LM and applied it to several NLP tasks closely related to the unlabeled objective function: sentence completion, lexical substitution and word sense disambiguation.</p><p>LM embeddings are related to a class of methods (e.g., <ref type="bibr">Le and Mikolov, 2014;</ref><ref type="bibr">Kiros et al., 2015;</ref><ref type="bibr" target="#b13">Hill et al., 2016</ref>) for learning sentence and document encoders from unlabeled data, which can be used for text classification and textual entailment among other tasks. <ref type="bibr" target="#b9">Dai and Le (2015)</ref> pre-trained LSTMs using language models and sequence autoencoders then fine tuned the weights for classification tasks. In contrast to our method that uses unlabeled data to learn token-in-context embeddings, all of these methods use unlabeled data to learn an encoder for an entire text sequence (sentence or document).</p><p>Neural language models. LMs have always been a critical component in statistical machine translation systems <ref type="bibr" target="#b20">(Koehn, 2009)</ref>. Recently, neural LMs ( <ref type="bibr" target="#b2">Bengio et al., 2003;</ref><ref type="bibr">Mikolov et al., 2010)</ref> have also been integrated in neural machine translation systems (e.g., <ref type="bibr" target="#b16">Kalchbrenner and Blunsom, 2013;</ref><ref type="bibr" target="#b10">Devlin et al., 2014</ref>) to score candidate translations. In contrast, TagLM uses neural LMs to encode words in the input sequence.</p><p>Unlike forward LMs, bidirectional LMs have received little prior attention. Most similar to our formulation, <ref type="bibr">Peris and Casacuberta (2015)</ref> used a bidirectional neural LM in a statistical machine translation system for instance selection. They tied the input token embeddings and softmax weights in the forward and backward directions, unlike our approach which uses two distinct models without any shared parameters. <ref type="bibr" target="#b11">Frinken et al. (2012)</ref> also used a bidirectional n-gram LM for handwriting recognition.</p><p>Interpreting RNN states. Recently, there has been some interest in interpreting the activations of RNNs. <ref type="bibr">Linzen et al. (2016)</ref> showed that single LSTM units can learn to predict singular-plural distinctions. <ref type="bibr" target="#b17">Karpathy et al. (2015)</ref> visualized character level LSTM states and showed that individual cells capture long-range dependencies such as line lengths, quotes and brackets. Our work complements these studies by showing that LM states are useful for downstream tasks as a way of interpreting what they learn.</p><p>Other sequence tagging models. Current state of the art results in sequence tagging problems are based on bidirectional RNN models. However, many other sequence tagging models have been proposed in the literature for this class of problems (e.g., <ref type="bibr">Lafferty et al., 2001;</ref><ref type="bibr" target="#b7">Collins, 2002</ref>). LM embeddings could also be used as additional features in other models, although it is not clear whether the model complexity would be sufficient to effectively make use of them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>In this paper, we proposed a simple and general semi-supervised method using pre-trained neural language models to augment token representations in sequence tagging models. Our method significantly outperforms current state of the art models in two popular datasets for NER and Chunking. Our analysis shows that adding a backward LM in addition to traditional forward LMs consistently improves performance. The proposed method is robust even when the LM is trained on unlabeled data from a different domain, or when the baseline model is trained on a large number of labeled examples.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>The need to capture future context in the LM embeddings suggests itis beneficial to also consider a \textit{backward} LM in additionalto the traditional \textit{forward} LM. A backward LM predicts the previous token given the future context. Given a sentence with $N$ tokens, it computes\[P(t _ { k -1} | t_k, t_{k+1}, ..., t_N). \]A ba ck w a r d LM ca n be implemThe need to capture future context in the LM embeddings suggests itis beneficial to also consider a \textit{backward} LM in additionalto the traditional \textit{forward} LM . A ba ck w a r d LM pr edi ct s t he pr ev i ous t ok en g i v en t he fut ur e context. Given a sentence with $N$ tokens, it computes\[P(t _ { k -1} | t_k, t_{k+1}, ..., t_N). \]A ba ck w a r d LM ca n be i mpl e me nt e d i n a n analogous way to a forward LM and produces an embedding $\ov erleftarrow{\ma t hbf{h}}^{LM}_k$, for the sequence $(t_k, t_{k+1}, ..., t_N)$, the output embeddings of the top lay er LSTM. The need to capture future context in the LM embeddings suggests itis beneficial to also consider a \textit{backward} LM in additionalto the traditional \textit{forward} LM. A backward LM predicts the previous token given the future context. Given a sentence with $N$ tokens, it computes\[P(t _ { k -1} | t_k, t_{k+1}, ..., t_N). \]A ba ck w a r d LM ca n be i mpl ement ed i n a n a na l og ous w a y t o a for w a r d LM a nd produces an embedding $\ov erleftarrow{\ma t hbf{h}}^{LM}_k$, for the sequence $(t_k, t_{k+1}, ..., t_N)$, the output embeddings of the top layer LS T M .ent ed in an analogous way to a forward LM and produces an embedding $\ov erleftarrow{\ma t hbf{h}}^{LM}_k$, for the sequence $(t_k, t_{k+1}, ..., t_N)$, the output embeddings of the top layer LSTM. The need to capture future context in the LM embeddings suggests itis beneficial to also consider a \textit{backward} LM in additionalto the traditional \textit{forward} LM. A backward LM predicts the previous token given the future context. Given a sentence with $N$ tokens, it computes\[P(t _ { k -1} | t_k, t_{k+1}, ..., t_N). \]A ba ck w a r d LM ca n be implemThe need to capture future context in the LM embeddings suggests itis beneficial to also consider a \textit{backward} LM in additionalto the traditional \textit{forward} LM . A ba ck w a r d LM pr edi ct s t he pr ev i ous t ok en g i v en t he fut ur e context. Given a sentence with $N$ tokens, it computes\[P(t _ { k -1} | t_k, t_{k+1}, ..., t_N). \]A ba ck w a r d LM ca n be i mpl e me nt e d i n a n analogous way to a forward LM and produces an embedding $\ov erleftarrow{\ma t hbf{h}}^{LM}_k$, for the sequence $(t_k, t_{k+1}, ..., t_N)$, the output embeddings of the top lay er LSTM. The need to capture future context in the LM embeddings suggests itis beneficial to also consider a \textit{backward} LM in additionalto the traditional \textit{forward} LM. A backward LM predicts the previous token given the future context. Given a sentence with $N$ tokens, it computes\[P(t _ { k -1} | t_k, t_{k+1}, ..., t_N). \]A ba ck w a r d LM ca n be i mpl ement ed i n a n a na l og ous w a y t o a for w a r d LM a nd produces an embedding $\ov erleftarrow{\ma t hbf{h}}^{LM}_k$, for the sequence $(t_k, t_{k+1}, ..., t_N)$, the output embeddings of the top layer LS T M .ent ed in an analogous way to a forward LM and produces an embedding $\ov erleftarrow{\ma t hbf{h}}^{LM}_k$, for the sequence $(t_k, t_{k+1}, ..., t_N)$, the output embeddings of the top layer LSTM. The need to capture future context in the LM embeddings suggests itis beneficial to also consider a \textit{backward} LM in additionalto the traditional \textit{forward} LM. A backward LM predicts the previous token given the future context. Given a sentence with $N$ tokens, it computes\[P(t _ { k -1} | t_k, t_{k+1}, ..., t_N). \]A ba ck w a r d LM ca n be implemThe need to capture future context in the LM embeddings suggests itis beneficial to also consider a \textit{backward} LM in additionalto the traditional \textit{forward} LM . A ba ck w a r d LM pr edi ct s t he pr ev i ous t ok en g i v en t he fut ur e context. Given a sentence with $N$ tokens, it computes\[P(t _ { k -1} | t_k, t_{k+1}, ..., t_N). \]A ba ck w a r d LM ca n be i mpl e me nt e d i n a n analogous way to a forward LM and produces an embedding $\ov erleftarrow{\ma t hbf{h}}^{LM}_k$, for the sequence $(t_k, t_{k+1}, ..., t_N)$, the output embeddings of the top lay er LSTM. The need to capture future context in the LM embeddings suggests itis beneficial to also consider a \textit{backward} LM in additionalto the traditional \textit{forward} LM. A backward LM predicts the previous token given the future context. Given a sentence with $N$ tokens, it computes\[P(t _ { k -1} | t_k, t_{k+1}, ..., t_N). \]A ba ck w a r d LM ca n be i mpl ement ed i n a n a na l og ous w a y t o a for w a r d LM a nd produces an embedding $\ov erleftarrow{\ma t hbf{h}}^{LM}_k$, for the sequence $(t_k, t_{k+1}, ..., t_N)$, the output embeddings of the top layer LS T M .ent ed in an analogous way to a forward LM and produces an embedding $\ov erleftarrow{\ma t hbf{h}}^{LM}_k$, for the sequence $(t_k, t_{k+1}, ..., t_N)$, the output embeddings of the top layer LSTM.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>F</head><label></label><figDesc></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>unlabeled data</head><label>unlabeled</label><figDesc></figDesc><table>Recurrent 
language 
model 

Word 
embedding 
model 

Step 1: Pretrain word 
embeddings and 
language model. 

New    York is     located   … 

Sequence tagging model 

B-LOC   E-LOC     O         O       … 

input 
sequence 

output 
sequence 

Word 
embedding 
LM 
embedding 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>.</head><label></label><figDesc></figDesc><table>New 

York 
is 
located 
... 

Neural net 

Char 
CNN/ 
RNN 

Embedding 

Token 
embedding 

RNN 

Dense 

E-LOC 
B-LOC 

CRF 

bi-RNN 
(R 2 ) 

Token 
representation 

New York is located ... 

Forward LM 

Backward LM 

h 1 

LM 

Concat LM 
embedding 

Sequence 
tagging 
Pre-trained bi-LM 

bi-RNN (R 1 ) 

Sequence 
representation 

Concatenation 

Token 
representation 

New York is located ... 

Token 
representation 

h 1,1 
h 2 

LM 

h 2,1 

h 1,2 
h 2,2 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head></head><label></label><figDesc>). Following Chiu and Nichols (2016), we use the Senna word embeddings (Collobert et al., 2011) and pre-processed the text by lowercasing all tokens and replacing all digits with 0.</figDesc><table>CoNLL 2003 NER. The CoNLL 2003 NER 
task consists of newswire from the Reuters RCV1 
corpus tagged with four different entity types 
(PER, LOC, ORG, MISC). It includes standard 
train, development and test sets. Following pre-
vious work </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>Test set F 1 comparison on CoNLL 2003 
NER task, using only CoNLL 2003 data and unla-
beled text. 

Model 
F 1 ± std 
Yang et al. (2017) 
94.66 
Hashimoto et al. (2016) 
95.02 
Søgaard and Goldberg (2016) 95.28 
Our baseline without LM 
95.00 ± 0.08 
TagLM 
96.37 ± 0.05 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 2 :</head><label>2</label><figDesc>Test set F 1 comparison on CoNLL 2000 Chunking task using only CoNLL 2000 data and unlabeled text.</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>Table 3 :</head><label>3</label><figDesc></figDesc><table>Improvements in test set F 1 in CoNLL 2003 NER when including additional labeled data or 
task specific gazetteers (except the case of TagLM where we do not use additional labeled resources). 

F 1 
F 1 
Model 
External resources 
Without With 
∆ 
Yang et al. (2017) 
transfer from CoNLL 2003/PTB-POS 
94.66 
95.41 +0.75 
Hashimoto et al. (2016) 
jointly trained with PTB-POS 
95.02 
95.77 +0.75 
Søgaard and Goldberg (2016) jointly trained with PTB-POS 
95.28 
95.56 +0.28 
Ours 
no LM vs TagLM unlabeled data only 
95.00 
96.37 +1.37 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>Table 4 :</head><label>4</label><figDesc></figDesc><table>Improvements in test set F 1 in CoNLL 2000 Chunking when including additional labeled data 
(except the case of TagLM where we do not use additional labeled data). 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8" validated="false"><head>Table 5 :</head><label>5</label><figDesc></figDesc><table>Comparison of CoNLL-2003 test set F 1 
when the LM embeddings are included at different 
layers in the baseline tagger. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9" validated="false"><head>Table 6 :</head><label>6</label><figDesc></figDesc><table>Comparison of CoNLL-2003 test set F 1 for different language model combinations. All 
language models were trained and evaluated on the 1B Word Benchmark, except LSTM-512-256  *  
which was trained and evaluated on the standard splits of the NER CoNLL 2003 dataset. 

</table></figure>

			<note place="foot" n="1"> https://github.com/tensorflow/models/ tree/master/lm_1b 2 Due to different implementations, the perplexity of the forward LM with similar configurations in Józefowicz et al. (2016) is different (45.0 vs. 47.7).</note>

			<note place="foot" n="3"> This configuration the same as Eq. 3 in §2.4. It was reproduced here for convenience.</note>

			<note place="foot" n="4"> A similar experiment for the Chunking task did not improve F1 so this conclusion is task dependent. 5 https://scienceie.github.io/</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank Chris Dyer, Julia Hockenmaier, Jayant Krishnamurthy, Matt Gardner and Oren Etzioni for comments on earlier drafts that led to substantial improvements in the final version.</p></div>
			</div>

			<div type="annex">
			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">The AI2 system at SemEval-2017 Task 10 (ScienceIE): semisupervised end-to-end entity and relation extraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Waleed</forename><surname>Ammar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><forename type="middle">E</forename><surname>Peters</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chandra</forename><surname>Bhagavatula</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Russell</forename><surname>Power</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACL workshop (SemEval)</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A highperformance semi-supervised learning method for text chunking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kubota</forename><surname>Rie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tong</forename><surname>Ando</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACL</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A neural probabilistic language model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Réjean</forename><surname>Ducharme</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pascal</forename><surname>Vincent</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Jauvin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">JMLR</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Combining labeled and unlabeled data with co-training</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Avrim</forename><surname>Blum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Mitchell</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<pubPlace>In COLT</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">One billion word benchmark for measuring progress in statistical language modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ciprian</forename><surname>Chelba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tomas</forename><surname>Mikolov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mike</forename><surname>Schuster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qi</forename><surname>Ge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thorsten</forename><surname>Brants</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Phillipp</forename><surname>Koehn</surname></persName>
		</author>
		<idno>CoRR abs/1312.3005</idno>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Named entity recognition with bidirectional LSTM-CNNs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><surname>Chiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Nichols</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
	<note>In TACL</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">On the properties of neural machine translation: Encoder-decoder approaches</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kyunghyun</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bart</forename><surname>Van Merrienboer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dzmitry</forename><surname>Bahdanau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SSST@EMNLP</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Discriminative training methods for hidden markov models: Theory and experiments with perceptron algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Collins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EMNLP</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Natural language processing (almost) from scratch</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ronan</forename><surname>Collobert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><surname>Weston</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Léon</forename><surname>Bottou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Karlen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koray</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pavel</forename><forename type="middle">P</forename><surname>Kuksa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">JMLR</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Semisupervised sequence learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Andrew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Dai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Quoc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Le</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Fast and robust neural network joint models for statistical machine translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacob</forename><surname>Devlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rabih</forename><surname>Zbib</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhongqiang</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Lamar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><forename type="middle">M</forename><surname>Schwartz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Makhoul</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACL</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Bidirectional language model for handwriting recognition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alicia</forename><surname>Volkmar Frinken</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Josep</forename><surname>Fornés</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean-Marc</forename><surname>Lladós</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ogier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Joint IAPR International Workshops on Statistical Techniques in Pattern Recognition (SPR) and Structural and Syntactic Pattern Recognition (SSPR)</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">A joint many-task model: Growing a neural network for multiple nlp tasks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kazuma</forename><surname>Hashimoto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Caiming</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoshimasa</forename><surname>Tsuruoka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><surname>Socher</surname></persName>
		</author>
		<idno>CoRR abs/1611.01587</idno>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Learning distributed representations of sentences from unlabelled data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Felix</forename><surname>Hill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kyunghyun</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anna</forename><surname>Korhonen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">HLT-NAACL</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Long short-term memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sepp</forename><surname>Hochreiter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jürgen</forename><surname>Schmidhuber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neural Computation</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Exploring the limits of language modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rafal</forename><surname>Józefowicz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oriol</forename><surname>Vinyals</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mike</forename><surname>Schuster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Noam</forename><surname>Shazeer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yonghui</forename><surname>Wu</surname></persName>
		</author>
		<idno>CoRR abs/1602.02410</idno>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Recurrent continuous translation models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nal</forename><surname>Kalchbrenner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Phil</forename><surname>Blunsom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EMNLP</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Visualizing and understanding recurrent networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrej</forename><surname>Karpathy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Justin</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Li</forename><surname>Fei-Fei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICLR workshop</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Adam: A method for stochastic optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Diederik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jimmy</forename><surname>Kingma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ba</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICLR</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Antonio Torralba, and Sanja Fidler. 2015. Skip-thought vectors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jamie</forename><surname>Ryan Kiros</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yukun</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruslan</forename><surname>Salakhutdinov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><forename type="middle">S</forename><surname>Zemel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raquel</forename><surname>Urtasun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Statistical machine translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philipp</forename><surname>Koehn</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
