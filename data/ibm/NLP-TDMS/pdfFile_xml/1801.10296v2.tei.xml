<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /nfs/home/kabenamualus/Research/task-dataset-metric-extraction/../grobid-0.6.0/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Reinforced Self-Attention Network: a Hybrid of Hard and Soft Attention for Sequence Modeling</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tao</forename><surname>Shen</surname></persName>
							<email>tao.shen@student.uts.edu.au</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Centre for Artificial Intelligence</orgName>
								<orgName type="department" key="dep2">School of Software</orgName>
								<orgName type="institution">University of Technology Sydney</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tianyi</forename><surname>Zhou</surname></persName>
							<email>tianyizh@uw.edu</email>
							<affiliation key="aff1">
								<orgName type="department">Paul G. Allen School of Computer Science &amp; Engineering</orgName>
								<orgName type="institution">University of Washington</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guodong</forename><surname>Long</surname></persName>
							<email>guodong.long@uts.edu.au</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Centre for Artificial Intelligence</orgName>
								<orgName type="department" key="dep2">School of Software</orgName>
								<orgName type="institution">University of Technology Sydney</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jing</forename><surname>Jiang</surname></persName>
							<email>jing.jiang@uts.edu.au</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Centre for Artificial Intelligence</orgName>
								<orgName type="department" key="dep2">School of Software</orgName>
								<orgName type="institution">University of Technology Sydney</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sen</forename><surname>Wang</surname></persName>
							<email>sen.wang@griffith.edu.au</email>
							<affiliation key="aff2">
								<orgName type="department">School of Information and Communication Technology</orgName>
								<orgName type="institution">Griffith University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chengqi</forename><surname>Zhang</surname></persName>
							<email>chengqi.zhang@uts.edu.au</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Centre for Artificial Intelligence</orgName>
								<orgName type="department" key="dep2">School of Software</orgName>
								<orgName type="institution">University of Technology Sydney</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Reinforced Self-Attention Network: a Hybrid of Hard and Soft Attention for Sequence Modeling</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.6.0" ident="GROBID-SDO" when="2021-06-26T08:42+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid-sdo"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Many natural language processing tasks solely rely on sparse dependencies between a few tokens in a sentence. Soft attention mechanisms show promising performance in modeling local/global dependencies by soft probabilities between every two tokens, but they are not effective and efficient when applied to long sentences. By contrast, hard attention mechanisms directly select a subset of tokens but are difficult and inefficient to train due to their combinatorial nature. In this paper, we integrate both soft and hard attention into one context fusion model, "reinforced self-attention (ReSA)", for the mutual benefit of each other. In ReSA, a hard attention trims a sequence for a soft self-attention to process, while the soft attention feeds reward signals back to facilitate the training of the hard one. For this purpose, we develop a novel hard attention called "reinforced sequence sampling (RSS)", selecting tokens in parallel and trained via policy gradient. Using two RSS modules, ReSA efficiently extracts the sparse dependencies between each pair of selected tokens. We finally propose an RNN/CNN-free sentence-encoding model, "reinforced self-attention network (ReSAN)", solely based on ReSA. It achieves state-of-the-art performance on both Stanford Natural Language Inference (SNLI) and Sentences Involving Compositional Knowledge (SICK) datasets.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Equipping deep neural networks (DNN) with attention mechanisms provides an effective and parallelizable approach for context fusion and sequence compression. It achieves compelling time efficiency and state-of-the-art performance in a broad range of natural language processing (NLP) tasks, such as neural machine translation <ref type="bibr" target="#b0">[Bahdanau et al., 2015;</ref><ref type="bibr" target="#b7">Luong et al., 2015]</ref>, dialogue generation <ref type="bibr" target="#b7">[Shang et al., 2015]</ref>, machine reading/comprehension <ref type="bibr">[Seo et al., 2017]</ref>, natural language inference , sentiment classification <ref type="bibr" target="#b6">[Li et al., 2017b]</ref>, etc. Recently, some neural nets based solely on attention, especially self-attention, outperform traditional recurrent <ref type="bibr" target="#b1">[Bowman et al., 2015]</ref> or convolutional <ref type="bibr" target="#b4">[Dong et al., 2017]</ref> neural networks on NLP tasks, such as machine translation <ref type="bibr">[Vaswani et al., 2017]</ref> and sentence embedding <ref type="bibr" target="#b8">[Shen et al., 2018]</ref>, which further demonstrates the power of attention mechanisms in capturing contextual dependencies.</p><p>Soft and hard attention are the two main types of attention mechanisms. In soft attention <ref type="bibr" target="#b0">[Bahdanau et al., 2015]</ref>, a categorical distribution is calculated over a sequence of elements. The resulting probabilities reflect the importance of each element and are used as weights to produce a context-aware encoding that is the weighted sum of all elements. Hence, soft attention only requires a small number of parameters and less computation time. Moreover, soft attention mechanism is fully differentiable and thus can be easily trained by endto-end back-propagation when attached to any existing neural net. However, the softmax function usually assigns small but non-zero probabilities to trivial elements, which will weaken the attention given to the few truly significant elements.</p><p>Unlike the widely-studied soft attention, in hard attention <ref type="bibr" target="#b10">[Xu et al., 2015]</ref>, a subset of elements is selected from an input sequence. Hard attention mechanism forces a model to concentrate solely on the important elements, entirely discarding the others. In fact, various NLP tasks solely rely on very sparse tokens from a long text input. Hard attention is well suited to these tasks, because it overcomes the weaknesses associated with soft attention in long sequences. However, hard attention mechanism is time-inefficient with sequential sampling and non-differentiable by virtue of their combinatorial nature. Thus, it cannot be optimized through back-propagation and more typically rely on policy gradient, e.g., REINFORCE <ref type="bibr" target="#b10">[Williams, 1992]</ref>. As a result, training a hard attention model is usually an inefficient process -some even find convergence difficult -and combining them with other neural nets in an end-to-end manner is problematic.</p><p>However, soft and hard attention mechanisms might be integrated into a single model to benefit each other in overcoming their inherent disadvantages, and this notion motivates our study. Specifically, a hard attention mechanism is used to encode rich structural information about the contextual dependencies and trims a long sequence into a much shorter one for a soft attention mechanism to process. Conversely, the soft one is used to provide a stable environment and strong reward signals to help in training the hard one. Such method would improve both the prediction quality of the soft attention mechanism and the trainability of the hard attention mechanism, while boosting the ability to model contextual dependencies. To the best of our knowledge, the idea of combining hard and soft attention within a model has not yet been studied. Existing works focus on only one of the two types.</p><p>In this paper, we first propose a novel hard attention mechanism called "reinforced sequence sampling (RSS)", which selects tokens from an input sequence in parallel, and differs from existing ones in that it is highly parallelizable without any recurrent structure. We then develop a model,"reinforced self-attention (ReSA)", which naturally combines the RSS with a soft self-attention. In ReSA, two parameter-untied RSS are respectively applied to two copies of the input sequence, where the tokens from one and another are called dependent and head tokens, respectively. ReSA only models the sparse dependencies between the head and dependent tokens selected by the two RSS modules. Finally, we build an sentence-encoding model, "reinforced self-attention network (ReSAN)", based on ReSA without any CNN/RNN structure.</p><p>We test ReSAN on natural language inference and semantic relatedness tasks. The results show that ReSAN achieves the best test accuracy among all sentence-encoding models on the official leaderboard of the Stanford Natural Language Inference (SNLI) dataset, and state-of-the-art performance on the Sentences Involving Compositional Knowledge (SICK) dataset. Compared to the commonly-used models, ReSAN is more efficient and has better prediction quality than existing recurrent/convolutional neural networks, selfattention networks, and even well-designed models (e.g., semantic tree or external memory based models). All the experiments codes are released at https://github.com/ taoshen58/DiSAN/tree/master/ReSAN. Notation: 1) lowercase denotes a vector; 2) bold lowercase denotes a sequence of vectors (stored as a matrix); and 3) uppercase denotes a matrix or a tensor.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Attention</head><p>Given an input sequence x = [x 1 , . . . , x n ] ∈ R de×n (x i ∈ R de denotes the embedded vector of i-th element), and the vector representation of a query q, an vanilla attention mechanism uses a parameterized compatibility function f (x i , q) to computes an alignment score between q and each token x i as the attention of q to x i <ref type="bibr" target="#b0">[Bahdanau et al., 2015]</ref>. A softmax function is then applied to the alignment scores a ∈ R n over all tokens to generate a categorical distribution p(v|x, q), where v = i implies that token x i is selected according to its relevance to query q. This can be formally written as</p><formula xml:id="formula_0">a = [f (x i , q)] n i=1 ,</formula><p>(1) p(v|x, q) = softmax(a).</p><p>(2)</p><p>The output of attention, s, is the expectation of sampling a token according to the categorical distribution p(v|x, q), i.e.,</p><formula xml:id="formula_1">s = n i=1 p(v = i|x, q)x i = E i∼p(v|x,q) [x i ].<label>(3)</label></formula><p>Multi-dimensional (multi-dim) attention mechanism <ref type="bibr" target="#b8">[Shen et al., 2018]</ref> extends the vanilla one <ref type="bibr" target="#b0">[Bahdanau et al., 2015]</ref> to a feature-wise level, i.e., each feature of every token has an alignment score. Hence, rather than a scalar, the output of f (x i , q) is a vector with the same dimensions as the input, and the resulting alignment scores compose a matrix a ∈ R de×n . Such feature-level attention has been verified in terms of its ability to capture the subtle variances of different contexts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Self-Attention</head><p>Self-attention is a special case of attention where the query q stems from the input sequence itself. Hence, self-attention mechanism can model the dependencies between tokens from the same sequence. Recently, a variety of self-attention mechanisms have been developed, each serving a distinct purpose, but most can be roughly categorized into two types, token2token self-attention and source2token self-attention.</p><p>Token2token self-attention mechanisms aim to produce a context-aware representation for each token in light of its dependencies on other tokens in the same sequence. The query q is replaced with the token x j , and the dependency of x j on another token x i is computed by f (x i , x j ). There are two proposed self-attentions in this type, i.e., scaled dot-product attention which composes the multi-head attention <ref type="bibr">[Vaswani et al., 2017]</ref> and masked self-attention which leads to directional self-attention <ref type="bibr" target="#b8">[Shen et al., 2018]</ref>. Because the latter experimentally outperforms the former, we select the masked self-attention as our fundamental soft self-attention module.</p><p>Masked Self-Attention is more sophisticated than scaled dot-product attention in that, it uses multi-dim and multilayer perceptron with an additional position mask, rather than a scaled dot-product, as the compatibility function, i.e.,</p><formula xml:id="formula_2">f (x i , x j ) = c · tanh [W (1) x i + W (2) x j + b (1) ]/c + M ij , (4)</formula><p>where c is a scalar and M is the mask with each entry M ij ∈ {−∞, 0}. When M ij = −∞, applying the softmax function to a results in a zero probability, p(z = i|x, x j ) = 0, which switches off the attention of x j to x i . An asymmetric mask where M ij = M ji enforces directional attention between x i and x j , which can encode temporal order information. Two positional masks have been designed to encode the forward and backward temporal order, respectively, i.e.,</p><formula xml:id="formula_3">M f w ij = 0, i &lt; j −∞, otherwise M bw ij = 0, i &gt; j −∞, otherwise</formula><p>In forward and backward masks, M ii = −∞. Thus, the attention of a token to itself is blocked, so the output of masked self-attention mechanism comprises the features of the context around each token rather than context-aware features.</p><p>Directional self-attention uses a fusion gate to combine the embedding of each token with its context. Specifically, a fusion gate combines the input and output of a masked selfattention to produce context-aware representations. This idea is similar to the highway network <ref type="bibr" target="#b8">[Srivastava et al., 2015]</ref>.</p><p>Source2token self-attention mechanisms <ref type="bibr" target="#b8">[Shen et al., 2018]</ref> remove the query q from the compatibility function in Eq.(1) and directly compresses a sequence into a vector representation calculated from the dependency between each token x i and the entire input sequence x. Hence, this form of self-attention is highly data-and task-driven.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Proposed Models</head><p>This section begins by introducing a hard attention mechanism called RSS in Section 3.1, followed by integrating the RSS with a soft self-attention mechanism into a context fusion model called ReSA in Section 3.2. Finally, a model named ReSAN, based on ReSA, is designed for sentence encoding tasks in Section 3.3</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Reinforced Sequence Sampling (RSS)</head><p>The goal of hard attention mechanism is to select a subset of critical tokens that provides sufficient information to complete downstream tasks, so any further computations on the trivial tokens can be saved. In the following, we introduce a hard attention mechanism called RSS. Given an input sequence x = [x 1 , . . . , x n ], RSS generates an equal-length sequence of binary random variables z = [z 1 , . . . , z n ] where z i = 1 implies that x i is selected whereas z i = 0 indicates that x i is discarded. In RSS, the elements of z are sampled in parallel according to probabilities computed by a learned attention mechanism. This is more efficient than using MCMC with iterative sampling. The particular aim of RSS is to learn the following product distribution.</p><formula xml:id="formula_4">p(z|x; θ r ) = n i=1 p(z i |x; θ r ),<label>(5)</label></formula><p>where p(z i |x;</p><formula xml:id="formula_5">θ r ) = g(f (x; θ f ) i ; θ g ).</formula><p>The function f (·; θ f ) denotes a context fusion layer, e.g., Bi-LSTM, Bi-GRU, etc., producing context-aware representation for each x i . Then, g(·; θ g ) maps f (·; θ f ) to the probability of selecting the token. Note we can sample all z i for different i in parallel because the probability of z i (i.e., whether x i is selected) does not depends on z i−1 . This is because the context features given by f (·; θ f ) already take the sequential information into account, so the conditionally independent sampling does not discard any useful information.</p><p>To fully explore the high parallelizability of attention, we avoid using recurrent models in this paper. Instead we apply a more efficient f (·; θ f ) inspired by source2token self-attention and intra-attention </p><formula xml:id="formula_6">, i.e., f (x; θ f ) i = [x i ; pooling(x); x i pooling(x)],<label>(6)</label></formula><formula xml:id="formula_7">g(h i ; θ g ) = sigmoid(w T σ(W (R) h i + b (R) ) + b),<label>(7)</label></formula><p>where denotes the element-wise product, and the pooling(·) represents the mean-pooling operation along the sequential axis. RSS selects a subset of tokens by sampling z i according to the probability given by g(h i ; θ g ) for all i = 1, 2, . . . , n in parallel.</p><p>For the training of RSS, there are no ground truth labels to indicate whether or not a token should be selected, and the discrete random variables in z lead to a non-differentiable objective function. Therefore, we formulate learning the RSS parameter θ r as a reinforcement learning problem, and apply the policy gradient method. Further details on the model training are presented in Section 4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Reinforced Self-Attention (ReSA)</head><p>The fundamental idea behind this paper is that the hard and soft attention mechanisms can mutually benefit each other to overcome their inherent disadvantages via interaction within an integrated model. Based on this idea, we develop a novel self-attention termed ReSA. On the one hand, the proposed RSS provides a sparse mask to a self-attention module that only needs to model the dependencies for the selected token pairs. Hence, heavy memory loads and computations associated with soft self-attention can be effectively relieved. On the other hand, ReSA uses the output of the soft self-attention module for prediction, whose correctness (as compared to the ground truth) is used as reward signal to train the RSS. This alleviates the difficulty of training hard attention module. <ref type="figure" target="#fig_0">Figure 1</ref> shows the detailed architecture of ReSA. Given the token embedding in an input sequence, x = [x 1 , . . . , x n ], ReSA aims to produce token-wise context-aware representations, u = [u 1 , . . . , u n ]. Unlike previous self-attention mechanisms, ReSA only selects a subset of head tokens, and generates their context-aware representations by only relating each head token to a small subset of dependent tokens. This notion is based on the observation that for many NLP tasks, the final prediction only relies on a small set of key words and their contexts, and each key word only depends on a small set of other words. Namely, the dependencies between tokens from the same sequence are sparse.</p><p>In ReSA, we use two RSS modules, as outlined in Section 3.1, to generate two sequences of labels for the selections of head and dependent tokens, respectively, i.e.,</p><formula xml:id="formula_8">z h = [ẑ h 1 , . . . ,ẑ h n ] ∼ RSS(x; θ rh ),<label>(8)</label></formula><formula xml:id="formula_9">z d = [ẑ d 1 , . . . ,ẑ d n ] ∼ RSS(x; θ rd ),<label>(9)</label></formula><p>We useẑ h andẑ d sampled from the two independent (parameter untied) RSS to generate an n × n mask M rss , i.e.,</p><formula xml:id="formula_10">M rss ij = 0,ẑ d i =ẑ h j = 1 &amp; i = j −∞,</formula><p>otherwise.</p><p>The resulting mask is then applied as an extra mask to the masked self-attention mechanism introduced in Section 2.2. Specifically, we add M rss to Eq.(4) and use</p><formula xml:id="formula_12">f rss (x i , x j ) = f (x i , x j ) + M rss ij<label>(11)</label></formula><p>to generate the alignment scores. For each head token x j , a softmax function is applied to f rss (·, x j ), which produces a categorical distribution over all dependent tokens, i.e.,</p><formula xml:id="formula_13">P j = softmax([f rss (x i , x j )] n i=1 ), for j = 1, . . . , n. (12) The context features of x j is computed by s j = n i=1 P j i x i , for j = 1, . . . , n,<label>(13)</label></formula><p>where denotes a broadcast product in the vanilla attention or an element-wise product in the multi-dim attention. For a selected head token, as formulated in Eq.(10), the attention from a token to itself is disabled in M rss , so the s j for the selected head token encodes only the context features but not the desired context-ware embedding. For an unselected head token x j withẑ h j = 0, its alignment scores over all dependent tokens are equal to −∞, which leads to the equal probabilities in P j produced by the softmax function. Hence, s j for each unselected token x j can be regarded as the result of mean-pooling over all dependent tokens.</p><p>To merge the word embedding with its context feature for the selected heads, and distinguish the representations from others for the unselected heads, a fusion gate is used to combine s with the input embedding x in parallel and generate the final context-aware representations for all tokens, i.e.,</p><formula xml:id="formula_14">F = sigmoid W (f ) [x; s] + b (f ) ,<label>(14)</label></formula><formula xml:id="formula_15">u = F x + (1 − F ) s,<label>(15)</label></formula><p>where W (f ) , b (f ) are the learnable parameters. The contextaware representations, u = [u 1 , . . . , u n ], are final output. One primary advantage of ReSA is that it generates better predictions using less time and memory than existing selfattention mechanisms. In particular, major computations of ReSA are 1) the inference of self-attention over a shorter subsequence, and 2) the mean-pooling over the remaining elements. This is much more time-and memory-efficient than computing the self-attention over the entire input sequence.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Applications of the Proposed Models</head><p>To adapt ReSA for sentence encoding tasks, we build an RNN/CNN-free network, called reinforced self-attention network (ReSAN), which is solely based on ReSA and source2token self-attention (Section 2.2). In particular, we pass the output sequence of ReSA into a source2token selfattention module to generate a compressed vector representation, e ∈ R de , which encodes the semantic and syntactic knowledge of the input sentence and can be used for various downstream NLP tasks. Further, we propose two simplified variants of ReSAN with a simpler structure or fewer parameters, i.e., 1) ReSAN w/o unselected heads which only applies the soft self-attention to the selected head and dependent tokens, and 2) ReSAN w/o dependency restricted which use only one RSS to select tokens for both heads and dependents. Both variants entirely discard the information of the unselected tokens and hence are more time-efficient. However, neither can be used for context fusion, because the input and output sequences are not equal in length.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Model Training</head><p>The parameters in ReSAN can be divided into two parts, θ r for the RSS modules and θ s for the rest parts which includes word embeddings, soft self-attention module, and classification/regression layers. Learning θ s is straightforward and can be completed by back-propagation in an end-to-end manner. However, Optimizing θ r is more challenging because the RSS modules contain discrete variables z and, thus, the objective function is non-differentiable w.r.t. θ r .</p><p>In supervised classification settings, we use the crossentropy loss plus L2 regularization penalty as the loss, i.e., </p><p>where (x * , y * ) denotes a sample from dataset D. The loss above is used for learning θ s by back-propagation algorithm.</p><p>Optimizing θ r is formulated as a reinforcement learning problem solved by the policy gradient method (i.e., <ref type="bibr">REIN-FORCE algorithm)</ref>. In particular, RSS plays as an agent and takes action of whether to select a token or not. After going through the entire sequence, it receives a loss value from the classification problem, which can be regarded as the negative delay reward to train the agent. Since the overall goal of RSS is to select a small subset of tokens for better efficiency and meanwhile retain useful information, a penalty limiting the number of selected tokens is included in the reward R, i.e.,</p><formula xml:id="formula_17">R = log p(y = y * |x * ; θ s , θ r ) − λ ẑ i /len(x * ),<label>(17)</label></formula><p>where λ is the penalty weight and is fine-tuned with values from {0.005, 0.01, 0.02} in all experiments. Then, the objective of learning θ r is to maximize the expected reward, i.e.,</p><formula xml:id="formula_18">J r (θ r ) = E (x * ,y * )∼D {Eẑ[R]} ≈ 1 N x * ,y * Eẑ[R]<label>(18)</label></formula><p>where theẑ = (ẑ h ,ẑ d ) ∼ p(z h |x * ; θ rh )p(z d |x * ; θ rd ) π(ẑ; x * ; θ r ) and N is sample number in the dataset. Based  <ref type="bibr" target="#b4">Yu, 2017]</ref> 3.0m 86.2 84.6 600D Deep Gated Attn.  11.6m 90.5 85.5 600D Gumbel TreeLSTM encoders <ref type="bibr" target="#b4">[Choi et al., 2017b]</ref>  </p><formula xml:id="formula_19">(θ r ) w.r.t θ r is θr J r (θ r ) = 1 N x * ,y * ẑ R θr π(ẑ; x * ; θ r ) (19) = 1 N x * ,y * Eẑ[R θr log π(ẑ; x * ; θ r )].<label>(20)</label></formula><p>Although theoretically feasible, it is not practical to optimize θ s and θ r simultaneously, since the neural nets cannot provide accurate reward feedback to the hard attention at the beginning of the training phrase. Therefore, in early stage, the RSS modules are not updated, but rather forced to select all tokens (i.e., z = 1 ). And, θ s is optimized for several beginning epochs until the loss over development set does not decrease significantly. The resulting ReSAN now can provide a solid environment for training RSS modules through reinforcement learning. θ r and θ s are then optimized simultaneously to pursue a better performance by selecting critical token pairs and exploring their dependencies.</p><p>Training Setup: All experiments are conducted in Python with Tensorflow and run on a Nvidia GTX 1080Ti. We use Adadelta as optimizer, which performs more stable than Adam on ReSAN. All weight matrices are initialized by <ref type="bibr">Glorot Initialization [Glorot and Bengio, 2010]</ref> and the biases are initialized as zeros. We use 300D GloVe 6B pre-trained vectors <ref type="bibr" target="#b7">[Pennington et al., 2014]</ref> to initialize the word embeddings <ref type="bibr" target="#b6">[Liu et al., 2018]</ref>. The words which do not appear in GloVe from the training set are initialized by sampling from uniform distribution between [−0.05, 0.05]. We choose Dropout <ref type="bibr" target="#b8">[Srivastava et al., 2014]</ref> keep probability from {0.65, 0.70, 0.75, 0.8} for all models and report the best result. The weight decay factor γ for L2 regularization is set to 5 × 10 −5 . The number of hidden units is 300.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experiments</head><p>We implement ReSAN, its variants and baselines on two NLP tasks, language inference in Section 5.1 and semantic related-ness in Section 5.2. A case study is then given to provide the insights into model.</p><p>The </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Natural Language Inference</head><p>The goal of natural language inference is to infer the semantic relationship between a pair of sentences, i.e., a premise and the corresponding hypothesis. The possible relationships are entailment, neutral or contradiction. This experiment is conducted on the Stanford Natural Language Inference <ref type="bibr" target="#b1">[Bowman et al., 2015]</ref> (SNLI) dataset which consists of 549,367/9,842/9,824 samples for training/dev/test.</p><p>In order to apply sentence encoding model to SNLI, we follow Bowman et al. <ref type="bibr">[2016]</ref> and use two parameter-tied sentence encoding models to respectively produce the premise and the hypothesis encodings, i.e., s p , s h . Their semantic relationship is represented by the concatenation of s p , s h , s p −s h and s p s h , which is passed to a classification module to generate a categorical distribution over the three classes.</p><p>The experimental results for different methods from leaderboard and our baselines are shown in <ref type="table">Table 1</ref>. Compared to the methods from official leaderboard, ReSAN outperforms all the sentence encoding based methods and achieves the best test accuracy. Specifically, compared to the last best models, i.e., 600D Gumbel TreeLSTM encoders and 600D Residual stacked encoders, ReSAN uses far fewer parameters with  better performance. Moreover, in contrast to the RNN/CNN based models with attention or memory module, ReSAN uses attention-only modules with equal or fewer parameters but outperforms them by a large margin, e.g., 600D Bi-LSTM + intra-attention (+3.0%), 300D NSE encoders (+1.7%) and 600D Deep Gated Attn (+0.8%). Furthermore, ReSAN even outperforms the 300D SPINN-PI encoders by 3.1%., which is a recursive model and uses the result of an external semantic parsing tree as an extra input.</p><p>In addition, we compare ReSAN with recurrent, convolutional, and attention-only baseline models in terms of the number of parameters, training/inference time and test accuracy. Compared to the recurrent models (e.g., Bi-LSTM and Bi-GRU), ReSAN shows better prediction quality and more compelling efficiency due to parallelizable computations. Compared to the convolutional models (i.e., Multiwindow CNN and Hierarchical CNN), ReSAN significantly outperforms them by 3.1% and 2.4% respectively due to the weakness of CNNs in modeling long-range dependencies. Compared to the attention-based models, multi-head attention and DiSAN, ReSAN uses a similar number of parameters with better test performance and less time cost.</p><p>Further, we conduct an ablation study of ReSAN, as shown in <ref type="table" target="#tab_3">Table 2</ref>, to evaluate the contribution of each component. One by one, each component is removed and the changes in test accuracy are recorded. In addition to the two variants of ReSAN introduced in Section 3.3, we also remove 1) the hard attention module, 2) soft self-attention module and 3) both hard attention and soft self-attention modules. In terms of prediction quality, the results show that 1) the unselected head tokens do contribute to the prediction, bringing 0.2% improvement; 2) using separate RSS modules to select the head and dependent tokens improves accuracy by 0.5%; and 3) hard attention and soft self-attention modules improve the accuracy by 0.3% and 2.9% respectively. In terms of inference time, it shows that 1) the two variants are more timeefficient but have poorer performance; and 2) applying the RSS modules to self-attention or attention improves not only performance but also time efficiency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Semantic Relatedness</head><p>Semantic relatedness aims to predict the similarity degree of a given pair of sentences, which is formulated as a regression problem. We use s 1 and s 2 to denote the encodings of the two sentences, and assume the similarity degree is a scalar between [1, K]. Following <ref type="bibr" target="#b9">Tai et al. [2015]</ref>, the relationship between the two sentences is represented as a concatenation of s 1 s 2 and |s 1 −s 2 |. The representation is fed into a classifica-   <ref type="table" target="#tab_5">Table 3</ref> show that the ReSAN achieves state-of-the-art or competitive performance for all three metrics. Particularly, ReSAN outperforms the feature engineering method by a large margin, e.g., Meaning Factory and ECNU. ReSAN also significantly outperforms the recursive models, which is widely used in semantic relatedness task, especially ones that demand external parsing results, e.g., DT/SDT-RNN and Tree-LSTMs. Further, ReSAN achieves the best results among all the recurrent, convolutional and self-attention models listed as baselines. This thoroughly demonstrates the capability of ReSAN in context fusion and sentence encoding.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Case Study</head><p>To gain an insights into how the hard/soft attention and fusion gate work within ReSA, we visualize their resulting values in this section. Note that only the values at token level are illustrated. If the attention probabilities and the gate values are feature-level, we average the probabilities over all features.</p><p>Two sentences from the SNLI test set serve as examples for this case study: 1) "The three men sit and talk about their lives." and 2) "A group of adults are waiting for an event.".</p><p>The head and dependent tokens selected by RSS modules are show in <ref type="figure" target="#fig_3">Figure 2</ref> (a small square with color white denotes unselection and vice versa). It shows that more dependent tokens are selected than the head tokens, because all non-trivial dependents should be retained to adequately modify the corresponding heads, e.g., three, their in sentence 1 and group in sentence 2, whereas only the key heads should be kept to compose the trunk of a sentence. It also shows that most stop words <ref type="bibr">(i.e., articles, conjunctions, prepositions, etc.)</ref> are se- lected as neither head tokens nor dependent tokens.</p><p>We also visualize the probability distributions of the soft self-attention module in <ref type="figure" target="#fig_3">Figure 2</ref> (the depth of color blue). From the figure, we observe that 1) the semantically important words (e.g., noun and verb) usually receive great attention from all the other tokens, e.g., sit, talk, lives in sentence 1 and adults, waiting, event in sentence 2; and 2) the attention score increases if the token pair can be constituted to a sense-group, e.g., (sit, talk) in sentence 1 and (adults, waiting), (waiting, event) in sentence 2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>Applying reinforcement learning (RL) to natural language processing (NLP) tasks recently attracts enormous interests for two main purposes, i.e., optimizing the model according to non-differentiable objectives and accelerating the model speed. <ref type="bibr" target="#b6">Lei et al. [2016]</ref> propose a method to select a subset of a review passage for sentiment analysis from a specific aspect. He et al.</p><p>[2016a] use RL method to fine-tune a bilingual machine translation model by well-trained monolingual language models. Yogatama et al. <ref type="bibr">[2016]</ref> use builtin transition-based parsing module to generate semantic constituency parsing tree for downstream NLP tasks by using RL.  propose a RL-based skim reading method, which is implemented on recurrent models, to skim the insignificant time slots to achieve higher time efficiency. <ref type="bibr" target="#b3">Choi et al. [2017a]</ref> separately implement a hard attention or a soft attention on a question answering task to generate the document summary. <ref type="bibr" target="#b7">Shen et al. [2017]</ref> use dynamic episode number determined by RL rather than fixed one to attend memory for efficient machine comprehension. <ref type="bibr" target="#b5">Hu et al. [2017]</ref> employ policy gradient method to optimize the model for nondifferentiable objectives of machine comprehension, i.e., F1 score of matching the prediction with the ground truth. <ref type="bibr" target="#b6">Li et al. [2017a]</ref> propose a service dialog system to sell movie tickets, where the agent in RL is used to select which user's information should be obtained in next round for minimum number of dialog rounds to sell the ticket. Zhang and Lapata [2017] simplify a sentence with objectives of maximum simplicity, relevance and fluency, where all three objectives are all non-differentiable w.r.t the parameters of model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusions</head><p>This study presents a context fusion model, reinforced selfattention (ReSA), which naturally integrates a novel form of highly-parallelizable hard attention based on reinforced sequence sampling (RSS) and soft self-attention mechanism for the mutual benefit of overcoming the intrinsic weaknesses associated with hard and soft attention mechanisms. The hard attention modules could be used to trim a long sequence into a much shorter one and encode rich dependencies information for a soft self-attention mechanism to process. Conversely, the soft self-attention mechanism could be used to provide a stable environment and strong reward signals, which improves the feasibility of training the hard attention modules. Based solely on ReSA and a source2token self-attention mechanism, we then propose an RNN/CNN-free attention model, reinforced self-attention network (ReSAN), for sentence encoding. Experiments on two NLP tasks -natural language inference and semantic relatedness -demonstrate that ReSAN deliver a new best test accuracy for the SNLI dataset among all sentence-encoding models and state-of-theart performance on the SICK dataset. Further, these results are achieved with equal or fewer parameters and in less time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Comparison to a Iterative Sampling</head><p>To verify the RSS that uses parallel discrete sampling is sufficient to trim the long sentence and model the dependencies, we implement the iteration-based sequence sampling method following <ref type="bibr" target="#b6">Lei et al. [2016]</ref> and integrate it with the soft selfattention in the same way as ReSA.</p><p>Given a input sequence, x = [x 1 , . . . , x n ], iterative sampling aims to learn the following product distribution. p(z|x; θ r ) = n i=1 p(z i |x; z 1:i−1 ; θ r ).</p><p>A RNN is used to parameterize the conditional probability function above and the basic RNN rather than LSTM or GRU is employed to reduce the number of parameters. The latent state of the RNN can be referred to as the embedding of both contextual information and history selection results. The recurrence can be formally written as</p><formula xml:id="formula_21">p i = sigmoid(w T σ(W (p) [h i−1 ; x i ] + b (p) ) + b),<label>(22)</label></formula><formula xml:id="formula_22">z i ∼ p i ,<label>(23)</label></formula><formula xml:id="formula_23">x i = [x i ; z i ],<label>(24)</label></formula><formula xml:id="formula_24">h i = RNN(h i−1 , x i ; θ rnn ),<label>(25)</label></formula><p>where ∼ denotes the discrete sampling operation and θ rnn is the learnable parameters of RNN. Consequently, after this recurrence over the input sequence, a sequence of sampling result, z = [z 1 , . . . , z n ], is obtained, which shares the same notion with RSS.</p><p>We then apply two iterative sampling modules which make selections over the dependent and head tokens, respectively. The output of these two sampling modules is formated as a mask which is then applied to the compatibility function of soft self-attention mechanism. The details of the integration are described in the main paper.</p><p>For the comparison of RSS and iterative sampling, we also implement the ReSAN with iterative sampling on SNLI dataset that is one of the largest NLP dataset designed to test the sentence-encoding model. A thorough comparison of them in terms of parameters number, training/inference time, training/test accuracy are show in <ref type="table" target="#tab_7">Table 4</ref> ReSAN w/ RSS ReSAN w/ Iteration  As shown in the table, compared with ReSAN with iterative sampling, the one with RSS requires much fewer parameters, 5× less training time and 3× less inference time to achieve the competitive test accuracy. This is consistent with the motivation and target for which we develop the RSS.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Reinforced self-attention (ReSA) model. fi,j denotes the alignment score obtained from f (xi, xj).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>J</head><label></label><figDesc>s (θ s ) = E (x * ,y * )∼D [− log p(y = y * |x * ; θ s,r )] + γ θ s 2 ,</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>baselines are listed as follows: 1) Bi-LSTM: 600D bi-directional LSTM (300D forward LSTM + 300D backward LSTM) [Graves et al., 2013]; 2) Bi-GRU: 600D bidirectional GRU [Chung et al., 2014]; 3) Multi-window CNN: 600D CNN sentence embedding model (200D for each of 3, 4, 5-gram) [Kim, 2014]; 4) Hierarchical CNN: 3layer 300D CNN [Gehring et al., 2017] with kernel length 5. GLU [Dauphin et al., 2016] and residual connection [He et al., 2016b] are applied; 5) Multi-head: 600D multi-head attention (8 heads, each has 75 hidden units), where the positional encoding method is applied to the input [Vaswani et al., 2017]; 6) DiSAN: 600D directional self-attention network (forward+backward masked self-attn) [Shen et al., 2018].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 :</head><label>2</label><figDesc>Attention probabilities of soft self-attention in ReSA. The tokens aligned in horizontal axis are heads, and the tokens aligned in vertical axis are dependents.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 :</head><label>2</label><figDesc>An ablation study of ReSAN.</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head></head><label></label><figDesc>RNN c .7923 (.0070) .7319 (.0071) .3822 (.0137) SDT-RNN c .7900 (.0042) .7304 (.0042) .3848 (.0042) Cons. Tree-LSTM d .8582 (.0038) .7966 (.0053) .2734 (.0108) Dep. Tree-LSTM d .8676 (.0030) .8083 (.0042) .2532 (.0052)</figDesc><table><row><cell>Model</cell><cell cols="2">Pearson's r Spearman's ρ</cell><cell>MSE</cell></row><row><cell>Meaning Factory a</cell><cell>.8268</cell><cell>.7721</cell><cell>.3224</cell></row><row><cell>ECNU b</cell><cell>.8414</cell><cell>/</cell><cell>/</cell></row><row><cell>DT-Bi-LSTM</cell><cell cols="3">.8473 (.0013) .7913 (.0019) .3276 (.0087)</cell></row><row><cell>Bi-GRU</cell><cell cols="3">.8572 (.0022) .8026 (.0014) .3079 (.0069)</cell></row><row><cell cols="4">Multi-window CNN .8374 (.0021) .7793 (.0028) .3395 (.0086)</cell></row><row><cell cols="4">Hierarchical CNN .8436 (.0014) .7874 (.0022) .3162 (.0058)</cell></row><row><cell>Multi-head</cell><cell cols="3">.8521 (.0013) .7942 (.0050) .3258 (.0149)</cell></row><row><cell>DiSAN</cell><cell cols="3">.8695 (.0012) .8139 (.0012) .2879 (.0036)</cell></row><row><cell>ReSAN</cell><cell cols="3">.8720 (.0014) .8163 (.0018) .2623 (.0053)</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 3 :</head><label>3</label><figDesc>Experimental results for different methods on SICK semantic relatedness dataset. The reported accuracies are the mean of five runs (standard deviations in parentheses). Cons. and Dep. represent Constituency and Dependency, respectively. a<ref type="bibr" target="#b1">[Bjerva et al., 2014]</ref>,</figDesc><table><row><cell>, 2015]</cell></row></table><note>b [Zhao et al., 2014], c [Socher et al., 2014], d [Tai et al.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 4 :</head><label>4</label><figDesc>A thorough comparison of a ReSAN with RSS and Iterative Sampling on SNLI dataset. * The accuracies of these two models should be experimentally equal, but, due to the randomness of neural networks (e.g., initialization, batch SGD), there are some experimental error on the accuracies.</figDesc><table /><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This research was funded by the Australian Government through the Australian Research Council (ARC) under grants 1) LP160100630 partnership with Australia Government Department of Health and 2) LP150100671 partnership with Australia Research Alliance for Children and Youth (ARACY) and Global Business College Australia (GBCA). We also acknowledge the support of NVIDIA Corporation and MakeMagic Australia with the donation of GPU.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Neural machine translation by jointly learning to align and translate</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>References</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bahdanau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICLR</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">The meaning factory: Formal semantics for recognizing textual entailment and determining semantic similarity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Bjerva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SemEval@ COLING</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="642" to="646" />
		</imprint>
	</monogr>
	<note>ACL</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Recurrent neural networkbased sentence encoder with gated attention for natural language inference</title>
	</analytic>
	<monogr>
		<title level="m">RepEval@ EMNLP</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Coarse-to-fine question answering for long documents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Choi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACL</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Empirical evaluation of gated recurrent neural networks on sequence modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Choi</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1707.02786</idno>
		<idno>arXiv:1705.03122</idno>
	</analytic>
	<monogr>
		<title level="m">Learning to compose task-specific tree structures</title>
		<imprint>
			<publisher>Alex Graves</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="770" to="778" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>CVPR</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Reinforced mnemonic reader for machine comprehension</title>
		<idno>abs/1705.02798</idno>
		<imprint>
			<date type="published" when="2017" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">End-to-end adversarial memory network for crossdomain sentiment classification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><surname>Kim ; Yoon Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Lei</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1703.01008</idno>
		<idno>arXiv:1605.09090</idno>
	</analytic>
	<monogr>
		<title level="m">Learning natural language inference using bidirectional lstm model and inner-attention</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>AAAI</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A sick cure for the evaluation of compositional distributional semantic models</title>
		<idno type="arXiv">arXiv:1508.04025</idno>
		<idno>arXiv:1708.02312</idno>
	</analytic>
	<monogr>
		<title level="m">Effective approaches to attention-based neural machine translation</title>
		<editor>Aniruddha Kembhavi, Ali Farhadi, and Hannaneh Hajishirzi</editor>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>SIGKDD</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Grounded compositional semantics for finding and describing images with sentences</title>
		<idno type="arXiv">arXiv:1505.00387</idno>
	</analytic>
	<monogr>
		<title level="m">Kumar Srivastava, Klaus Greff, and Jürgen Schmidhuber. Highway networks</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="1929" to="1958" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>AAAI</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Improved semantic representations from treestructured long short-term memory networks</title>
	</analytic>
	<monogr>
		<title level="m">NIPS</title>
		<editor>Ashish Vaswani, Shazeer, Noam, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin</editor>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note>ACL</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Rich Zemel, and Yoshua Bengio. Show, attend and tell: Neural image caption generation with visual attention</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Williams ; Ronald J</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><surname>Xu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1611.09100</idno>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
		<editor>Yogatama et al., 2016] Dani Yogatama, Phil Blunsom, Chris Dyer, Edward Grefenstette, and Wang Ling</editor>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="229" to="256" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>Learning to compose words into sentences with reinforcement learning</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Ecnu: One stone two birds: Ensemble of heterogenous measures for semantic relatedness and textual entailment</title>
		<idno type="arXiv">arXiv:1704.06877</idno>
		<idno>arXiv:1703.10931</idno>
	</analytic>
	<monogr>
		<title level="m">Sentence simplification with deep reinforcement learning</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="271" to="277" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>SemEval@ COL-ING</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
