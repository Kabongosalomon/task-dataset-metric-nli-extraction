<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /nfs/home/kabenamualus/Research/task-dataset-metric-extraction/../grobid-0.6.0/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">End-To-End Memory Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sainbayar</forename><surname>Sukhbaatar</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Dept. of Computer Science Courant Institute</orgName>
								<orgName type="institution">New York University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arthur</forename><surname>Szlam</surname></persName>
							<email>aszlam@fb.com</email>
							<affiliation key="aff1">
								<orgName type="department">Facebook AI Research New York</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><surname>Weston</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Facebook AI Research New York</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rob</forename><surname>Fergus</surname></persName>
							<email>robfergus@fb.com</email>
							<affiliation key="aff1">
								<orgName type="department">Facebook AI Research New York</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">End-To-End Memory Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.6.0" ident="GROBID-SDO" when="2021-06-25T19:28+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid-sdo"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We introduce a neural network with a recurrent attention model over a possibly large external memory. The architecture is a form of Memory Network [23] but unlike the model in that work, it is trained end-to-end, and hence requires significantly less supervision during training, making it more generally applicable in realistic settings. It can also be seen as an extension of RNNsearch [2] to the case where multiple computational steps (hops) are performed per output symbol. The flexibility of the model allows us to apply it to tasks as diverse as (synthetic) question answering <ref type="bibr" target="#b21">[22]</ref> and to language modeling. For the former our approach is competitive with Memory Networks, but with less supervision. For the latter, on the Penn TreeBank and Text8 datasets our approach demonstrates comparable performance to RNNs and LSTMs. In both cases we show that the key concept of multiple computational hops yields improved results.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Two grand challenges in artificial intelligence research have been to build models that can make multiple computational steps in the service of answering a question or completing a task, and models that can describe long term dependencies in sequential data.</p><p>Recently there has been a resurgence in models of computation using explicit storage and a notion of attention <ref type="bibr" target="#b22">[23,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b1">2]</ref>; manipulating such a storage offers an approach to both of these challenges. In <ref type="bibr" target="#b22">[23,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b1">2]</ref>, the storage is endowed with a continuous representation; reads from and writes to the storage, as well as other processing steps, are modeled by the actions of neural networks.</p><p>In this work, we present a novel recurrent neural network (RNN) architecture where the recurrence reads from a possibly large external memory multiple times before outputting a symbol. Our model can be considered a continuous form of the Memory Network implemented in <ref type="bibr" target="#b22">[23]</ref>. The model in that work was not easy to train via backpropagation, and required supervision at each layer of the network. The continuity of the model we present here means that it can be trained end-to-end from input-output pairs, and so is applicable to more tasks, i.e. tasks where such supervision is not available, such as in language modeling or realistically supervised question answering tasks. Our model can also be seen as a version of RNNsearch <ref type="bibr" target="#b1">[2]</ref> with multiple computational steps (which we term "hops") per output symbol. We will show experimentally that the multiple hops over the long-term memory are crucial to good performance of our model on these tasks, and that training the memory representation can be integrated in a scalable manner into our end-to-end neural network model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Approach</head><p>Our model takes a discrete set of inputs x 1 , ..., x n that are to be stored in the memory, a query q, and outputs an answer a. Each of the x i , q, and a contains symbols coming from a dictionary with V words. The model writes all x to the memory up to a fixed buffer size, and then finds a continuous representation for the x and q. The continuous representation is then processed via multiple hops to output a. This allows backpropagation of the error signal through multiple memory accesses back to the input during training.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Single Layer</head><p>We start by describing our model in the single layer case, which implements a single memory hop operation. We then show it can be stacked to give multiple hops in memory.</p><p>Input memory representation: Suppose we are given an input set x 1 , .., x i to be stored in memory. The entire set of {x i } are converted into memory vectors {m i } of dimension d computed by embedding each x i in a continuous space, in the simplest case, using an embedding matrix A (of size d×V ). The query q is also embedded (again, in the simplest case via another embedding matrix B with the same dimensions as A) to obtain an internal state u. In the embedding space, we compute the match between u and each memory m i by taking the inner product followed by a softmax:</p><formula xml:id="formula_0">p i = Softmax(u T m i ).<label>(1)</label></formula><p>where Softmax(z i ) = e zi / j e zj . Defined in this way p is a probability vector over the inputs.</p><p>Output memory representation: Each x i has a corresponding output vector c i (given in the simplest case by another embedding matrix C). The response vector from the memory o is then a sum over the transformed inputs c i , weighted by the probability vector from the input:</p><formula xml:id="formula_1">o = i p i c i .<label>(2)</label></formula><p>Because the function from input to output is smooth, we can easily compute gradients and backpropagate through it. Other recently proposed forms of memory or attention take this approach, notably Bahdanau et al. <ref type="bibr" target="#b1">[2]</ref> and Graves et al. <ref type="bibr" target="#b7">[8]</ref>, see also <ref type="bibr" target="#b8">[9]</ref>.</p><p>Generating the final prediction: In the single layer case, the sum of the output vector o and the input embedding u is then passed through a final weight matrix W (of size V × d) and a softmax to produce the predicted label:</p><formula xml:id="formula_2">â = Softmax(W (o + u))<label>(3)</label></formula><p>The overall model is shown in <ref type="figure" target="#fig_0">Fig. 1(a</ref>  A three layer version of our model. In practice, we can constrain several of the embedding matrices to be the same (see Section 2.2).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Multiple Layers</head><p>We now extend our model to handle K hop operations. The memory layers are stacked in the following way:</p><p>• The input to layers above the first is the sum of the output o k and the input u k from layer k (different ways to combine o k and u k are proposed later):</p><formula xml:id="formula_3">u k+1 = u k + o k .<label>(4)</label></formula><p>• Each layer has its own embedding matrices A k , C k , used to embed the inputs {x i }. However, as discussed below, they are constrained to ease training and reduce the number of parameters. • At the top of the network, the input to W also combines the input and the output of the top memory layer:â = Softmax(W u K+1 ) = Softmax(W (o K + u K )).</p><p>We explore two types of weight tying within the model:</p><p>1. Adjacent: the output embedding for one layer is the input embedding for the one above, i.e. A k+1 = C k . We also constrain (a) the answer prediction matrix to be the same as the final output embedding, i.e W T = C K , and (b) the question embedding to match the input embedding of the first layer, i.e. B = A 1 . 2. Layer-wise (RNN-like): the input and output embeddings are the same across different layers, i.e. A 1 = A 2 = ... = A K and C 1 = C 2 = ... = C K . We have found it useful to add a linear mapping H to the update of u between hops; that is, u k+1 = Hu k + o k . This mapping is learnt along with the rest of the parameters and used throughout our experiments for layer-wise weight tying.</p><p>A three-layer version of our memory model is shown in <ref type="figure" target="#fig_0">Fig. 1(b)</ref>. Overall, it is similar to the Memory Network model in <ref type="bibr" target="#b22">[23]</ref>, except that the hard max operations within each layer have been replaced with a continuous weighting from the softmax.</p><p>Note that if we use the layer-wise weight tying scheme, our model can be cast as a traditional RNN where we divide the outputs of the RNN into internal and external outputs. Emitting an internal output corresponds to considering a memory, and emitting an external output corresponds to predicting a label. From the RNN point of view, u in <ref type="figure" target="#fig_0">Fig. 1(b)</ref> and Eqn. 4 is a hidden state, and the model generates an internal output p (attention weights in <ref type="figure" target="#fig_0">Fig. 1(a)</ref>) using A. The model then ingests p using C, updates the hidden state, and so on 1 . Here, unlike a standard RNN, we explicitly condition on the outputs stored in memory during the K hops, and we keep these outputs soft, rather than sampling them. Thus our model makes several computational steps before producing an output meant to be seen by the "outside world".</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Related Work</head><p>A number of recent efforts have explored ways to capture long-term structure within sequences using RNNs or LSTM-based models <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b0">1]</ref>. The memory in these models is the state of the network, which is latent and inherently unstable over long timescales. The LSTM-based models address this through local memory cells which lock in the network state from the past. In practice, the performance gains over carefully trained RNNs are modest (see Mikolov et al. <ref type="bibr" target="#b14">[15]</ref>). Our model differs from these in that it uses a global memory, with shared read and write functions. However, with layer-wise weight tying our model can be viewed as a form of RNN which only produces an output after a fixed number of time steps (corresponding to the number of hops), with the intermediary steps involving memory input/output operations that update the internal state.</p><p>Some of the very early work on neural networks by Steinbuch and Piske <ref type="bibr" target="#b18">[19]</ref> and Taylor <ref type="bibr" target="#b20">[21]</ref> considered a memory that performed nearest-neighbor operations on stored input vectors and then fit parametric models to the retrieved sets. This has similarities to a single layer version of our model. Subsequent work in the 1990's explored other types of memory <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b15">16]</ref>. For example, Das et al. <ref type="bibr" target="#b4">[5]</ref> and Mozer et al. <ref type="bibr" target="#b15">[16]</ref> introduced an explicit stack with push and pop operations which has been revisited recently by <ref type="bibr" target="#b10">[11]</ref> in the context of an RNN model.</p><p>Closely related to our model is the Neural Turing Machine of Graves et al. <ref type="bibr" target="#b7">[8]</ref>, which also uses a continuous memory representation. The NTM memory uses both content and address-based access, unlike ours which only explicitly allows the former, although the temporal features that we will introduce in Section 4.1 allow a kind of address-based access. However, in part because we always write each memory sequentially, our model is somewhat simpler, not requiring operations like sharpening. Furthermore, we apply our memory model to textual reasoning tasks, which qualitatively differ from the more abstract operations of sorting and recall tackled by the NTM.</p><p>Our model is also related to Bahdanau et al. <ref type="bibr" target="#b1">[2]</ref>. In that work, a bidirectional RNN based encoder and gated RNN based decoder were used for machine translation. The decoder uses an attention model that finds which hidden states from the encoding are most useful for outputting the next translated word; the attention model uses a small neural network that takes as input a concatenation of the current hidden state of the decoder and each of the encoders hidden states. A similar attention model is also used in Xu et al. <ref type="bibr" target="#b23">[24]</ref> for generating image captions. Our "memory" is analogous to their attention mechanism, although <ref type="bibr" target="#b1">[2]</ref> is only over a single sentence rather than many, as in our case. Furthermore, our model makes several hops on the memory before making an output; we will see below that this is important for good performance. There are also differences in the architecture of the small network used to score the memories compared to our scoring approach; we use a simple linear layer, whereas they use a more sophisticated gated architecture.</p><p>We will apply our model to language modeling, an extensively studied task. Goodman <ref type="bibr" target="#b5">[6]</ref> showed simple but effective approaches which combine n-grams with a cache. Bengio et al. <ref type="bibr" target="#b2">[3]</ref> ignited interest in using neural network based models for the task, with RNNs <ref type="bibr" target="#b13">[14]</ref> and LSTMs <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b19">20]</ref> showing clear performance gains over traditional methods. Indeed, the current state-of-the-art is held by variants of these models, for example very large LSTMs with Dropout <ref type="bibr" target="#b24">[25]</ref> or RNNs with diagonal constraints on the weight matrix <ref type="bibr" target="#b14">[15]</ref>. With appropriate weight tying, our model can be regarded as a modified form of RNN, where the recurrence is indexed by memory lookups to the word sequence rather than indexed by the sequence itself.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Synthetic Question and Answering Experiments</head><p>We perform experiments on the synthetic QA tasks defined in <ref type="bibr" target="#b21">[22]</ref> (using version 1.1 of the dataset). A given QA task consists of a set of statements, followed by a question whose answer is typically a single word (in a few tasks, answers are a set of words). The answer is available to the model at training time, but must be predicted at test time. There are a total of 20 different types of tasks that probe different forms of reasoning and deduction. Here are samples of three of the tasks:</p><p>Sam walks into the kitchen. Brian is a lion. Mary journeyed to the den. Sam picks up an apple.</p><p>Julius is a lion. Mary went back to the kitchen. Sam walks into the bedroom.</p><p>Julius is white. John journeyed to the bedroom. Sam drops the apple.</p><p>Bernhard is green. Mary discarded the milk. Q: Where is the apple? Q: What color is Brian? Q: Where was the milk before the den? A. Bedroom A. White A. Hallway</p><p>Note that for each question, only some subset of the statements contain information needed for the answer, and the others are essentially irrelevant distractors (e.g. the first sentence in the first example). In the Memory Networks of Weston et al. <ref type="bibr" target="#b21">[22]</ref>, this supporting subset was explicitly indicated to the model during training and the key difference between that work and this one is that this information is no longer provided. Hence, the model must deduce for itself at training and test time which sentences are relevant and which are not.</p><p>Formally, for one of the 20 QA tasks, we are given example problems, each having a set of I sentences {x i } where I ≤ 320; a question sentence q and answer a. Let the jth word of sentence i be x ij , represented by a one-hot vector of length V (where the vocabulary is of size V = 177, reflecting the simplistic nature of the QA language). The same representation is used for the question q and answer a. Two versions of the data are used, one that has 1000 training problems per task and a second larger one with 10,000 per task.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Model Details</head><p>Unless otherwise stated, all experiments used a K = 3 hops model with the adjacent weight sharing scheme. For all tasks that output lists (i.e. the answers are multiple words), we take each possible combination of possible outputs and record them as a separate answer vocabulary word.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Sentence Representation:</head><p>In our experiments we explore two different representations for the sentences. The first is the bag-of-words (BoW) representation that takes the sentence</p><formula xml:id="formula_4">x i = {x i1 , x i2 , ..</formula><p>., x in }, embeds each word and sums the resulting vectors: e.g m i = j Ax ij and c i = j Cx ij . The input vector u representing the question is also embedded as a bag of words: u = j Bq j . This has the drawback that it cannot capture the order of the words in the sentence, which is important for some tasks.</p><p>We therefore propose a second representation that encodes the position of words within the sentence. This takes the form: m i = j l j · Ax ij , where · is an element-wise multiplication. l j is a column vector with the structure l kj = (1 − j/J) − (k/d)(1 − 2j/J) (assuming 1-based indexing), with J being the number of words in the sentence, and d is the dimension of the embedding. This sentence representation, which we call position encoding (PE), means that the order of the words now affects m i . The same representation is used for questions, memory inputs and memory outputs.</p><p>Temporal Encoding: Many of the QA tasks require some notion of temporal context, i.e. in the first example of Section 2, the model needs to understand that Sam is in the bedroom after he is in the kitchen. To enable our model to address them, we modify the memory vector so</p><formula xml:id="formula_5">that m i = j Ax ij + T A (i), where T A (i)</formula><p>is the ith row of a special matrix T A that encodes temporal information. The output embedding is augmented in the same way with a matrix T c (e.g. c i = j Cx ij + T C (i)). Both T A and T C are learned during training. They are also subject to the same sharing constraints as A and C. Note that sentences are indexed in reverse order, reflecting their relative distance from the question so that x 1 is the last sentence of the story.</p><p>Learning time invariance by injecting random noise: we have found it helpful to add "dummy" memories to regularize T A . That is, at training time we can randomly add 10% of empty memories to the stories. We refer to this approach as random noise (RN).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Training Details</head><p>10% of the bAbI training set was held-out to form a validation set, which was used to select the optimal model architecture and hyperparameters. Our models were trained using a learning rate of η = 0.01, with anneals every 25 epochs by η/2 until 100 epochs were reached. No momentum or weight decay was used. The weights were initialized randomly from a Gaussian distribution with zero mean and σ = 0.1. When trained on all tasks simultaneously with 1k training samples (10k training samples), 60 epochs (20 epochs) were used with learning rate anneals of η/2 every 15 epochs (5 epochs). All training uses a batch size of 32 (but cost is not averaged over a batch), and gradients with an 2 norm larger than 40 are divided by a scalar to have norm 40. In some of our experiments, we explored commencing training with the softmax in each memory layer removed, making the model entirely linear except for the final softmax for answer prediction. When the validation loss stopped decreasing, the softmax layers were re-inserted and training recommenced. We refer to this as linear start (LS) training. In LS training, the initial learning rate is set to η = 0.005. The capacity of memory is restricted to the most recent 50 sentences. Since the number of sentences and the number of words per sentence varied between problems, a null symbol was used to pad them all to a fixed size. The embedding of the null symbol was constrained to be zero.</p><p>On some tasks, we observed a large variance in the performance of our model (i.e. sometimes failing badly, other times not, depending on the initialization). To remedy this, we repeated each training 10 times with different random initializations, and picked the one with the lowest training error.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Baselines</head><p>We compare our approach 2 (abbreviated to MemN2N) to a range of alternate models:</p><p>• MemNN: The strongly supervised AM+NG+NL Memory Networks approach, proposed in <ref type="bibr" target="#b21">[22]</ref>. This is the best reported approach in that paper. It uses a max operation (rather than softmax) at each layer which is trained directly with supporting facts (strong supervision). It employs n-gram modeling, nonlinear layers and an adaptive number of hops per query.</p><p>• MemNN-WSH: A weakly supervised heuristic version of MemNN where the supporting sentence labels are not used in training. Since we are unable to backpropagate through the max operations in each layer, we enforce that the first memory hop should share at least one word with the question, and that the second memory hop should share at least one word with the first hop and at least one word with the answer. All those memories that conform are called valid memories, and the goal during training is to rank them higher than invalid memories using the same ranking criteria as during strongly supervised training.</p><p>• LSTM: A standard LSTM model, trained using question / answer pairs only (i.e. also weakly supervised). For more detail, see <ref type="bibr" target="#b21">[22]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Results</head><p>We report a variety of design choices: The results across all 20 tasks are given in <ref type="table" target="#tab_2">Table 1</ref> for the 1k training set, along with the mean performance for 10k training set <ref type="bibr" target="#b2">3</ref> . They show a number of interesting points:</p><p>•  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Language Modeling Experiments</head><p>The goal in language modeling is to predict the next word in a text sequence given the previous words x. We now explain how our model can easily be applied to this task.  <ref type="table" target="#tab_2">MemN2N  150  2  100  128  121  500  2  100  152  187  150  3  100  129  122  500  3  100  142  178  150  4  100  127  120  500  4  100  129  162  150  5  100  127  118  500  5  100  123  154  150  6  100  122  115  500  6  100  124  155  150  7  100  120  114  500  7  100  118  147  150  6  25  125  118  500  6  25  131  163  150  6  50  121  114  500  6  50  132  166  150  6  75  122  114  500  6  75  126  158  150  6  100  122  115  500  6  100  124  155  150  6  125  120  112  500  6  125  125  157  150  6  150  121  114  500  6  150  123  154  150  7  200</ref> 118 111 -----  We now operate on word level, as opposed to the sentence level. Thus the previous N words in the sequence (including the current) are embedded into memory separately. Each memory cell holds only a single word, so there is no need for the BoW or linear mapping representations used in the QA tasks. We employ the temporal embedding approach of Section 4.1.</p><p>Since there is no longer any question, q in <ref type="figure" target="#fig_0">Fig. 1</ref> is fixed to a constant vector 0.1 (without embedding). The output softmax predicts which word in the vocabulary (of size V ) is next in the sequence. A cross-entropy loss is used to train model by backpropagating the error through multiple memory layers, in the same manner as the QA tasks. To aid training, we apply ReLU operations to half of the units in each layer. We use layer-wise (RNN-like) weight sharing, i.e. the query weights of each layer are the same; the output weights of each layer are the same. As noted in Section 2.2, this makes our architecture closely related to an RNN which is traditionally used for language modeling tasks; however here the "sequence" over which the network is recurrent is not in the text, but in the memory hops. Furthermore, the weight tying restricts the number of parameters in the model, helping generalization for the deeper models which we find to be effective for this task. We use two different datasets: Penn Tree Bank <ref type="bibr" target="#b12">[13]</ref>: This consists of 929k/73k/82k train/validation/test words, distributed over a vocabulary of 10k words. The same preprocessing as <ref type="bibr" target="#b24">[25]</ref> was used.</p><p>Text8 <ref type="bibr" target="#b14">[15]</ref>: This is a a pre-processed version of the first 100M million characters, dumped from Wikipedia. This is split into 93.3M/5.7M/1M character train/validation/test sets. All word occurring less than 5 times are replaced with the &lt;UNK&gt; token, resulting in a vocabulary size of ∼44k.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Training Details</head><p>The training procedure we use is the same as the QA tasks, except for the following. For each mini-batch update, the 2 norm of the whole gradient of all parameters is measured 5 and if larger than L = 50, then it is scaled down to have norm L. This was crucial for good performance. We use the learning rate annealing schedule from <ref type="bibr" target="#b14">[15]</ref>, namely, if the validation cost has not decreased after one epoch, then the learning rate is scaled down by a factor 1.5. Training terminates when the learning rate drops below 10 −5 , i.e. after 50 epochs or so. Weights are initialized using N (0, 0.05) and batch size is set to 128. On the Penn tree dataset, we repeat each training 10 times with different random initializations and pick the one with smallest validation cost. However, we have done only a single training run on Text8 dataset due to limited time constraints. <ref type="table" target="#tab_4">Table 2</ref> compares our model to RNN, LSTM and Structurally Constrained Recurrent Nets (SCRN) <ref type="bibr" target="#b14">[15]</ref> baselines on the two benchmark datasets. Note that the baseline architectures were tuned in <ref type="bibr" target="#b14">[15]</ref> to give optimal perplexity 6 . Our MemN2N approach achieves lower perplexity on both datasets (111 vs 115 for RNN/SCRN on Penn and 147 vs 154 for LSTM on Text8). Note that MemN2N has ∼1.5x more parameters than RNNs with the same number of hidden units, while LSTM has ∼4x more parameters. We also vary the number of hops and memory size of our MemN2N, showing the contribution of both to performance; note in particular that increasing the number of hops helps. In <ref type="figure" target="#fig_2">Fig. 3</ref>, we show how MemN2N operates on memory with multiple hops. It shows the average weight of the activation of each memory position over the test set. We can see that some hops concentrate only on recent words, while other hops have more broad attention over all memory locations, which is consistent with the idea that succesful language models consist of a smoothed n-gram model and a cache <ref type="bibr" target="#b14">[15]</ref>. Interestingly, it seems that those two types of hops tend to alternate. Also note that unlike a traditional RNN, the cache does not decay exponentially: it has roughly the same average activation across the entire memory. This may be the source of the observed improvement in language modeling.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Results</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusions and Future Work</head><p>In this work we showed that a neural network with an explicit memory and a recurrent attention mechanism for reading the memory can be successfully trained via backpropagation on diverse tasks from question answering to language modeling. Compared to the Memory Network implementation of <ref type="bibr" target="#b22">[23]</ref> there is no supervision of supporting facts and so our model can be used in a wider range of settings. Our model approaches the same performance of that model, and is significantly better than other baselines with the same level of supervision. On language modeling tasks, it slightly outperforms tuned RNNs and LSTMs of comparable complexity. On both tasks we can see that increasing the number of memory hops improves performance.</p><p>However, there is still much to do. Our model is still unable to exactly match the performance of the memory networks trained with strong supervision, and both fail on several of the 1k QA tasks. Furthermore, smooth lookups may not scale well to the case where a larger memory is required. For these settings, we plan to explore multiscale notions of attention or hashing, as proposed in <ref type="bibr" target="#b22">[23]</ref>. <ref type="table" target="#tab_2">Baseline  MemN2N  Strongly  PE  PE LS  1 hop  2 hops 3 hops  PE  PE LS  Supervised  MemNN  PE  LS  LW  PE LS PE LS PE LS LS RN  LW  Task  MemNN  LSTM  WSH  BoW  PE  LS  RN  RN  *   joint  joint  joint  joint  joint  1: 1</ref>      The hallway is north of the kitchen.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Appendix A Results on 10k QA dataset</head><p>1.00 1.00 1.00 Yann journeyed to the kitchen. 0.00 0.00 0.00 The garden is south of the kitchen. yes 0.00 0.00 0.00 Yann grabbed the apple there. 0.00 0.00 0.00 The garden is east of the bedroom. yes 0.00 0.00 0.00 Antoine is thirsty. yes 0.17 0.00 0.98 The bathroom is south of the bedroom. 0.00 0.00 0.00 Jason picked up the milk there. 0.01 0.00 0.00 The office is east of the garden. 0.00 0.00 0.00 Antoine travelled to the kitchen.  <ref type="figure">Figure 4</ref>: Examples of attention weights during different memory hops for the bAbi tasks. The model is PE+LS+RN with 3 memory hops that is trained separately on each task with 10k training data. The support column shows which sentences are necessary for answering questions. Although this information is not used, the model succesfully learns to focus on the correct support sentences on most of the tasks. The hop columns show where the model put more weight (indicated by values and blue color) during its three hops. The mistakes made by the model are highlighted by red color.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>(a): A single layer version of our model. (b):</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>(i) BoW vs Position Encoding (PE) sentence representation; (ii) training on all 20 tasks independently vs jointly training (joint training used an embedding dimension of d = 50, while independent training used d = 20); (iii) two phase training: linear start (LS) where softmaxes are removed initially vs training with softmaxes from the start; (iv) varying memory hops from 1 to 3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Average activation weight of memory positions during 6 memory hops. White color indicates where the model is attending during the k th hop. For clarity, each row is normalized to have maximum value of 1. A model is trained on (left) Penn Treebank and (right) Text8 dataset.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>? Answer: bathroom Prediction: bathroom Where is the milk? Answer: hallway Prediction: hallway Where was the football before the garden? A: hallway P: hallway What is north of the kitchen? Answer: garden Prediction: garden Who gave the apple to Jeff? Answer: Fred Prediction: Fred Is Sandra in the bedroom? Answer: yes Prediction: Yes How many objects is Sandra carrying? Answer: one Prediction: one What is Daniel carrying? Answer: apple,milk Prediction: apple,milk Is Sandra in the garden? Answer: no Prediction: no Is Bill in the office? Answer: maybe Prediction: maybe Where is Sandra? Answer: hallway Prediction: hallway Where is Sandra? Answer: kitchen Prediction: kitchen Where is Sandra? Answer: kitchen Prediction: kitchen Where was Mary before the bedroom? Answer: cinema Prediction: cinema What is gertrude afraid of? Answer: wolf Prediction: wolf What color is Greg? Answer: yellow Prediction: yellow Is the triangle above the red square? Answer: yes Prediction: no Does the suitcase fit in the chocolate? Answer: no Prediction: no How do you go from the kitchen to the bedroom? Answer: s,w Prediction: n,n Why did antoine go to the kitchen? Answer: thirsty Prediction: thirsty</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>The best MemN2N models are reasonably close to the supervised models (e.g. 1k: 6.7% for MemNN vs 12.6% for MemN2N with position encoding + linear start + random noise, jointly trained and 10k: 3.2% for MemNN vs 4.2% for MemN2N with position encoding + linear start + random noise + non-linearity 4 , although the supervised models are still superior.• All variants of our proposed model comfortably beat the weakly supervised baseline methods.</figDesc><table><row><cell></cell><cell></cell><cell>Baseline</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">MemN2N</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>Strongly</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>PE</cell><cell>1 hop</cell><cell>2 hops</cell><cell>3 hops</cell><cell>PE</cell><cell>PE LS</cell></row><row><cell></cell><cell>Supervised</cell><cell>LSTM</cell><cell>MemNN</cell><cell></cell><cell></cell><cell>PE</cell><cell>LS</cell><cell>PE LS</cell><cell>PE LS</cell><cell>PE LS</cell><cell>LS RN</cell><cell>LW</cell></row><row><cell>Task</cell><cell>MemNN [22]</cell><cell>[22]</cell><cell>WSH</cell><cell>BoW</cell><cell>PE</cell><cell>LS</cell><cell>RN</cell><cell>joint</cell><cell>joint</cell><cell>joint</cell><cell>joint</cell><cell>joint</cell></row><row><cell>1: 1 supporting fact</cell><cell>0.0</cell><cell>50.0</cell><cell>0.1</cell><cell>0.6</cell><cell>0.1</cell><cell>0.2</cell><cell>0.0</cell><cell>0.8</cell><cell>0.0</cell><cell>0.1</cell><cell>0.0</cell><cell>0.1</cell></row><row><cell>2: 2 supporting facts</cell><cell>0.0</cell><cell>80.0</cell><cell>42.8</cell><cell>17.6</cell><cell>21.6</cell><cell>12.8</cell><cell>8.3</cell><cell>62.0</cell><cell>15.6</cell><cell>14.0</cell><cell>11.4</cell><cell>18.8</cell></row><row><cell>3: 3 supporting facts</cell><cell>0.0</cell><cell>80.0</cell><cell>76.4</cell><cell>71.0</cell><cell>64.2</cell><cell>58.8</cell><cell>40.3</cell><cell>76.9</cell><cell>31.6</cell><cell>33.1</cell><cell>21.9</cell><cell>31.7</cell></row><row><cell>4: 2 argument relations</cell><cell>0.0</cell><cell>39.0</cell><cell>40.3</cell><cell>32.0</cell><cell>3.8</cell><cell>11.6</cell><cell>2.8</cell><cell>22.8</cell><cell>2.2</cell><cell>5.7</cell><cell>13.4</cell><cell>17.5</cell></row><row><cell>5: 3 argument relations</cell><cell>2.0</cell><cell>30.0</cell><cell>16.3</cell><cell>18.3</cell><cell>14.1</cell><cell>15.7</cell><cell>13.1</cell><cell>11.0</cell><cell>13.4</cell><cell>14.8</cell><cell>14.4</cell><cell>12.9</cell></row><row><cell>6: yes/no questions</cell><cell>0.0</cell><cell>52.0</cell><cell>51.0</cell><cell>8.7</cell><cell>7.9</cell><cell>8.7</cell><cell>7.6</cell><cell>7.2</cell><cell>2.3</cell><cell>3.3</cell><cell>2.8</cell><cell>2.0</cell></row><row><cell>7: counting</cell><cell>15.0</cell><cell>51.0</cell><cell>36.1</cell><cell>23.5</cell><cell>21.6</cell><cell>20.3</cell><cell>17.3</cell><cell>15.9</cell><cell>25.4</cell><cell>17.9</cell><cell>18.3</cell><cell>10.1</cell></row><row><cell>8: lists/sets</cell><cell>9.0</cell><cell>55.0</cell><cell>37.8</cell><cell>11.4</cell><cell>12.6</cell><cell>12.7</cell><cell>10.0</cell><cell>13.2</cell><cell>11.7</cell><cell>10.1</cell><cell>9.3</cell><cell>6.1</cell></row><row><cell>9: simple negation</cell><cell>0.0</cell><cell>36.0</cell><cell>35.9</cell><cell>21.1</cell><cell>23.3</cell><cell>17.0</cell><cell>13.2</cell><cell>5.1</cell><cell>2.0</cell><cell>3.1</cell><cell>1.9</cell><cell>1.5</cell></row><row><cell>10: indefinite knowledge</cell><cell>2.0</cell><cell>56.0</cell><cell>68.7</cell><cell>22.8</cell><cell>17.4</cell><cell>18.6</cell><cell>15.1</cell><cell>10.6</cell><cell>5.0</cell><cell>6.6</cell><cell>6.5</cell><cell>2.6</cell></row><row><cell>11: basic coreference</cell><cell>0.0</cell><cell>38.0</cell><cell>30.0</cell><cell>4.1</cell><cell>4.3</cell><cell>0.0</cell><cell>0.9</cell><cell>8.4</cell><cell>1.2</cell><cell>0.9</cell><cell>0.3</cell><cell>3.3</cell></row><row><cell>12: conjunction</cell><cell>0.0</cell><cell>26.0</cell><cell>10.1</cell><cell>0.3</cell><cell>0.3</cell><cell>0.1</cell><cell>0.2</cell><cell>0.4</cell><cell>0.0</cell><cell>0.3</cell><cell>0.1</cell><cell>0.0</cell></row><row><cell>13: compound coreference</cell><cell>0.0</cell><cell>6.0</cell><cell>19.7</cell><cell>10.5</cell><cell>9.9</cell><cell>0.3</cell><cell>0.4</cell><cell>6.3</cell><cell>0.2</cell><cell>1.4</cell><cell>0.2</cell><cell>0.5</cell></row><row><cell>14: time reasoning</cell><cell>1.0</cell><cell>73.0</cell><cell>18.3</cell><cell>1.3</cell><cell>1.8</cell><cell>2.0</cell><cell>1.7</cell><cell>36.9</cell><cell>8.1</cell><cell>8.2</cell><cell>6.9</cell><cell>2.0</cell></row><row><cell>15: basic deduction</cell><cell>0.0</cell><cell>79.0</cell><cell>64.8</cell><cell>24.3</cell><cell>0.0</cell><cell>0.0</cell><cell>0.0</cell><cell>46.4</cell><cell>0.5</cell><cell>0.0</cell><cell>0.0</cell><cell>1.8</cell></row><row><cell>16: basic induction</cell><cell>0.0</cell><cell>77.0</cell><cell>50.5</cell><cell>52.0</cell><cell>52.1</cell><cell>1.6</cell><cell>1.3</cell><cell>47.4</cell><cell>51.3</cell><cell>3.5</cell><cell>2.7</cell><cell>51.0</cell></row><row><cell>17: positional reasoning</cell><cell>35.0</cell><cell>49.0</cell><cell>50.9</cell><cell>45.4</cell><cell>50.1</cell><cell>49.0</cell><cell>51.0</cell><cell>44.4</cell><cell>41.2</cell><cell>44.5</cell><cell>40.4</cell><cell>42.6</cell></row><row><cell>18: size reasoning</cell><cell>5.0</cell><cell>48.0</cell><cell>51.3</cell><cell>48.1</cell><cell>13.6</cell><cell>10.1</cell><cell>11.1</cell><cell>9.6</cell><cell>10.3</cell><cell>9.2</cell><cell>9.4</cell><cell>9.2</cell></row><row><cell>19: path finding</cell><cell>64.0</cell><cell>92.0</cell><cell>100.0</cell><cell>89.7</cell><cell>87.4</cell><cell>85.6</cell><cell>82.8</cell><cell>90.7</cell><cell>89.9</cell><cell>90.2</cell><cell>88.0</cell><cell>90.6</cell></row><row><cell>20: agent's motivation</cell><cell>0.0</cell><cell>9.0</cell><cell>3.6</cell><cell>0.1</cell><cell>0.0</cell><cell>0.0</cell><cell>0.0</cell><cell>0.0</cell><cell>0.1</cell><cell>0.0</cell><cell>0.0</cell><cell>0.2</cell></row><row><cell>Mean error (%)</cell><cell>6.7</cell><cell>51.3</cell><cell>40.2</cell><cell>25.1</cell><cell>20.3</cell><cell>16.3</cell><cell>13.9</cell><cell>25.8</cell><cell>15.6</cell><cell>13.3</cell><cell>12.4</cell><cell>15.2</cell></row><row><cell>Failed tasks (err. &gt; 5%)</cell><cell>4</cell><cell>20</cell><cell>18</cell><cell>15</cell><cell>13</cell><cell>12</cell><cell>11</cell><cell>17</cell><cell>11</cell><cell>11</cell><cell>11</cell><cell>10</cell></row><row><cell>On 10k training data</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Mean error (%)</cell><cell>3.2</cell><cell>36.4</cell><cell>39.2</cell><cell>15.4</cell><cell>9.4</cell><cell>7.2</cell><cell>6.6</cell><cell>24.5</cell><cell>10.9</cell><cell>7.9</cell><cell>7.5</cell><cell>11.0</cell></row><row><cell>Failed tasks (err. &gt; 5%)</cell><cell>2</cell><cell>16</cell><cell>17</cell><cell>9</cell><cell>6</cell><cell>4</cell><cell>4</cell><cell>16</cell><cell>7</cell><cell>6</cell><cell>6</cell><cell>6</cell></row></table><note>• The position encoding (PE) representation improves over bag-of-words (BoW), as demonstrated by clear improvements on tasks 4, 5, 15 and 18, where word ordering is particularly important. • The linear start (LS) to training seems to help avoid local minima. See task 16 in Table 1, where PE alone gets 53.6% error, while using LS reduces it to 1.6%. • Jittering the time index with random empty memories (RN) as described in Section 4.1 gives a small but consistent boost in performance, especially for the smaller 1k training set. • Joint training on all tasks helps. • Importantly, more computational hops give improved performance. We give examples of the hops performed (via the values of eq. (1)) over some illustrative examples in Fig. 2 and in Appendix B.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 1 :</head><label>1</label><figDesc>Test error rates (%) on the 20 QA tasks for models using 1k training examples (mean test errors for 10k training examples are shown at the bottom).</figDesc><table><row><cell>Key: BoW = bag-of-words</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Where is John? Answer: bathroom Prediction: bathroom Where is the milk? Answer: hallway Prediction: hallway What color is Greg? Answer: yellow Prediction: yellow Does the suitcase fit in the chocolate? Answer: no Prediction: no</head><label></label><figDesc></figDesc><table><row><cell cols="2">Story (1: 1 supporting fact)</cell><cell cols="4">Support Hop 1 Hop 2 Hop 3</cell><cell cols="3">Story (2: 2 supporting facts)</cell><cell cols="2">Support Hop 1</cell><cell>Hop 2</cell><cell>Hop 3</cell></row><row><cell cols="2">Daniel went to the bathroom.</cell><cell></cell><cell>0.00</cell><cell>0.00</cell><cell>0.03</cell><cell cols="2">John dropped the milk.</cell><cell></cell><cell></cell><cell>0.06</cell><cell>0.00</cell><cell>0.00</cell></row><row><cell cols="2">Mary travelled to the hallway.</cell><cell></cell><cell>0.00</cell><cell>0.00</cell><cell>0.00</cell><cell cols="2">John took the milk there.</cell><cell></cell><cell>yes</cell><cell>0.88</cell><cell>1.00</cell><cell>0.00</cell></row><row><cell cols="2">John went to the bedroom.</cell><cell></cell><cell>0.37</cell><cell>0.02</cell><cell>0.00</cell><cell cols="3">Sandra went back to the bathroom.</cell><cell></cell><cell>0.00</cell><cell>0.00</cell><cell>0.00</cell></row><row><cell cols="2">John travelled to the bathroom.</cell><cell>yes</cell><cell>0.60</cell><cell>0.98</cell><cell>0.96</cell><cell cols="2">John moved to the hallway.</cell><cell></cell><cell>yes</cell><cell>0.00</cell><cell>0.00</cell><cell>1.00</cell></row><row><cell>Mary went to the office.</cell><cell></cell><cell></cell><cell>0.01</cell><cell>0.00</cell><cell>0.00</cell><cell cols="3">Mary went back to the bedroom.</cell><cell></cell><cell>0.00</cell><cell>0.00</cell><cell>0.00</cell></row><row><cell cols="2">Story (16: basic induction)</cell><cell cols="4">Support Hop 1 Hop 2 Hop 3</cell><cell cols="2">Story (18: size reasoning)</cell><cell></cell><cell cols="2">Support Hop 1</cell><cell>Hop 2</cell><cell>Hop 3</cell></row><row><cell>Brian is a frog.</cell><cell></cell><cell>yes</cell><cell>0.00</cell><cell>0.98</cell><cell>0.00</cell><cell cols="3">The suitcase is bigger than the chest.</cell><cell>yes</cell><cell>0.00</cell><cell>0.88</cell><cell>0.00</cell></row><row><cell>Lily is gray.</cell><cell></cell><cell></cell><cell>0.07</cell><cell>0.00</cell><cell>0.00</cell><cell cols="3">The box is bigger than the chocolate.</cell><cell></cell><cell>0.04</cell><cell>0.05</cell><cell>0.10</cell></row><row><cell>Brian is yellow.</cell><cell></cell><cell>yes</cell><cell>0.07</cell><cell>0.00</cell><cell>1.00</cell><cell cols="3">The chest is bigger than the chocolate.</cell><cell>yes</cell><cell>0.17</cell><cell>0.07</cell><cell>0.90</cell></row><row><cell>Julius is green.</cell><cell></cell><cell></cell><cell>0.06</cell><cell>0.00</cell><cell>0.00</cell><cell cols="3">The chest fits inside the container.</cell><cell></cell><cell>0.00</cell><cell>0.00</cell><cell>0.00</cell></row><row><cell>Greg is a frog.</cell><cell></cell><cell>yes</cell><cell>0.76</cell><cell>0.02</cell><cell>0.00</cell><cell cols="2">The chest fits inside the box.</cell><cell></cell><cell></cell><cell>0.00</cell><cell>0.00</cell><cell>0.00</cell></row><row><cell cols="12">Figure 2: Example predictions on the QA tasks of [22]. We show the labeled supporting facts</cell></row><row><cell cols="12">(support) from the dataset which MemN2N does not use during training, and the probabilities p of</cell></row><row><cell cols="12">each hop used by the model during inference. MemN2N successfully learns to focus on the correct</cell></row><row><cell cols="2">supporting sentences.</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell cols="3">Penn Treebank</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>Text8</cell><cell></cell></row><row><cell></cell><cell># of</cell><cell cols="4"># of memory Valid.</cell><cell>Test</cell><cell># of</cell><cell cols="4"># of memory Valid.</cell><cell>Test</cell></row><row><cell>Model</cell><cell cols="2">hidden hops</cell><cell>size</cell><cell></cell><cell cols="4">perp. perp. hidden hops</cell><cell>size</cell><cell cols="2">perp. perp.</cell></row><row><cell>RNN [15]</cell><cell>300</cell><cell>-</cell><cell>-</cell><cell></cell><cell>133</cell><cell>129</cell><cell>500</cell><cell>-</cell><cell>-</cell><cell>-</cell><cell>184</cell></row><row><cell>LSTM [15]</cell><cell>100</cell><cell>-</cell><cell>-</cell><cell></cell><cell>120</cell><cell>115</cell><cell>500</cell><cell>-</cell><cell>-</cell><cell cols="2">122</cell><cell>154</cell></row><row><cell>SCRN [15]</cell><cell>100</cell><cell>-</cell><cell>-</cell><cell></cell><cell>120</cell><cell>115</cell><cell>500</cell><cell>-</cell><cell>-</cell><cell>-</cell><cell>161</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 2 :</head><label>2</label><figDesc>The perplexity on the test sets of Penn Treebank and Text8 corpora. Note that increasing the number of memory hops improves performance.</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 3 :Story (15: basic deduction) Support Hop 1 Hop 2 Hop 3 Story (16: basic induction) Support Hop</head><label>3</label><figDesc>Test error rates (%) on the 20 bAbI QA tasks for models using 10k training examples. * = this is a larger model with non-linearity (embedding dimension is d = 100 and ReLU applied to the internal state after each hop. This was inspired by<ref type="bibr" target="#b16">[17]</ref> and crucial for getting better performance on tasks 17 and 19).</figDesc><table><row><cell>Key: BoW = bag-of-words representation; PE = position encoding representation; LS = linear start</cell></row><row><cell>training; RN = random injection of time index noise; LW = RNN-style layer-wise weight tying (if</cell></row><row><cell>not stated, adjacent weight tying is used); joint = joint training on all tasks (as opposed to per-task</cell></row><row><cell>training);</cell></row></table><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">Note that in this view, the terminology of input and output fromFig. 1is flipped -when viewed as a traditional RNN with this special conditioning of outputs, A becomes part of the output embedding of the RNN and C becomes the input embedding.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2">MemN2N source code is available at https://github.com/facebook/MemNN.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3">More detailed results for the 10k training set can be found in Appendix A.<ref type="bibr" target="#b3">4</ref> Following<ref type="bibr" target="#b16">[17]</ref> we found adding more non-linearity solves tasks 17 and 19, see Appendix A.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5">In the QA tasks, the gradient of each weight matrix is measured separately.<ref type="bibr" target="#b5">6</ref> They tuned the hyper-parameters on Penn Treebank and used them on Text8 without additional tuning, except for the number of hidden units. See<ref type="bibr" target="#b14">[15]</ref> for more detail.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>The authors would like to thank Armand Joulin, Tomas Mikolov, Antoine Bordes and Sumit Chopra for useful comments and valuable discussions, and also the FAIR Infrastructure team for their help and support.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Memory-based neural networks for robot learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">G</forename><surname>Atkeson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schaal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neurocomputing</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="243" to="269" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Neural machine translation by jointly learning to align and translate</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Bahdanau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Learning Representations (ICLR)</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A neural probabilistic language model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ducharme</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Vincent</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Janvin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Mach. Learn. Res</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="1137" to="1155" />
			<date type="published" when="2003-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Empirical evaluation of gated recurrent neural networks on sequence modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ç</forename><surname>Gülçehre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
		<idno>arXiv preprint: 1412.3555</idno>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Learning context-free grammars: Capabilities and limitations of a recurrent neural network with an external stack memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">L</forename><surname>Giles</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G.-Z</forename><surname>Sun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of The Fourteenth Annual Conference of Cognitive Science Society</title>
		<meeting>The Fourteenth Annual Conference of Cognitive Science Society</meeting>
		<imprint>
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">A bit of progress in language modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Goodman</surname></persName>
		</author>
		<idno>cs.CL/0108005</idno>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Generating sequences with recurrent neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Graves</surname></persName>
		</author>
		<idno>arXiv preprint: 1308.0850</idno>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wayne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Danihelka</surname></persName>
		</author>
		<idno>arXiv preprint: 1410.5401</idno>
		<title level="m">Neural turing machines</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">DRAW: A recurrent neural network for image generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Gregor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Danihelka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wierstra</surname></persName>
		</author>
		<idno>abs/1502.04623</idno>
		<imprint>
			<date type="published" when="2015" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Long short-term memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hochreiter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schmidhuber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neural computation</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="1735" to="1780" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Inferring algorithmic patterns with stack-augmented recurrent nets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Joulin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">NIPS</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A clockwork RNN</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Koutník</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Greff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">J</forename><surname>Gomez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schmidhuber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Building a large annotated corpus of english: The Penn Treebank</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">P</forename><surname>Marcus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Marcinkiewicz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Santorini</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Linguist</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="313" to="330" />
			<date type="published" when="1993-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Statistical language models based on neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
		<respStmt>
			<orgName>Brno University of Technology</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph. D. thesis</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Joulin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chopra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mathieu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ranzato</surname></persName>
		</author>
		<idno>arXiv preprint: 1412.7753</idno>
		<title level="m">Learning longer memory in recurrent neural networks</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A connectionist symbol manipulator that discovers the structure of context-free languages</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">C</forename><surname>Mozer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Das</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">NIPS</title>
		<imprint>
			<biblScope unit="page" from="863" to="863" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Towards Neural Network-based Reasoning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Peng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Wong</surname></persName>
		</author>
		<idno>ArXiv preprint: 1508.05508</idno>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The induction of dynamical recognizers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Pollack</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Machine Learning</title>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="227" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Learning matrices and their applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Steinbuch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Piske</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Electronic Computers</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="846" to="862" />
			<date type="published" when="1963" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">LSTM neural networks for language modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sundermeyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Schlüter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Ney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Interspeech</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="194" to="197" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Pattern recognition by means of automatic analogue apparatus</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">K</forename><surname>Taylor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of The Institution of Electrical Engineers</title>
		<meeting>The Institution of Electrical Engineers</meeting>
		<imprint>
			<date type="published" when="1959" />
			<biblScope unit="volume">106</biblScope>
			<biblScope unit="page" from="198" to="209" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Towards AI-complete question answering: A set of prerequisite toy tasks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Weston</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bordes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chopra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
		<idno>arXiv preprint: 1502.05698</idno>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Weston</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chopra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bordes</surname></persName>
		</author>
		<title level="m">International Conference on Learning Representations (ICLR)</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Attend and Tell: Neural Image Caption Generation with Visual Attention</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kiros</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Courville</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Salakhutdinov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Zemel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Show</surname></persName>
		</author>
		<idno>ArXiv preprint: 1502.03044</idno>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zaremba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Vinyals</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1409.2329</idno>
		<title level="m">Recurrent neural network regularization</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
