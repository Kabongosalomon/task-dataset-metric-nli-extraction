<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /nfs/home/kabenamualus/Research/task-dataset-metric-extraction/../grobid-0.6.0/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">XGBoost: A Scalable Tree Boosting System</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tianqi</forename><surname>Chen</surname></persName>
							<email>tqchen@cs.washington.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Washington</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carlos</forename><surname>Guestrin</surname></persName>
							<email>guestrin@cs.washington.edu</email>
							<affiliation key="aff1">
								<orgName type="institution">University of Washington</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">XGBoost: A Scalable Tree Boosting System</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.6.0" ident="GROBID-SDO" when="2021-06-25T20:21+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid-sdo"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>Large-scale Machine Learning</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Tree boosting is a highly effective and widely used machine learning method. In this paper, we describe a scalable endto-end tree boosting system called XGBoost, which is used widely by data scientists to achieve state-of-the-art results on many machine learning challenges. We propose a novel sparsity-aware algorithm for sparse data and weighted quantile sketch for approximate tree learning. More importantly, we provide insights on cache access patterns, data compression and sharding to build a scalable tree boosting system. By combining these insights, XGBoost scales beyond billions of examples using far fewer resources than existing systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Keywords</head><p>Large-scale Machine Learning 2 https://github.com/dmlc/xgboost 3 Solutions come from of top-3 teams of each competitions.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Machine learning and data-driven approaches are becoming very important in many areas. Smart spam classifiers protect our email by learning from massive amounts of spam data and user feedback; advertising systems learn to match the right ads with the right context; fraud detection systems protect banks from malicious attackers; anomaly event detection systems help experimental physicists to find events that lead to new physics. There are two important factors that drive these successful applications: usage of effective (statistical) models that capture the complex data dependencies and scalable learning systems that learn the model of interest from large datasets.</p><p>Among the machine learning methods used in practice, gradient tree boosting <ref type="bibr" target="#b9">[10]</ref> 1 is one technique that shines in many applications. Tree boosting has been shown to give state-of-the-art results on many standard classification benchmarks <ref type="bibr" target="#b15">[16]</ref>. LambdaMART <ref type="bibr" target="#b4">[5]</ref>, a variant of tree boosting for ranking, achieves state-of-the-art result for ranking <ref type="bibr" target="#b0">1</ref> Gradient tree boosting is also known as gradient boosting machine (GBM) or gradient boosted regression tree (GBRT) Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for third-party components of this work must be honored. For all other uses, contact the owner/author(s). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DOI:</head><p>problems. Besides being used as a stand-alone predictor, it is also incorporated into real-world production pipelines for ad click through rate prediction <ref type="bibr" target="#b14">[15]</ref>. Finally, it is the defacto choice of ensemble method and is used in challenges such as the Netflix prize <ref type="bibr" target="#b2">[3]</ref>.</p><p>In this paper, we describe XGBoost, a scalable machine learning system for tree boosting. The system is available as an open source package 2 . The impact of the system has been widely recognized in a number of machine learning and data mining challenges. Take the challenges hosted by the machine learning competition site Kaggle for example. Among the 29 challenge winning solutions 3 published at Kaggle's blog during 2015, 17 solutions used XGBoost. Among these solutions, eight solely used XGBoost to train the model, while most others combined XGBoost with neural nets in ensembles. For comparison, the second most popular method, deep neural nets, was used in 11 solutions. The success of the system was also witnessed in KDDCup 2015, where XGBoost was used by every winning team in the top-10. Moreover, the winning teams reported that ensemble methods outperform a well-configured XGBoost by only a small amount <ref type="bibr" target="#b0">[1]</ref>.</p><p>These results demonstrate that our system gives state-ofthe-art results on a wide range of problems. Examples of the problems in these winning solutions include: store sales prediction; high energy physics event classification; web text classification; customer behavior prediction; motion detection; ad click through rate prediction; malware classification; product categorization; hazard risk prediction; massive online course dropout rate prediction. While domain dependent data analysis and feature engineering play an important role in these solutions, the fact that XGBoost is the consensus choice of learner shows the impact and importance of our system and tree boosting.</p><p>The most important factor behind the success of XGBoost is its scalability in all scenarios. The system runs more than ten times faster than existing popular solutions on a single machine and scales to billions of examples in distributed or memory-limited settings. The scalability of XGBoost is due to several important systems and algorithmic optimizations. These innovations include: a novel tree learning algorithm is for handling sparse data; a theoretically justified weighted quantile sketch procedure enables handling instance weights in approximate tree learning. Parallel and distributed computing makes learning faster which enables quicker model exploration. More importantly, XGBoost exploits out-of-core computation and enables data scientists to process hundred millions of examples on a desktop. Finally, it is even more exciting to combine these techniques to make an end-to-end system that scales to even larger data with the least amount of cluster resources. The major contributions of this paper is listed as follows:</p><p>• We design and build a highly scalable end-to-end tree boosting system.</p><p>• We propose a theoretically justified weighted quantile sketch for efficient proposal calculation.</p><p>• We introduce a novel sparsity-aware algorithm for parallel tree learning.</p><p>• We propose an effective cache-aware block structure for out-of-core tree learning.</p><p>While there are some existing works on parallel tree boosting <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b18">19]</ref>, the directions such as out-of-core computation, cache-aware and sparsity-aware learning have not been explored. More importantly, an end-to-end system that combines all of these aspects gives a novel solution for real-world use-cases. This enables data scientists as well as researchers to build powerful variants of tree boosting algorithms <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8]</ref>. Besides these major contributions, we also make additional improvements in proposing a regularized learning objective, which we will include for completeness.</p><p>The remainder of the paper is organized as follows. We will first review tree boosting and introduce a regularized objective in Sec. 2. We then describe the split finding methods in Sec. 3 as well as the system design in Sec. 4, including experimental results when relevant to provide quantitative support for each optimization we describe. Related work is discussed in Sec. 5. Detailed end-to-end evaluations are included in Sec. 6. Finally we conclude the paper in Sec. 7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">TREE BOOSTING IN A NUTSHELL</head><p>We review gradient tree boosting algorithms in this section. The derivation follows from the same idea in existing literatures in gradient boosting. Specicially the second order method is originated from Friedman et al. <ref type="bibr" target="#b11">[12]</ref>. We make minor improvements in the reguralized objective, which were found helpful in practice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Regularized Learning Objective</head><p>For a given data set with n examples and m features D = {(xi, yi)} (|D| = n, xi ∈ R m , yi ∈ R), a tree ensemble model (shown in <ref type="figure" target="#fig_1">Fig. 1</ref>) uses K additive functions to predict the output.</p><formula xml:id="formula_0">yi = φ(xi) = K k=1 f k (xi), f k ∈ F ,<label>(1)</label></formula><formula xml:id="formula_1">where F = {f (x) = w q(x) }(q : R m → T, w ∈ R T )</formula><p>is the space of regression trees (also known as CART). Here q represents the structure of each tree that maps an example to the corresponding leaf index. T is the number of leaves in the tree. Each f k corresponds to an independent tree structure q and leaf weights w. Unlike decision trees, each regression tree contains a continuous score on each of the leaf, we use wi to represent score on i-th leaf. For a given example, we will use the decision rules in the trees (given by q) to classify it into the leaves and calculate the final prediction by summing up the score in the corresponding leaves (given by w).</p><p>To learn the set of functions used in the model, we minimize the following regularized objective.</p><formula xml:id="formula_2">L(φ) = i l(ŷi, yi) + k Ω(f k )</formula><p>where</p><formula xml:id="formula_3">Ω(f ) = γT + 1 2 λ w 2<label>(2)</label></formula><p>Here l is a differentiable convex loss function that measures the difference between the predictionŷi and the target yi.</p><p>The second term Ω penalizes the complexity of the model (i.e., the regression tree functions). The additional regularization term helps to smooth the final learnt weights to avoid over-fitting. Intuitively, the regularized objective will tend to select a model employing simple and predictive functions. A similar regularization technique has been used in Regularized greedy forest (RGF) <ref type="bibr" target="#b24">[25]</ref> model. Our objective and the corresponding learning algorithm is simpler than RGF and easier to parallelize. When the regularization parameter is set to zero, the objective falls back to the traditional gradient tree boosting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Gradient Tree Boosting</head><p>The tree ensemble model in Eq.</p><p>(2) includes functions as parameters and cannot be optimized using traditional optimization methods in Euclidean space. Instead, the model is trained in an additive manner. Formally, letŷ (t) i be the prediction of the i-th instance at the t-th iteration, we will need to add ft to minimize the following objective.</p><formula xml:id="formula_4">L (t) = n i=1 l(yi,ŷi (t−1) + ft(xi)) + Ω(ft)</formula><p>This means we greedily add the ft that most improves our model according to Eq. (2). Second-order approximation can be used to quickly optimize the objective in the general setting <ref type="bibr" target="#b11">[12]</ref>.</p><formula xml:id="formula_5">L (t) n i=1 [l(yi,ŷ (t−1) ) + gift(xi) + 1 2 hif 2 t (xi)] + Ω(ft)</formula><p>where gi = ∂ŷ(t−1) l(yi,ŷ (t−1) ) and hi = ∂ 2 y (t−1) l(yi,ŷ (t−1) ) are first and second order gradient statistics on the loss function. We can remove the constant terms to obtain the following simplified objective at step t. <ref type="figure">Figure 2</ref>: Structure Score Calculation. We only need to sum up the gradient and second order gradient statistics on each leaf, then apply the scoring formula to get the quality score.</p><formula xml:id="formula_6">L (t) = n i=1 [gift(xi) + 1 2 hif 2 t (xi)] + Ω(ft)<label>(3)</label></formula><p>Define Ij = {i|q(xi) = j} as the instance set of leaf j. We can rewrite Eq (3) by expanding Ω as follows</p><formula xml:id="formula_7">L (t) = n i=1 [gift(xi) + 1 2 hif 2 t (xi)] + γT + 1 2 λ T j=1 w 2 j = T j=1 [( i∈I j gi)wj + 1 2 ( i∈I j hi + λ)w 2 j ] + γT<label>(4)</label></formula><p>For a fixed structure q(x), we can compute the optimal weight w * j of leaf j by</p><formula xml:id="formula_8">w * j = − i∈I j gi i∈I j hi + λ ,<label>(5)</label></formula><p>and calculate the corresponding optimal value bỹ</p><formula xml:id="formula_9">L (t) (q) = − 1 2 T j=1 ( i∈I j gi) 2 i∈I j hi + λ + γT.<label>(6)</label></formula><p>Eq (6) can be used as a scoring function to measure the quality of a tree structure q. This score is like the impurity score for evaluating decision trees, except that it is derived for a wider range of objective functions. <ref type="figure">Fig. 2</ref> illustrates how this score can be calculated.</p><p>Normally it is impossible to enumerate all the possible tree structures q. A greedy algorithm that starts from a single leaf and iteratively adds branches to the tree is used instead. Assume that IL and IR are the instance sets of left and right nodes after the split. Lettting I = IL ∪ IR, then the loss reduction after the split is given by</p><formula xml:id="formula_10">L split = 1 2 ( i∈I L gi) 2 i∈I L hi + λ + ( i∈I R gi) 2 i∈I R hi + λ − ( i∈I gi) 2 i∈I hi + λ −γ (7)</formula><p>This formula is usually used in practice for evaluating the split candidates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Shrinkage and Column Subsampling</head><p>Besides the regularized objective mentioned in Sec. 2.1, two additional techniques are used to further prevent overfitting. The first technique is shrinkage introduced by Friedman <ref type="bibr" target="#b10">[11]</ref>. Shrinkage scales newly added weights by a factor η after each step of tree boosting. Similar to a learning rate in tochastic optimization, shrinkage reduces the influence of each individual tree and leaves space for future trees to improve the model. The second technique is column (feature) subsampling. This technique is used in RandomForest [4, Algorithm 1: Exact Greedy Algorithm for Split Finding Input: I, instance set of current node</p><formula xml:id="formula_11">Input: d, feature dimension gain ← 0 G ← i∈I gi, H ← i∈I hi for k = 1 to m do GL ← 0, HL ← 0 for j in sorted(I, by x jk ) do GL ← GL + gj, HL ← HL + hj GR ← G − GL, HR ← H − HL score ← max(score, G 2 L H L +λ + G 2 R H R +λ − G 2</formula><p>H+λ ) end end Output: Split with max score Algorithm 2: Approximate Algorithm for Split Finding</p><formula xml:id="formula_12">for k = 1 to m do Propose S k = {s k1 , s k2 , · · · s kl } by percentiles on feature k.</formula><p>Proposal can be done per tree (global), or per split(local).</p><formula xml:id="formula_13">end for k = 1 to m do G kv ←= j∈{j|s k,v ≥x jk &gt;s k,v−1 } gj H kv ←= j∈{j|s k,v ≥x jk &gt;s k,v−1 }</formula><p>hj end Follow same step as in previous section to find max score only among proposed splits. 13], It is implemented in a commercial software TreeNet 4 for gradient boosting, but is not implemented in existing opensource packages. According to user feedback, using column sub-sampling prevents over-fitting even more so than the traditional row sub-sampling (which is also supported). The usage of column sub-samples also speeds up computations of the parallel algorithm described later.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">SPLIT FINDING ALGORITHMS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Basic Exact Greedy Algorithm</head><p>One of the key problems in tree learning is to find the best split as indicated by Eq <ref type="bibr" target="#b6">(7)</ref>. In order to do so, a split finding algorithm enumerates over all the possible splits on all the features. We call this the exact greedy algorithm. Most existing single machine tree boosting implementations, such as scikit-learn <ref type="bibr" target="#b19">[20]</ref>, R's gbm <ref type="bibr" target="#b20">[21]</ref> as well as the single machine version of XGBoost support the exact greedy algorithm. The exact greedy algorithm is shown in Alg. 1. It is computationally demanding to enumerate all the possible splits for continuous features. In order to do so efficiently, the algorithm must first sort the data according to feature values and visit the data in sorted order to accumulate the gradient statistics for the structure score in Eq (7).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Approximate Algorithm</head><p>The exact greedy algorithm is very powerful since it enumerates over all possible splitting points greedily. However, it is impossible to efficiently do so when the data does not fit entirely into memory. Same problem also arises in the dis-  tributed setting. To support effective gradient tree boosting in these two settings, an approximate algorithm is needed.</p><p>We summarize an approximate framework, which resembles the ideas proposed in past literatures <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b21">22]</ref>, in Alg. 2. To summarize, the algorithm first proposes candidate splitting points according to percentiles of feature distribution (a specific criteria will be given in Sec. 3.3). The algorithm then maps the continuous features into buckets split by these candidate points, aggregates the statistics and finds the best solution among proposals based on the aggregated statistics.</p><p>There are two variants of the algorithm, depending on when the proposal is given. The global variant proposes all the candidate splits during the initial phase of tree construction, and uses the same proposals for split finding at all levels. The local variant re-proposes after each split. The global method requires less proposal steps than the local method. However, usually more candidate points are needed for the global proposal because candidates are not refined after each split. The local proposal refines the candidates after splits, and can potentially be more appropriate for deeper trees. A comparison of different algorithms on a Higgs boson dataset is given by <ref type="figure" target="#fig_3">Fig. 3</ref>. We find that the local proposal indeed requires fewer candidates. The global proposal can be as accurate as the local one given enough candidates.</p><p>Most existing approximate algorithms for distributed tree learning also follow this framework. Notably, it is also possible to directly construct approximate histograms of gradient statistics <ref type="bibr" target="#b21">[22]</ref>. It is also possible to use other variants of binning strategies instead of quantile <ref type="bibr" target="#b16">[17]</ref>. Quantile strategy benefit from being distributable and recomputable, which we will detail in next subsection. From <ref type="figure" target="#fig_3">Fig. 3</ref>, we also find that the quantile strategy can get the same accuracy as exact greedy given reasonable approximation level.</p><p>Our system efficiently supports exact greedy for the single machine setting, as well as approximate algorithm with both local and global proposal methods for all settings. Users can freely choose between the methods according to their needs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Weighted Quantile Sketch</head><p>One important step in the approximate algorithm is to propose candidate split points. Usually percentiles of a fea- ture are used to make candidates distribute evenly on the data. Formally, let multi-set D k = {(x 1k , h1), (x 2k , h2) · · · (x nk , hn)} represent the k-th feature values and second order gradient statistics of each training instances. We can define a rank functions r k : R → [0, +∞) as</p><formula xml:id="formula_14">r k (z) = 1 (x,h)∈D k h (x,h)∈D k ,x&lt;z h,<label>(8)</label></formula><p>which represents the proportion of instances whose feature value k is smaller than z. The goal is to find candidate split points {s k1 , s k2 , · · · s kl }, such that</p><formula xml:id="formula_15">|r k (s k,j ) − r k (s k,j+1 )| &lt; , s k1 = min i x ik , s kl = max i x ik .</formula><p>(9) Here is an approximation factor. Intuitively, this means that there is roughly 1/ candidate points. Here each data point is weighted by hi. To see why hi represents the weight, we can rewrite Eq (3) as</p><formula xml:id="formula_16">n i=1 1 2 hi(ft(xi) − gi/hi) 2 + Ω(ft) + constant,</formula><p>which is exactly weighted squared loss with labels gi/hi and weights hi. For large datasets, it is non-trivial to find candidate splits that satisfy the criteria. When every instance has equal weights, an existing algorithm called quantile sketch <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b23">24]</ref> solves the problem. However, there is no existing quantile sketch for the weighted datasets. Therefore, most existing approximate algorithms either resorted to sorting on a random subset of data which have a chance of failure or heuristics that do not have theoretical guarantee.</p><p>To solve this problem, we introduced a novel distributed weighted quantile sketch algorithm that can handle weighted data with a provable theoretical guarantee. The general idea is to propose a data structure that supports merge and prune operations, with each operation proven to maintain a certain accuracy level. A detailed description of the algorithm as well as proofs are given in the appendix.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Sparsity-aware Split Finding</head><p>In many real-world problems, it is quite common for the input x to be sparse. There are multiple possible causes for sparsity: 1) presence of missing values in the data; 2) frequent zero entries in the statistics; and, 3) artifacts of feature engineering such as one-hot encoding. It is important to make the algorithm aware of the sparsity pattern in the data. In order to do so, we propose to add a default direction in each tree node, which is shown in <ref type="figure" target="#fig_4">Fig. 4</ref>. When a value is missing in the sparse matrix x, the instance is classified into the default direction. There are two choices </p><formula xml:id="formula_17">gain ← 0 G ← i∈I , gi,H ← i∈I hi for k = 1 to m do // enumerate missing value goto right GL ← 0, HL ← 0 for j in sorted(I k , ascent order by x jk ) do GL ← GL + gj, HL ← HL + hj GR ← G − GL, HR ← H − HL score ← max(score, G 2 L H L +λ + G 2 R H R +λ − G 2 H+λ ) end // enumerate missing value goto left GR ← 0, HR ← 0 for j in sorted(I k , descent order by x jk ) do GR ← GR + gj, HR ← HR + hj GL ← G − GR, HL ← H − HR score ← max(score, G 2 L H L +λ + G 2 R H R +λ − G 2</formula><p>H+λ ) end end Output: Split and default directions with max gain of default direction in each branch. The optimal default directions are learnt from the data. The algorithm is shown in Alg. 3. The key improvement is to only visit the non-missing entries I k . The presented algorithm treats the non-presence as a missing value and learns the best direction to handle missing values. The same algorithm can also be applied when the non-presence corresponds to a user specified value by limiting the enumeration only to consistent solutions.</p><p>To the best of our knowledge, most existing tree learning algorithms are either only optimized for dense data, or need specific procedures to handle limited cases such as categorical encoding. XGBoost handles all sparsity patterns in a unified way. More importantly, our method exploits the sparsity to make computation complexity linear to number of non-missing entries in the input. <ref type="figure">Fig. 5</ref> shows the comparison of sparsity aware and a naive implementation on an Allstate-10K dataset (description of dataset given in Sec. 6). We find that the sparsity aware algorithm runs 50 times faster than the naive version. This confirms the importance of the sparsity aware algorithm.  <ref type="figure">Figure 5</ref>: Impact of the sparsity aware algorithm on Allstate-10K. The dataset is sparse mainly due to one-hot encoding. The sparsity aware algorithm is more than 50 times faster than the naive version that does not take sparsity into consideration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">SYSTEM DESIGN</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Column Block for Parallel Learning</head><p>The most time consuming part of tree learning is to get the data into sorted order. In order to reduce the cost of sorting, we propose to store the data in in-memory units, which we called block. Data in each block is stored in the compressed column (CSC) format, with each column sorted by the corresponding feature value. This input data layout only needs to be computed once before training, and can be reused in later iterations.</p><p>In the exact greedy algorithm, we store the entire dataset in a single block and run the split search algorithm by linearly scanning over the pre-sorted entries. We do the split finding of all leaves collectively, so one scan over the block will collect the statistics of the split candidates in all leaf branches. <ref type="figure" target="#fig_5">Fig. 6</ref> shows how we transform a dataset into the format and find the optimal split using the block structure.</p><p>The block structure also helps when using the approximate algorithms. Multiple blocks can be used in this case, with each block corresponding to subset of rows in the dataset. Different blocks can be distributed across machines, or stored on disk in the out-of-core setting. Using the sorted structure, the quantile finding step becomes a linear scan over the sorted columns. This is especially valuable for local proposal algorithms, where candidates are generated frequently at each branch. The binary search in histogram aggregation also becomes a linear time merge style algorithm.</p><p>Collecting statistics for each column can be parallelized, giving us a parallel algorithm for split finding. Importantly, the column block structure also supports column subsampling, as it is easy to select a subset of columns in a block.  <ref type="figure">Figure 7</ref>: Impact of cache-aware prefetching in exact greedy algorithm. We find that the cache-miss effect impacts the performance on the large datasets (10 million instances). Using cache aware prefetching improves the performance by factor of two when the dataset is large.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 8:</head><p>Short range data dependency pattern that can cause stall due to cache miss.</p><p>Time Complexity Analysis Let d be the maximum depth of the tree and K be total number of trees. For the exact greedy algorithm, the time complexity of original spase aware algorithm is O(Kd x 0 log n). Here we use x 0 to denote number of non-missing entries in the training data. On the other hand, tree boosting on the block structure only cost O(Kd x 0 + x 0 log n). Here O( x 0 log n) is the one time preprocessing cost that can be amortized. This analysis shows that the block structure helps to save an additional log n factor, which is significant when n is large. For the approximate algorithm, the time complexity of original algorithm with binary search is O(Kd x 0 log q). Here q is the number of proposal candidates in the dataset. While q is usually between 32 and 100, the log factor still introduces overhead. Using the block structure, we can reduce the time to O(Kd x 0 + x 0 log B), where B is the maximum number of rows in each block. Again we can save the additional log q factor in computation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Cache-aware Access</head><p>While the proposed block structure helps optimize the computation complexity of split finding, the new algorithm requires indirect fetches of gradient statistics by row index, since these values are accessed in order of feature. This is a non-continuous memory access. A naive implementation of split enumeration introduces immediate read/write dependency between the accumulation and the non-continuous memory fetch operation (see <ref type="figure">Fig. 8</ref>). This slows down split finding when the gradient statistics do not fit into CPU cache and cache miss occur.</p><p>For the exact greedy algorithm, we can alleviate the problem by a cache-aware prefetching algorithm. Specifically, we allocate an internal buffer in each thread, fetch the gradient statistics into it, and then perform accumulation in a mini-batch manner. This prefetching changes the direct read/write dependency to a longer dependency and helps to reduce the runtime overhead when number of rows in the is large. <ref type="figure">Figure 7</ref> gives the comparison of cache-aware vs. (b) Higgs 10M <ref type="figure">Figure 9</ref>: The impact of block size in the approximate algorithm. We find that overly small blocks results in inefficient parallelization, while overly large blocks also slows down training due to cache misses.</p><p>non cache-aware algorithm on the the Higgs and the Allstate dataset. We find that cache-aware implementation of the exact greedy algorithm runs twice as fast as the naive version when the dataset is large.</p><p>For approximate algorithms, we solve the problem by choosing a correct block size. We define the block size to be maximum number of examples in contained in a block, as this reflects the cache storage cost of gradient statistics. Choosing an overly small block size results in small workload for each thread and leads to inefficient parallelization. On the other hand, overly large blocks result in cache misses, as the gradient statistics do not fit into the CPU cache. A good choice of block size balances these two factors. We compared various choices of block size on two data sets. The results are given in <ref type="figure">Fig. 9</ref>. This result validates our discussion and </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Blocks for Out-of-core Computation</head><p>One goal of our system is to fully utilize a machine's resources to achieve scalable learning. Besides processors and memory, it is important to utilize disk space to handle data that does not fit into main memory. To enable out-of-core computation, we divide the data into multiple blocks and store each block on disk. During computation, it is important to use an independent thread to pre-fetch the block into a main memory buffer, so computation can happen in concurrence with disk reading. However, this does not entirely solve the problem since the disk reading takes most of the computation time. It is important to reduce the overhead and increase the throughput of disk IO. We mainly use two techniques to improve the out-of-core computation. Block Compression The first technique we use is block compression. The block is compressed by columns, and decompressed on the fly by an independent thread when loading into main memory. This helps to trade some of the computation in decompression with the disk reading cost. We use a general purpose compression algorithm for compressing the features values. For the row index, we substract the row index by the begining index of the block and use a 16bit integer to store each offset. This requires 2 16 examples per block, which is confirmed to be a good setting. In most of the dataset we tested, we achieve roughly a 26% to 29% compression ratio. Block Sharding The second technique is to shard the data onto multiple disks in an alternative manner. A pre-fetcher thread is assigned to each disk and fetches the data into an in-memory buffer. The training thread then alternatively reads the data from each buffer. This helps to increase the throughput of disk reading when multiple disks are available.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">RELATED WORKS</head><p>Our system implements gradient boosting <ref type="bibr" target="#b9">[10]</ref>, which performs additive optimization in functional space. Gradient tree boosting has been successfully used in classification <ref type="bibr" target="#b11">[12]</ref>, learning to rank <ref type="bibr" target="#b4">[5]</ref>, structured prediction <ref type="bibr" target="#b7">[8]</ref> as well as other fields. XGBoost incorporates a regularized model to prevent overfitting. This this resembles previous work on regularized greedy forest <ref type="bibr" target="#b24">[25]</ref>, but simplifies the objective and algorithm for parallelization. Column sampling is a simple but effective technique borrowed from RandomForest <ref type="bibr" target="#b3">[4]</ref>. While sparsityaware learning is essential in other types of models such as linear models <ref type="bibr" target="#b8">[9]</ref>, few works on tree learning have considered this topic in a principled way. The algorithm proposed in this paper is the first unified approach to handle all kinds of sparsity patterns.</p><p>There are several existing works on parallelizing tree learning <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b18">19]</ref>. Most of these algorithms fall into the approximate framework described in this paper. Notably, it is also possible to partition data by columns <ref type="bibr" target="#b22">[23]</ref> and apply the exact greedy algorithm. This is also supported in our framework, and the techniques such as cache-aware prefecthing can be used to benefit this type of algorithm. While most existing works focus on the algorithmic aspect of parallelization, our work improves in two unexplored system directions: out-of-core computation and cache-aware learning. This gives us insights on how the system and the algorithm can be jointly optimized and provides an end-to-end system that can handle large scale problems with very limited computing resources. We also summarize the comparison between our system and existing opensource implementations in <ref type="table" target="#tab_1">Table 1</ref>.</p><p>Quantile summary (without weights) is a classical problem in the database community <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b23">24]</ref>. However, the approximate tree boosting algorithm reveals a more general problem -finding quantiles on weighted data. To the best of our knowledge, the weighted quantile sketch proposed in this paper is the first method to solve this problem. The weighted quantile summary is also not specific to the tree learning and can benefit other applications in data science and machine learning in the future.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">END TO END EVALUATIONS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">System Implementation</head><p>We implemented XGBoost as an open source package 5 . The package is portable and reusable. It supports various weighted classification and rank objective functions, as well as user defined objective function. It is available in popular languages such as python, R, Julia and integrates naturally with language native data science pipelines such as scikitlearn. The distributed version is built on top of the rabit library 6 for allreduce. The portability of XGBoost makes it available in many ecosystems, instead of only being tied to a specific platform. The distributed XGBoost runs natively on Hadoop, MPI Sun Grid engine. Recently, we also enable distributed XGBoost on jvm bigdata stacks such as Flink and Spark. The distributed version has also been integrated into cloud platform Tianchi 7 of Alibaba. We believe that there will be more integrations in the future. We used four datasets in our experiments. A summary of these datasets is given in <ref type="table" target="#tab_2">Table 2</ref>. In some of the experiments, we use a randomly selected subset of the data either due to slow baselines or to demonstrate the performance of the algorithm with varying dataset size. We use a suffix to denote the size in these cases. For example Allstate-10K means a subset of the Allstate dataset with 10K instances.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Dataset and Setup</head><p>The first dataset we use is the Allstate insurance claim dataset <ref type="bibr" target="#b7">8</ref> . The task is to predict the likelihood and cost of an insurance claim given different risk factors. In the experiment, we simplified the task to only predict the likelihood of an insurance claim. This dataset is used to evaluate the impact of sparsity-aware algorithm in Sec. 3.4. Most of the sparse features in this data come from one-hot encoding. We randomly select 10M instances as training set and use the rest as evaluation set.</p><p>The second dataset is the Higgs boson dataset 9 from high energy physics. The data was produced using Monte Carlo simulations of physics events. It contains 21 kinematic properties measured by the particle detectors in the accelerator. It also contains seven additional derived physics quantities of the particles. The task is to classify whether an event corresponds to the Higgs boson. We randomly select 10M instances as training set and use the rest as evaluation set.</p><p>The third dataset is the Yahoo! learning to rank challenge dataset <ref type="bibr" target="#b5">[6]</ref>, which is one of the most commonly used benchmarks in learning to rank algorithms. The dataset contains 20K web search queries, with each query corresponding to a list of around 22 documents. The task is to rank the documents according to relevance of the query. We use the official train test split in our experiment.</p><p>The last dataset is the criteo terabyte click log dataset <ref type="bibr" target="#b9">10</ref> . We use this dataset to evaluate the scaling property of the system in the out-of-core and the distributed settings. The data contains 13 integer features and 26 ID features of user, item and advertiser information. Since a tree based model is better at handling continuous features, we preprocess the data by calculating the statistics of average CTR and count of ID features on the first ten days, replacing the ID features by the corresponding count statistics during the next ten days for training. The training set after preprocessing contains 1.7 billion instances with 67 features (13 integer, 26 average CTR statistics and 26 counts). The entire dataset is more than one terabyte in LibSVM format.</p><p>We use the first three datasets for the single machine parallel setting, and the last dataset for the distributed and out-of-core settings. All the single machine experiments are conducted on a Dell PowerEdge R420 with two eight-core Intel Xeon (E5-2470) (2.3GHz) and 64GB of memory. If not specified, all the experiments are run using all the avail-    <ref type="bibr" target="#b21">[22]</ref> 2.576 0.7915 able cores in the machine. The machine settings of the distributed and the out-of-core experiments will be described in the corresponding section. In all the experiments, we boost trees with a common setting of maximum depth equals 8, shrinkage equals 0.1 and no column subsampling unless explicitly specified. We can find similar results when we use other settings of maximum depth.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Classification</head><p>In this section, we evaluate the performance of XGBoost on a single machine using the exact greedy algorithm on Higgs-1M data, by comparing it against two other commonly used exact greedy tree boosting implementations. Since scikit-learn only handles non-sparse input, we choose the dense Higgs dataset for a fair comparison. We use the 1M subset to make scikit-learn finish running in reasonable time. Among the methods in comparison, R's GBM uses a greedy approach that only expands one branch of a tree, which makes it faster but can result in lower accuracy, while both scikit-learn and XGBoost learn a full tree. The results are shown in <ref type="table" target="#tab_3">Table 3</ref>. Both XGBoost and scikit-learn give better performance than R's GBM, while XGBoost runs more than 10x faster than scikit-learn. In this experiment, we also find column subsamples gives slightly worse performance than using all the features. This could due to the fact that there are few important features in this dataset and we can benefit from greedily select from all the features.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4">Learning to Rank</head><p>We next evaluate the performance of XGBoost on the  learning to rank problem. We compare against pGBRT <ref type="bibr" target="#b21">[22]</ref>, the best previously pubished system on this task. XGBoost runs exact greedy algorithm, while pGBRT only support an approximate algorithm. The results are shown in <ref type="table" target="#tab_4">Table 4</ref> and <ref type="figure" target="#fig_1">Fig. 10</ref>. We find that XGBoost runs faster. Interestingly, subsampling columns not only reduces running time, and but also gives a bit higher performance for this problem. This could due to the fact that the subsampling helps prevent overfitting, which is observed by many of the users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.5">Out-of-core Experiment</head><p>We also evaluate our system in the out-of-core setting on the criteo data. We conducted the experiment on one AWS c3.8xlarge machine (32 vcores, two 320 GB SSD, 60 GB RAM). The results are shown in <ref type="figure" target="#fig_1">Figure 11</ref>. We can find that compression helps to speed up computation by factor of three, and sharding into two disks further gives 2x speedup. For this type of experiment, it is important to use a very large dataset to drain the system file cache for a real outof-core setting. This is indeed our setup. We can observe a transition point when the system runs out of file cache. Note that the transition in the final method is less dramatic. This is due to larger disk throughput and better utilization of computation resources. Our final method is able to process 1.7 billion examples on a single machine.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.6">Distributed Experiment</head><p>Finally, we evaluate the system in the distributed setting. We set up a YARN cluster on EC2 with m3.2xlarge machines, which is a very common choice for clusters. Each machine contains 8 virtual cores, 30GB of RAM and two 80GB SSD local disks. The dataset is stored on AWS S3 instead of HDFS to avoid purchasing persistent storage.</p><p>We first compare our system against two production-level distributed systems: Spark MLLib <ref type="bibr" target="#b17">[18]</ref> and H2O 11 . We use 11 www.h2o.ai  <ref type="figure" target="#fig_1">Figure 12</ref>: Comparison of different distributed systems on 32 EC2 nodes for 10 iterations on different subset of criteo data. XGBoost runs more 10x than spark per iteration and 2.2x as H2O's optimized version (However, H2O is slow in loading the data, getting worse end-to-end time). Note that spark suffers from drastic slow down when running out of memory. XGBoost runs faster and scales smoothly to the full 1.7 billion examples with given resources by utilizing out-of-core computation. 32 m3.2xlarge machines and test the performance of the systems with various input size. Both of the baseline systems are in-memory analytics frameworks that need to store the data in RAM, while XGBoost can switch to out-of-core setting when it runs out of memory. The results are shown in <ref type="figure" target="#fig_1">Fig. 12</ref>. We can find that XGBoost runs faster than the baseline systems. More importantly, it is able to take advantage of out-of-core computing and smoothly scale to all 1.7 billion examples with the given limited computing resources. The baseline systems are only able to handle subset of the data with the given resources. This experiment shows the advantage to bring all the system improvement together and solve a real-world scale problem. We also evaluate the scaling property of XGBoost by varying the number of machines. The results are shown in <ref type="figure" target="#fig_1">Fig. 13</ref>. We can find XGBoost's performance scales linearly as we add more machines. Importantly, XGBoost is able to handle the entire 1.7 billion data with only four machines. This shows the system's potential to handle even larger data.  <ref type="figure" target="#fig_1">Figure 13</ref>: Scaling of XGBoost with different number of machines on criteo full 1.7 billion dataset. Using more machines results in more file cache and makes the system run faster, causing the trend to be slightly super linear. XGBoost can process the entire dataset using as little as four machines, and scales smoothly by utilizing more available resources.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">CONCLUSION</head><p>In this paper, we described the lessons we learnt when building XGBoost, a scalable tree boosting system that is widely used by data scientists and provides state-of-the-art results on many problems. We proposed a novel sparsity aware algorithm for handling sparse data and a theoretically justified weighted quantile sketch for approximate learning. Our experience shows that cache access patterns, data compression and sharding are essential elements for building a scalable end-to-end system for tree boosting. These lessons can be applied to other machine learning systems as well. By combining these insights, XGBoost is able to solve realworld scale problems using a minimal amount of resources.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>KDD ' 16 ,</head><label>16</label><figDesc>August 13-17, 2016, San Francisco, CA, USA c 2016 Copyright held by the owner/author(s). ACM ISBN .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Tree Ensemble Model. The final prediction for a given example is the sum of predictions from each tree.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>4</head><label></label><figDesc>https://www.salford-systems.com/products/treenet</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Comparison of test AUC convergence on Higgs 10M dataset. The eps parameter corresponds to the accuracy of the approximate sketch. This roughly translates to 1 / eps buckets in the proposal. We find that local proposals require fewer buckets, because it refine split candidates.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Tree structure with default directions. An example will be classified into the default direction when the feature needed for the split is missing.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Block structure for parallel learning. Each column in a block is sorted by the corresponding feature value. A linear scan over one column in the block is sufficient to enumerate all the split points.Algorithm 3: Sparsity-aware Split Finding Input: I, instance set of current node Input: I k = {i ∈ I|x ik = missing} Input: d, feature dimension Also applies to the approximate setting, only collect statistics of non-missing entries into buckets</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 10 :</head><label>10</label><figDesc>Comparison between XGBoost and pG-BRT on Yahoo LTRC dataset.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 11 :</head><label>11</label><figDesc>Comparison of out-of-core methods on different subsets of criteo data. The missing data points are due to out of disk space. We can find that basic algorithm can only handle 200M examples. Adding compression gives 3x speedup, and sharding into two disks gives another 2x speedup. The system runs out of file cache start from 400M examples. The algorithm really has to rely on disk after this point. The compression+shard method has a less dramatic slowdown when running out of file cache, and exhibits a linear trend afterwards.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head></head><label></label><figDesc>Per iteration cost exclude data loading</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc>Comparison of major tree boosting systems.</figDesc><table><row><cell>System</cell><cell>exact greedy</cell><cell>approximate global</cell><cell>approximate local</cell><cell>out-of-core</cell><cell>sparsity aware</cell><cell>parallel</cell></row><row><cell>XGBoost</cell><cell>yes</cell><cell>yes</cell><cell>yes</cell><cell>yes</cell><cell>yes</cell><cell>yes</cell></row><row><cell>pGBRT</cell><cell>no</cell><cell>no</cell><cell>yes</cell><cell>no</cell><cell>no</cell><cell>yes</cell></row><row><cell cols="2">Spark MLLib no</cell><cell>yes</cell><cell>no</cell><cell>no</cell><cell>partially</cell><cell>yes</cell></row><row><cell>H2O</cell><cell>no</cell><cell>yes</cell><cell>no</cell><cell>no</cell><cell>partially</cell><cell>yes</cell></row><row><cell>scikit-learn</cell><cell>yes</cell><cell>no</cell><cell>no</cell><cell>no</cell><cell>no</cell><cell>no</cell></row><row><cell>R GBM</cell><cell>yes</cell><cell>no</cell><cell>no</cell><cell>no</cell><cell>partially</cell><cell>no</cell></row><row><cell cols="4">shows that choosing 2 16 examples per block balances the</cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="2">cache property and parallelization.</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 :</head><label>2</label><figDesc>Dataset used in the Experiments.</figDesc><table><row><cell>Dataset</cell><cell>n</cell><cell>m</cell><cell>Task</cell></row><row><cell>Allstate</cell><cell cols="3">10 M 4227 Insurance claim classification</cell></row><row><cell>Higgs Boson</cell><cell>10 M</cell><cell>28</cell><cell>Event classification</cell></row><row><cell cols="2">Yahoo LTRC 473K</cell><cell>700</cell><cell>Learning to Rank</cell></row><row><cell>Criteo</cell><cell>1.7 B</cell><cell>67</cell><cell>Click through rate prediction</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 3 :</head><label>3</label><figDesc>Comparison of Exact Greedy Methods with 500 trees on Higgs-1M data.</figDesc><table><row><cell>Method</cell><cell></cell><cell></cell><cell cols="3">Time per Tree (sec) Test AUC</cell></row><row><cell>XGBoost</cell><cell></cell><cell></cell><cell cols="2">0.6841</cell><cell>0.8304</cell></row><row><cell cols="3">XGBoost (colsample=0.5)</cell><cell cols="2">0.6401</cell><cell>0.8245</cell></row><row><cell>scikit-learn</cell><cell></cell><cell></cell><cell cols="2">28.51</cell><cell>0.8302</cell></row><row><cell>R.gbm</cell><cell></cell><cell></cell><cell cols="2">1.032</cell><cell>0.6224</cell></row><row><cell>0.5</cell><cell>1</cell><cell>2</cell><cell>4</cell><cell>8</cell><cell>16</cell></row><row><cell></cell><cell></cell><cell cols="2">Number of Threads</cell><cell></cell><cell></cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 4</head><label>4</label><figDesc></figDesc><table><row><cell cols="3">: Comparison of Learning to Rank with 500</cell></row><row><cell cols="2">trees on Yahoo! LTRC Dataset</cell><cell></cell></row><row><cell>Method</cell><cell cols="2">Time per Tree (sec) NDCG@10</cell></row><row><cell>XGBoost</cell><cell>0.826</cell><cell>0.7892</cell></row><row><cell>XGBoost (colsample=0.5)</cell><cell>0.506</cell><cell>0.7913</cell></row><row><cell>pGBRT</cell><cell></cell><cell></cell></row></table><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5">https://github.com/dmlc/xgboost 6 https://github.com/dmlc/rabit 7 https://tianchi.aliyun.com</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8">https://www.kaggle.com/c/ClaimPredictionChallenge 9 https://archive.ics.uci.edu/ml/datasets/HIGGS 10 http://labs.criteo.com/downloads/download-terabyteclick-logs/</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We would like to thank Tyler B. Johnson, Marco Tulio Ribeiro, Sameer Singh, Arvind Krishnamurthy for their valuable feedback. We also sincerely thank Tong He, Bing Xu, Michael Benesty, Yuan Tang, Hongliang Liu, Qiang Kou, Nan Zhu and all other contributors in the XGBoost community. This work was supported in part by ONR (PECASE) N000141010672, NSF IIS 1258741 and the TerraSwarm Research Center sponsored by MARCO and DARPA.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX A. WEIGHTED QUANTILE SKETCH</head><p>In this section, we introduce the weighted quantile sketch algorithm. Approximate answer of quantile queries is for many realworld applications. One classical approach to this problem is GK algorithm <ref type="bibr" target="#b13">[14]</ref> and extensions based on the GK framework <ref type="bibr" target="#b23">[24]</ref>. The main component of these algorithms is a data structure called quantile summary, that is able to answer quantile queries with relative accuracy of . Two operations are defined for a quantile summary:</p><p>• A merge operation that combines two summaries with approximation error 1 and 2 together and create a merged summary with approximation error max( 1 , 2 ).</p><p>• A prune operation that reduces the number of elements in the summary to b + 1 and changes approximation error from to + 1 b . A quantile summary with merge and prune operations forms basic building blocks of the distributed and streaming quantile computing algorithms <ref type="bibr" target="#b23">[24]</ref>.</p><p>In order to use quantile computation for approximate tree boosting, we need to find quantiles on weighted data. This more general problem is not supported by any of the existing algorithm. In this section, we describe a non-trivial weighted quantile summary structure to solve this problem. Importantly, the new algorithm contains merge and prune operations with the same guarantee as GK summary. This allows our summary to be plugged into all the frameworks used GK summary as building block and answer quantile queries over weighted data efficiently.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.1 Formalization and Definitions</head><p>Given an input multi-set D = {(x 1 , w 1 ), (x 2 , w 2 ) · · · (xn, wn)} such that w i ∈ [0, +∞), x i ∈ X . Each x i corresponds to a position of the point and w i is the weight of the point. Assume we have a total order &lt; defined on X . Let us define two rank functions</p><p>We should note that since D is defined to be a multiset of the points. It can contain multiple record with exactly same position x and weight w. We also define another weight function ω D :</p><p>Finally, we also define the weight of multi-set D to be the sum of weights of all the points in the set</p><p>Our task is given a series of input D, to estimate r + (y) and r − (y) for y ∈ X as well as finding points with specific rank. Given these notations, we define quantile summary of weighted examples as follows:</p><p>Definition A.1. Quantile Summary of Weighted Data A quantile summary for D is defined to be tuple Q(D) = (S,r + D ,r − D ,ω D ), where S = {x 1 , x 2 , · · · , x k } is selected from the points in D (i.e. x i ∈ {x|(x, w) ∈ D}) with the following properties:</p><p>1) x i &lt; x i+1 for all i, and x 1 and x k are minimum and maximum point in D: <ref type="bibr" target="#b13">(14)</ref> the equality sign holds for maximum and minimum point (</p><p>. Finally, the function value must also satisfy the following constraints</p><p>Since these functions are only defined on S, it is suffice to use 4k record to store the summary. Specifically, we need to remember each x i and the corresponding function values of each x i .</p><p>We extend the definition of these functions to X → [0, +∞) as follows</p><p>When y &gt; x k :</p><p>Proof. The only non-trivial part is to prove the case when y ∈ (x i , x i+1 ): <ref type="bibr" target="#b18">(19)</ref>. Furthermore, we can verify that</p><p>Using these facts and transitivity of &lt; relation, we can prove Eq. <ref type="formula">(20)</ref> We should note that the extension is based on the ground case defined in S, and we do not require extra space to store the summary in order to use the extended definition. We are now ready to introduce the definition of -approximate quantile summary. </p><p>We use this definition since we know that r − (y) ∈ is an -approximate summary if and only if the following two condition holdsr</p><p>Proof. The key is again consider y ∈ (x i , x i+1 ) Property of Extended Function In this section, we have introduced the extension of functionr + D ,r − D ,ω D to X → [0, +∞). The key theme discussed in this section is the relation of constraints on the original function and constraints on the extended function. Lemma A.1 and A.2 show that the constraints on the original function can lead to in more general constraints on the extended function. This is a very useful property which will be used in the proofs in later sections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2 Construction of Initial Summary</head><p>Given a small multi-set D = {(x 1 , w 1 ), (x 2 , w 2 ), · · · , (xn, wn)}, we can construct initial summary Q</p><p>The constructed summary is 0-approximate summary, since it can answer all the queries accurately. The constructed summary can be feed into future operations described in the latter sections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.3 Merge Operation</head><p>In this section, we define how we can merge the two summaries together. Assume we have Q(D 1 ) = (S 1 ,r + D 1 ,r − D 1 ,ω D 1 ) and Q(D 2 ) = (S 2 ,r + D 1 ,r − D 2 ,ω D 2 ) quantile summary of two dataset D 1 and D 2 . Let D = D 1 ∪ D 2 , and define the merged summary Q(D) = (S,r + D ,r − D ,ω D ) as follows.</p><p>The points in S are combination of points in S 1 and S 2 . And the functionr + D ,r − D ,ω D are defined to bẽ</p><p>Here we use functions defined on S → [0, +∞) on the left sides of equalities and use the extended function definitions on the right sides.</p><p>Due to additive nature of r + , r − and ω, which can be formally written as</p><p>and the extended constraint property in Lemma A.1, we can verify that Q(D) satisfies all the constraints in Definition A.1. Therefore it is a valid quantile summary.</p><p>Lemma A.3. The combined quantile summary satisfies</p><p>ω D (y) =ω D 1 (y) +ω D 2 (y) (32) for all y ∈ X Algorithm 4: Query Function g(Q, d) Theorem A.1. If Q(D 1 ) is 1 -approximate summary, and Q(D 2 ) is 2 -approximate summary. Then the merged summary Q(D) is max( 1 , 2 )-approximate summary.</p><p>Proof. For any y ∈ X , we havẽ</p><p>Here the first inequality is due to Lemma A.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.4 Prune Operation</head><p>Before we start discussing the prune operation, we first introduce a query function g(Q, d). The definition of function is shown in Algorithm 4. For a given rank d, the function returns a x whose rank is close to d. This property is formally described in the following Lemma.</p><p>Lemma A.4. For a given -approximate summary Q(D) = (S,r + D ,r − D ,ω D ), x * = g(Q, d) satisfies the following property</p><p>Proof. We need to discuss four possible cases</p><p>] and x * = x 1 . Note that the rank information for</p><p>Now we are ready to introduce the prune operation. Given a quantile summary Q(D) = (S,r + D ,r − D ,ω D ) with S = {x 1 , x 2 , · · · , x k } elements, and a memory budget b. The prune operation creates another summary Q (D) = (S ,r + D ,r − D ,ω D ) with S = {x 1 , x 2 , · · · , x b+1 }, where x i are selected by query the original summary such that</p><p>The definition ofr + D ,r − D ,ω D in Q is copied from original summary Q, by restricting input domain from S to S . There could be duplicated entries in the S . These duplicated entries can be safely removed to further reduce the memory cost. Since all the elements in Q comes from Q, we can verify that Q satisfies all the constraints in Definition A.1 and is a valid quantile summary.</p><p>Theorem A.2. Let Q (D) be the summary pruned from an -approximate quantile summary Q(D) with b memory budget. Then Q (D) is a ( + 1 b )-approximate summary.</p><p>Proof. We only need to prove the property in Eq. (23) for Q . Using Lemma A.4, we have</p><p>Combining these inequalities gives</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">The present and the future of the kdd cup competition: an outsider&apos;s perspective</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bekkerman</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Scaling Up Machine Learning: Parallel and Distributed Approaches</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bekkerman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bilenko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Langford</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
			<publisher>Cambridge University Press</publisher>
			<pubPlace>New York, NY, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The netflix prize</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bennett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lanning</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the KDD Cup Workshop</title>
		<meeting>the KDD Cup Workshop<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-08" />
			<biblScope unit="page" from="3" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Breiman</surname></persName>
		</author>
		<title level="m">Random forests. Maching Learning</title>
		<imprint>
			<date type="published" when="2001-10" />
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="page" from="5" to="32" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">From ranknet to lambdarank to lambdamart: An overview. Learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Burges</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="23" to="581" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Yahoo! Learning to Rank Challenge Overview</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Chapelle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research -W &amp; CP</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="1" to="24" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">General functional matrix factorization using gradient boosting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceeding of 30th International Conference on Machine Learning (ICML&apos;13)</title>
		<meeting>eeding of 30th International Conference on Machine Learning (ICML&apos;13)</meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="436" to="444" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Efficient second-order gradient boosting for conditional random fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Taskar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Guestrin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceeding of 18th Artificial Intelligence and Statistics Conference (AISTATS&apos;15)</title>
		<meeting>eeding of 18th Artificial Intelligence and Statistics Conference (AISTATS&apos;15)</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="volume">1</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">LIBLINEAR: A library for large linear classification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R.-E</forename><surname>Fan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-W</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-J</forename><surname>Hsieh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X.-R</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-J</forename><surname>Lin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="1871" to="1874" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Greedy function approximation: a gradient boosting machine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Friedman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Statistics</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1189" to="1232" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Stochastic gradient boosting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Friedman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Statistics &amp; Data Analysis</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="367" to="378" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Additive logistic regression: a statistical view of boosting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Friedman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hastie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Tibshirani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Statistics</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="337" to="407" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Importance sampled learning ensembles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">H</forename><surname>Friedman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">E</forename><surname>Popescu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Space-efficient online computation of quantile summaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Greenwald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Khanna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2001 ACM SIGMOD International Conference on Management of Data</title>
		<meeting>the 2001 ACM SIGMOD International Conference on Management of Data</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="58" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Practical lessons from predicting clicks on ads at facebook</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Atallah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Herbrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bowers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">Q N</forename><surname>Candela</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eighth International Workshop on Data Mining for Online Advertising, ADKDD&apos;14</title>
		<meeting>the Eighth International Workshop on Data Mining for Online Advertising, ADKDD&apos;14</meeting>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Robust Logitboost and adaptive base class (ABC) Logitboost</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-Sixth Conference Annual Conference on Uncertainty in Artificial Intelligence (UAI&apos;10)</title>
		<meeting>the Twenty-Sixth Conference Annual Conference on Uncertainty in Artificial Intelligence (UAI&apos;10)</meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="302" to="311" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Mcrank: Learning to rank using multiple classification and gradient boosting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Burges</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="897" to="904" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">MLlib: Machine learning in apache spark</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Meng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bradley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Yavuz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Sparks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Venkataraman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Freeman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tsai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Amde</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Owen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Xin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Xin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Franklin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Zadeh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zaharia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Talwalkar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">34</biblScope>
			<biblScope unit="page" from="1" to="7" />
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Planet: Massively parallel learning of tree ensembles with mapreduce</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Panda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Herbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Basu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">J</forename><surname>Bayardo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceeding of VLDB Endowment</title>
		<meeting>eeding of VLDB Endowment</meeting>
		<imprint>
			<date type="published" when="2009-08" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="1426" to="1437" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Scikit-learn: Machine learning in Python</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Pedregosa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Varoquaux</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gramfort</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Michel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Thirion</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Grisel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Blondel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Prettenhofer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Weiss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Dubourg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Vanderplas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Passos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Cournapeau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Brucher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Perrot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Duchesnay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="2825" to="2830" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Generalized Boosted Models: A guide to the gbm package</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Ridgeway</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Parallel boosted regression trees for web search ranking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Tyree</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Weinberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Paykin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 20th international conference on World wide web</title>
		<meeting>the 20th international conference on World wide web</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="387" to="396" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Stochastic gradient boosted distributed decision trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-H</forename><surname>Chow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Zheng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 18th ACM Conference on Information and Knowledge Management, CIKM &apos;09</title>
		<meeting>the 18th ACM Conference on Information and Knowledge Management, CIKM &apos;09</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">A fast algorithm for approximate quantiles in high speed data streams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 19th International Conference on Scientific and Statistical Database Management</title>
		<meeting>the 19th International Conference on Scientific and Statistical Database Management</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Learning nonlinear functions using regularized greedy forest</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Pattern Analysis and Machine Intelligence</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">5</biblScope>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
