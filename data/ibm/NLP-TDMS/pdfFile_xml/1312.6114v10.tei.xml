<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /nfs/home/kabenamualus/Research/task-dataset-metric-extraction/../grobid-0.6.0/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Auto-Encoding Variational Bayes</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Diederik</forename><forename type="middle">P</forename><surname>Kingma</surname></persName>
							<email>dpkingma@gmail.com</email>
							<affiliation key="aff0">
								<orgName type="laboratory">Machine Learning Group</orgName>
								<orgName type="institution">Universiteit van Amsterdam</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Max</forename><surname>Welling</surname></persName>
							<email>welling.max@gmail.com</email>
							<affiliation key="aff1">
								<orgName type="laboratory">Machine Learning Group Universiteit van Amsterdam</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Auto-Encoding Variational Bayes</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.6.0" ident="GROBID-SDO" when="2021-06-25T19:27+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid-sdo"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>How can we perform efficient inference and learning in directed probabilistic models, in the presence of continuous latent variables with intractable posterior distributions, and large datasets? We introduce a stochastic variational inference and learning algorithm that scales to large datasets and, under some mild differentiability conditions, even works in the intractable case. Our contributions is two-fold. First, we show that a reparameterization of the variational lower bound yields a lower bound estimator that can be straightforwardly optimized using standard stochastic gradient methods. Second, we show that for i.i.d. datasets with continuous latent variables per datapoint, posterior inference can be made especially efficient by fitting an approximate inference model (also called a recognition model) to the intractable posterior using the proposed lower bound estimator. Theoretical advantages are reflected in experimental results.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>How can we perform efficient approximate inference and learning with directed probabilistic models whose continuous latent variables and/or parameters have intractable posterior distributions? The variational Bayesian (VB) approach involves the optimization of an approximation to the intractable posterior. Unfortunately, the common mean-field approach requires analytical solutions of expectations w.r.t. the approximate posterior, which are also intractable in the general case. We show how a reparameterization of the variational lower bound yields a simple differentiable unbiased estimator of the lower bound; this SGVB (Stochastic Gradient Variational Bayes) estimator can be used for efficient approximate posterior inference in almost any model with continuous latent variables and/or parameters, and is straightforward to optimize using standard stochastic gradient ascent techniques.</p><p>For the case of an i.i.d. dataset and continuous latent variables per datapoint, we propose the Auto-Encoding VB (AEVB) algorithm. In the AEVB algorithm we make inference and learning especially efficient by using the SGVB estimator to optimize a recognition model that allows us to perform very efficient approximate posterior inference using simple ancestral sampling, which in turn allows us to efficiently learn the model parameters, without the need of expensive iterative inference schemes (such as MCMC) per datapoint. The learned approximate posterior inference model can also be used for a host of tasks such as recognition, denoising, representation and visualization purposes. When a neural network is used for the recognition model, we arrive at the variational auto-encoder.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Method</head><p>The strategy in this section can be used to derive a lower bound estimator (a stochastic objective function) for a variety of directed graphical models with continuous latent variables. We will restrict ourselves here to the common case where we have an i.i.d. dataset with latent variables per datapoint, and where we like to perform maximum likelihood (ML) or maximum a posteriori (MAP) inference on the (global) parameters, and variational inference on the latent variables. It is, for example, straightforward to extend this scenario to the case where we also perform variational inference on the global parameters; that algorithm is put in the appendix, but experiments with that case are left to future work. Note that our method can be applied to online, non-stationary settings, e.g. streaming data, but here we assume a fixed dataset for simplicity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Problem scenario</head><p>Let us consider some dataset X = {x (i) } N i=1 consisting of N i.i.d. samples of some continuous or discrete variable x. We assume that the data are generated by some random process, involving an unobserved continuous random variable z. The process consists of two steps: (1) a value z (i) is generated from some prior distribution p θ * (z); (2) a value x (i) is generated from some conditional distribution p θ * (x|z). We assume that the prior p θ * (z) and likelihood p θ * (x|z) come from parametric families of distributions p θ (z) and p θ (x|z), and that their PDFs are differentiable almost everywhere w.r.t. both θ and z. Unfortunately, a lot of this process is hidden from our view: the true parameters θ * as well as the values of the latent variables z (i) are unknown to us.</p><p>Very importantly, we do not make the common simplifying assumptions about the marginal or posterior probabilities. Conversely, we are here interested in a general algorithm that even works efficiently in the case of: 1. Intractability: the case where the integral of the marginal likelihood p θ (x) = p θ (z)p θ (x|z) dz is intractable (so we cannot evaluate or differentiate the marginal likelihood), where the true posterior density p θ (z|x) = p θ (x|z)p θ (z)/p θ (x) is intractable (so the EM algorithm cannot be used), and where the required integrals for any reasonable mean-field VB algorithm are also intractable. These intractabilities are quite common and appear in cases of moderately complicated likelihood functions p θ (x|z), e.g. a neural network with a nonlinear hidden layer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">A large dataset:</head><p>we have so much data that batch optimization is too costly; we would like to make parameter updates using small minibatches or even single datapoints. Samplingbased solutions, e.g. Monte Carlo EM, would in general be too slow, since it involves a typically expensive sampling loop per datapoint.</p><p>We are interested in, and propose a solution to, three related problems in the above scenario:</p><p>1. Efficient approximate ML or MAP estimation for the parameters θ. The parameters can be of interest themselves, e.g. if we are analyzing some natural process. They also allow us to mimic the hidden random process and generate artificial data that resembles the real data.</p><p>2. Efficient approximate posterior inference of the latent variable z given an observed value x for a choice of parameters θ. This is useful for coding or data representation tasks.</p><p>3. Efficient approximate marginal inference of the variable x. This allows us to perform all kinds of inference tasks where a prior over x is required. Common applications in computer vision include image denoising, inpainting and super-resolution.</p><p>For the purpose of solving the above problems, let us introduce a recognition model q φ (z|x): an approximation to the intractable true posterior p θ (z|x). Note that in contrast with the approximate posterior in mean-field variational inference, it is not necessarily factorial and its parameters φ are not computed from some closed-form expectation. Instead, we'll introduce a method for learning the recognition model parameters φ jointly with the generative model parameters θ.</p><p>From a coding theory perspective, the unobserved variables z have an interpretation as a latent representation or code. In this paper we will therefore also refer to the recognition model q φ (z|x) as a probabilistic encoder, since given a datapoint x it produces a distribution (e.g. a Gaussian) over the possible values of the code z from which the datapoint x could have been generated. In a similar vein we will refer to p θ (x|z) as a probabilistic decoder, since given a code z it produces a distribution over the possible corresponding values of x.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">The variational bound</head><p>The marginal likelihood is composed of a sum over the marginal likelihoods of individual datapoints</p><formula xml:id="formula_0">log p θ (x (1) , · · · , x (N ) ) = N i=1 log p θ (x (i) )</formula><p>, which can each be rewritten as:</p><formula xml:id="formula_1">log p θ (x (i) ) = D KL (q φ (z|x (i) )||p θ (z|x (i) )) + L(θ, φ; x (i) )</formula><p>(1) The first RHS term is the KL divergence of the approximate from the true posterior. Since this KL-divergence is non-negative, the second RHS term L(θ, φ; x (i) ) is called the (variational) lower bound on the marginal likelihood of datapoint i, and can be written as:</p><formula xml:id="formula_2">log p θ (x (i) ) ≥ L(θ, φ; x (i) ) = E q φ (z|x) [− log q φ (z|x) + log p θ (x, z)]</formula><p>(2) which can also be written as:</p><formula xml:id="formula_3">L(θ, φ; x (i) ) = −D KL (q φ (z|x (i) )||p θ (z)) + E q φ (z|x (i) ) log p θ (x (i) |z)<label>(3)</label></formula><p>We want to differentiate and optimize the lower bound L(θ, φ; x (i) ) w.r.t. both the variational parameters φ and generative parameters θ. However, the gradient of the lower bound w.r.t. φ is a bit problematic. The usual (naïve) Monte Carlo gradient estimator for this type of problem is:</p><formula xml:id="formula_4">∇ φ E q φ (z) [f (z)] = E q φ (z) f (z)∇ q φ (z) log q φ (z) 1 L L l=1 f (z)∇ q φ (z (l) ) log q φ (z (l) ) where z (l) ∼ q φ (z|x (i)</formula><p>). This gradient estimator exhibits exhibits very high variance (see e.g. <ref type="bibr" target="#b1">[BJP12]</ref>) and is impractical for our purposes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">The SGVB estimator and AEVB algorithm</head><p>In this section we introduce a practical estimator of the lower bound and its derivatives w.r.t. the parameters. We assume an approximate posterior in the form q φ (z|x), but please note that the technique can be applied to the case q φ (z), i.e. where we do not condition on x, as well. The fully variational Bayesian method for inferring a posterior over the parameters is given in the appendix.</p><p>Under certain mild conditions outlined in section 2.4 for a chosen approximate posterior q φ (z|x) we can reparameterize the random variable z ∼ q φ (z|x) using a differentiable transformation g φ ( , x) of an (auxiliary) noise variable :</p><formula xml:id="formula_5">z = g φ ( , x) with ∼ p( )<label>(4)</label></formula><p>See section 2.4 for general strategies for chosing such an approriate distribution p( ) and function g φ ( , x). We can now form Monte Carlo estimates of expectations of some function f (z) w.r.t. q φ (z|x) as follows:</p><formula xml:id="formula_6">E q φ (z|x (i) ) [f (z)] = E p( ) f (g φ ( , x (i) )) 1 L L l=1 f (g φ ( (l) , x (i) )) where (l) ∼ p( ) (5)</formula><p>We apply this technique to the variational lower bound (eq. (2)), yielding our generic Stochastic Gradient Variational Bayes (SGVB) estimator L A (θ, φ; x (i) ) L(θ, φ; x (i) ):</p><formula xml:id="formula_7">L A (θ, φ; x (i) ) = 1 L L l=1 log p θ (x (i) , z (i,l) ) − log q φ (z (i,l) |x (i) )</formula><p>where z (i,l) = g φ ( (i,l) , x (i) ) and (l) ∼ p( )</p><p>Algorithm 1 Minibatch version of the Auto-Encoding VB (AEVB) algorithm. Either of the two SGVB estimators in section 2.3 can be used. We use settings M = 100 and L = 1 in experiments.</p><formula xml:id="formula_9">θ, φ ← Initialize parameters repeat X M ← Random minibatch of M datapoints (drawn from full dataset) ← Random samples from noise distribution p( ) g ← ∇ θ,φ L M (θ, φ; X M , ) (Gradients of minibatch estimator (8)) θ, φ ← Update parameters using gradients g (e.g. SGD or Adagrad [DHS10]) until convergence of parameters (θ, φ) return θ, φ Often, the KL-divergence D KL (q φ (z|x (i) )||p θ (z)) of eq.</formula><p>(3) can be integrated analytically (see appendix B), such that only the expected reconstruction error E q φ (z|x (i) ) log p θ (x (i) |z) requires estimation by sampling. The KL-divergence term can then be interpreted as regularizing φ, encouraging the approximate posterior to be close to the prior p θ (z). This yields a second version of the SGVB estimator L B (θ, φ; x (i) ) L(θ, φ; x (i) ), corresponding to eq. (3), which typically has less variance than the generic estimator:</p><formula xml:id="formula_10">L B (θ, φ; x (i) ) = −D KL (q φ (z|x (i) )||p θ (z)) + 1 L L l=1 (log p θ (x (i) |z (i,l) )) where z (i,l) = g φ ( (i,l) , x (i) ) and (l) ∼ p( ) (7)</formula><p>Given multiple datapoints from a dataset X with N datapoints, we can construct an estimator of the marginal likelihood lower bound of the full dataset, based on minibatches:</p><formula xml:id="formula_11">L(θ, φ; X) L M (θ, φ; X M ) = N M M i=1 L(θ, φ; x (i) ) (8) where the minibatch X M = {x (i) } M i=1</formula><p>is a randomly drawn sample of M datapoints from the full dataset X with N datapoints. In our experiments we found that the number of samples L per datapoint can be set to 1 as long as the minibatch size M was large enough, e.g. M = 100. Derivatives ∇ θ,φ L(θ; X M ) can be taken, and the resulting gradients can be used in conjunction with stochastic optimization methods such as SGD or Adagrad <ref type="bibr" target="#b4">[DHS10]</ref>. See algorithm 1 for a basic approach to compute the stochastic gradients.</p><p>A connection with auto-encoders becomes clear when looking at the objective function given at eq. (7). The first term is (the KL divergence of the approximate posterior from the prior) acts as a regularizer, while the second term is a an expected negative reconstruction error. The function g φ (.) is chosen such that it maps a datapoint x (i) and a random noise vector (l) to a sample from the approximate posterior for that datapoint:</p><formula xml:id="formula_12">z (i,l) = g φ ( (l) , x (i) ) where z (i,l) ∼ q φ (z|x (i) ). Subse- quently, the sample z (i,l) is then input to function log p θ (x (i) |z (i,l) )</formula><p>, which equals the probability density (or mass) of datapoint x (i) under the generative model, given z (i,l) . This term is a negative reconstruction error in auto-encoder parlance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">The reparameterization trick</head><p>In order to solve our problem we invoked an alternative method for generating samples from q φ (z|x). The essential parameterization trick is quite simple. Let z be a continuous random variable, and z ∼ q φ (z|x) be some conditional distribution. It is then often possible to express the random variable z as a deterministic variable z = g φ ( , x), where is an auxiliary variable with independent marginal p( ), and g φ (.) is some vector-valued function parameterized by φ.</p><p>This reparameterization is useful for our case since it can be used to rewrite an expectation w.r.t q φ (z|x) such that the Monte Carlo estimate of the expectation is differentiable w.r.t. φ. A proof is as follows. Given the deterministic mapping</p><formula xml:id="formula_13">z = g φ ( , x) we know that q φ (z|x) i dz i = p( ) i d i . Therefore 1 , q φ (z|x)f (z) dz = p( )f (z) d = p( )f (g φ ( , x)) d .</formula><p>It follows 1 Note that for infinitesimals we use the notational convention dz = i dzi that a differentiable estimator can be constructed:</p><formula xml:id="formula_14">q φ (z|x)f (z) dz 1 L L l=1 f (g φ (x, (l) )) where (l) ∼ p( ).</formula><p>In section 2.3 we applied this trick to obtain a differentiable estimator of the variational lower bound.</p><p>Take, for example, the univariate Gaussian case: let z ∼ p(z|x) = N (µ, σ 2 ). In this case, a valid reparameterization is z = µ + σ , where is an auxiliary noise variable ∼ N (0, 1). Therefore,</p><formula xml:id="formula_15">E N (z;µ,σ 2 ) [f (z)] = E N ( ;0,1) [f (µ + σ )] 1 L L l=1 f (µ + σ (l) ) where (l) ∼ N (0, 1).</formula><p>For which q φ (z|x) can we choose such a differentiable transformation g φ (.) and auxiliary variable ∼ p( )? Three basic approaches are: </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Example: Variational Auto-Encoder</head><p>In this section we'll give an example where we use a neural network for the probabilistic encoder q φ (z|x) (the approximation to the posterior of the generative model p θ (x, z)) and where the parameters φ and θ are optimized jointly with the AEVB algorithm.</p><p>Let the prior over the latent variables be the centered isotropic multivariate Gaussian p θ (z) = N (z; 0, I). Note that in this case, the prior lacks parameters. We let p θ (x|z) be a multivariate Gaussian (in case of real-valued data) or Bernoulli (in case of binary data) whose distribution parameters are computed from z with a MLP (a fully-connected neural network with a single hidden layer, see appendix C). Note the true posterior p θ (z|x) is in this case intractable. While there is much freedom in the form q φ (z|x), we'll assume the true (but intractable) posterior takes on a approximate Gaussian form with an approximately diagonal covariance. In this case, we can let the variational approximate posterior be a multivariate Gaussian with a diagonal covariance structure 2 :</p><formula xml:id="formula_16">log q φ (z|x (i) ) = log N (z; µ (i) , σ 2(i) I)<label>(9)</label></formula><p>where the mean and s.d. of the approximate posterior, µ (i) and σ (i) , are outputs of the encoding MLP, i.e. nonlinear functions of datapoint x (i) and the variational parameters φ (see appendix C).</p><p>As explained in section 2.4, we sample from the posterior</p><formula xml:id="formula_17">z (i,l) ∼ q φ (z|x (i) ) using z (i,l) = g φ (x (i) , (l) ) = µ (i) + σ (i) (l) where (l) ∼ N (0, I).</formula><p>With we signify an element-wise product. In this model both p θ (z) (the prior) and q φ (z|x) are Gaussian; in this case, we can use the estimator of eq. (7) where the KL divergence can be computed and differentiated without estimation (see appendix B). The resulting estimator for this model and datapoint x (i) is:</p><formula xml:id="formula_18">L(θ, φ; x (i) ) 1 2 J j=1 1 + log((σ (i) j ) 2 ) − (µ (i) j ) 2 − (σ (i) j ) 2 + 1 L L l=1 log p θ (x (i) |z (i,l) ) where z (i,l) = µ (i) + σ (i)<label>(l)</label></formula><p>and (l) ∼ N (0, I)</p><p>As explained above and in appendix C, the decoding term log p θ (x (i) |z (i,l) ) is a Bernoulli or Gaussian MLP, depending on the type of data we are modelling.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Related work</head><p>The wake-sleep algorithm <ref type="bibr" target="#b8">[HDFN95]</ref> is, to the best of our knowledge, the only other on-line learning method in the literature that is applicable to the same general class of continuous latent variable models. Like our method, the wake-sleep algorithm employs a recognition model that approximates the true posterior. A drawback of the wake-sleep algorithm is that it requires a concurrent optimization of two objective functions, which together do not correspond to optimization of (a bound of) the marginal likelihood. An advantage of wake-sleep is that it also applies to models with discrete latent variables. Wake-Sleep has the same computational complexity as AEVB per datapoint.</p><p>Stochastic variational inference <ref type="bibr" target="#b7">[HBWP13]</ref> has recently received increasing interest. Recently, <ref type="bibr" target="#b1">[BJP12]</ref> introduced a control variate schemes to reduce the high variance of the naïve gradient estimator discussed in section 2.1, and applied to exponential family approximations of the posterior. In [RGB13] some general methods, i.e. a control variate scheme, were introduced for reducing the variance of the original gradient estimator. In <ref type="bibr" target="#b14">[SK13]</ref>, a similar reparameterization as in this paper was used in an efficient version of a stochastic variational inference algorithm for learning the natural parameters of exponential-family approximating distributions.</p><p>The AEVB algorithm exposes a connection between directed probabilistic models (trained with a variational objective) and auto-encoders. A connection between linear auto-encoders and a certain class of generative linear-Gaussian models has long been known. In <ref type="bibr" target="#b13">[Row98]</ref> it was shown that PCA corresponds to the maximum-likelihood (ML) solution of a special case of the linear-Gaussian model with a prior p(z) = N (0, I) and a conditional distribution p(x|z) = N (x; Wz, I), specifically the case with infinitesimally small .</p><p>In relevant recent work on autoencoders [VLL + 10] it was shown that the training criterion of unregularized autoencoders corresponds to maximization of a lower bound (see the infomax principle <ref type="bibr" target="#b10">[Lin89]</ref>) of the mutual information between input X and latent representation Z. Maximizing (w.r.t. parameters) of the mutual information is equivalent to maximizing the conditional entropy, which is lower bounded by the expected loglikelihood of the data under the autoencoding model [VLL + 10], i.e. the negative reconstrution error. However, it is well known that this reconstruction criterion is in itself not sufficient for learning useful representations <ref type="bibr" target="#b0">[BCV13]</ref>. Regularization techniques have been proposed to make autoencoders learn useful representations, such as denoising, contractive and sparse autoencoder variants <ref type="bibr" target="#b0">[BCV13]</ref>. The SGVB objective contains a regularization term dictated by the variational bound (e.g. eq. (10)), lacking the usual nuisance regularization hyperparameter required to learn useful representations. Related are also encoder-decoder architectures such as the predictive sparse decomposition (PSD) <ref type="bibr" target="#b9">[KRL08]</ref>, from which we drew some inspiration. Also relevant are the recently introduced Generative Stochastic Networks <ref type="bibr" target="#b2">[BTL13]</ref> where noisy auto-encoders learn the transition operator of a Markov chain that samples from the data distribution. In [SL10] a recognition model was employed for efficient learning with Deep Boltzmann Machines. These methods are targeted at either unnormalized models (i.e. undirected models like Boltzmann machines) or limited to sparse coding models, in contrast to our proposed algorithm for learning a general class of directed probabilistic models.</p><p>The recently proposed DARN method <ref type="bibr" target="#b6">[GMW13]</ref>, also learns a directed probabilistic model using an auto-encoding structure, however their method applies to binary latent variables. Even more recently, <ref type="bibr" target="#b12">[RMW14]</ref> also make the connection between auto-encoders, directed proabilistic models and stochastic variational inference using the reparameterization trick we describe in this paper. Their work was developed independently of ours and provides an additional perspective on AEVB.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experiments</head><p>We trained generative models of images from the MNIST and Frey Face datasets 3 and compared learning algorithms in terms of the variational lower bound, and the estimated marginal likelihood.</p><p>The generative model (encoder) and variational approximation (decoder) from section 3 were used, where the described encoder and decoder have an equal number of hidden units. Since the Frey Face data are continuous, we used a decoder with Gaussian outputs, identical to the encoder, except that the means were constrained to the interval (0, 1) using a sigmoidal activation function at the decoder output. Note that with hidden units we refer to the hidden layer of the neural networks of the encoder and decoder.</p><p>Parameters are updated using stochastic gradient ascent where gradients are computed by differentiating the lower bound estimator ∇ θ,φ L(θ, φ; X) (see algorithm 1), plus a small weight decay term corresponding to a prior p(θ) = N (0, I). Optimization of this objective is equivalent to approximate MAP estimation, where the likelihood gradient is approximated by the gradient of the lower bound.</p><p>We compared performance of AEVB to the wake-sleep algorithm <ref type="bibr" target="#b8">[HDFN95]</ref>. We employed the same encoder (also called recognition model) for the wake-sleep algorithm and the variational autoencoder. All parameters, both variational and generative, were initialized by random sampling from N (0, 0.01), and were jointly stochastically optimized using the MAP criterion. Stepsizes were adapted with Adagrad <ref type="bibr" target="#b4">[DHS10]</ref>; the Adagrad global stepsize parameters were chosen from {0.01, 0.02, 0.1} based on performance on the training set in the first few iterations. Minibatches of size M = 100 were used, with L = 1 samples per datapoint.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Likelihood lower bound</head><p>We trained generative models (decoders) and corresponding encoders (a.k.a. recognition models) having 500 hidden units in case of MNIST, and 200 hidden units in case of the Frey Face dataset (to prevent overfitting, since it is a considerably smaller dataset). The chosen number of hidden units is based on prior literature on auto-encoders, and the relative performance of different algorithms was not very sensitive to these choices. <ref type="figure" target="#fig_1">Figure 2</ref> shows the results when comparing the lower bounds. Interestingly, superfluous latent variables did not result in overfitting, which is explained by the regularizing nature of the variational bound.</p><p>Marginal likelihood For very low-dimensional latent space it is possible to estimate the marginal likelihood of the learned generative models using an MCMC estimator. More information about the marginal likelihood estimator is available in the appendix. For the encoder and decoder we again used neural networks, this time with 100 hidden units, and 3 latent variables; for higher dimensional latent space the estimates became unreliable. Again, the MNIST dataset was used. The AEVB and Wake-Sleep methods were compared to Monte Carlo EM (MCEM) with a Hybrid Monte Carlo (HMC) <ref type="bibr" target="#b5">[DKPR87]</ref> sampler; details are in the appendix. We compared the convergence speed for the three algorithms, for a small and large training set size. Results are in figure 3. Visualisation of high-dimensional data If we choose a low-dimensional latent space (e.g. 2D), we can use the learned encoders (recognition model) to project high-dimensional data to a lowdimensional manifold. See appendix A for visualisations of the 2D latent manifolds for the MNIST and Frey Face datasets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>We have introduced a novel estimator of the variational lower bound, Stochastic Gradient VB (SGVB), for efficient approximate inference with continuous latent variables. The proposed estimator can be straightforwardly differentiated and optimized using standard stochastic gradient methods. For the case of i.i.d. datasets and continuous latent variables per datapoint we introduce an efficient algorithm for efficient inference and learning, Auto-Encoding VB (AEVB), that learns an approximate inference model using the SGVB estimator. The theoretical advantages are reflected in experimental results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Future work</head><p>Since the SGVB estimator and the AEVB algorithm can be applied to almost any inference and learning problem with continuous latent variables, there are plenty of future directions: (i) learning hierarchical generative architectures with deep neural networks (e.g. convolutional networks) used for the encoders and decoders, trained jointly with AEVB; (ii) time-series models (i.e. dynamic Bayesian networks); (iii) application of SGVB to the global parameters; (iv) supervised models with latent variables, useful for learning complicated noise distributions.  <ref type="figure">Figure 4</ref>: Visualisations of learned data manifold for generative models with two-dimensional latent space, learned with AEVB. Since the prior of the latent space is Gaussian, linearly spaced coordinates on the unit square were transformed through the inverse CDF of the Gaussian to produce values of the latent variables z. For each of these values z, we plotted the corresponding generative p θ (x|z) with the learned parameters θ. The variational lower bound (the objective to be maximized) contains a KL term that can often be integrated analytically. Here we give the solution when both the prior p θ (z) = N (0, I) and the posterior approximation q φ (z|x (i) ) are Gaussian. Let J be the dimensionality of z. Let µ and σ denote the variational mean and s.d. evaluated at datapoint i, and let µ j and σ j simply denote the j-th element of these vectors. Then:</p><formula xml:id="formula_20">q θ (z) log p(z) dz = N (z; µ, σ 2 ) log N (z; 0, I) dz = − J 2 log(2π) − 1 2 J j=1 (µ 2 j + σ 2 j )</formula><p>And:</p><formula xml:id="formula_21">q θ (z) log q θ (z) dz = N (z; µ, σ 2 ) log N (z; µ, σ 2 ) dz = − J 2 log(2π) − 1 2 J j=1</formula><p>(1 + log σ 2 j ) Therefore:</p><formula xml:id="formula_22">−D KL ((q φ (z)||p θ (z)) = q θ (z) (log p θ (z) − log q θ (z)) dz = 1 2 J j=1 1 + log((σ j ) 2 ) − (µ j ) 2 − (σ j ) 2</formula><p>When using a recognition model q φ (z|x) then µ and s.d. σ are simply functions of x and the variational parameters φ, as exemplified in the text.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C MLP's as probabilistic encoders and decoders</head><p>In variational auto-encoders, neural networks are used as probabilistic encoders and decoders. There are many possible choices of encoders and decoders, depending on the type of data and model. In our example we used relatively simple neural networks, namely multi-layered perceptrons (MLPs).</p><p>For the encoder we used a MLP with Gaussian output, while for the decoder we used MLPs with either Gaussian or Bernoulli outputs, depending on the type of data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C.1 Bernoulli MLP as decoder</head><p>In this case let p θ (x|z) be a multivariate Bernoulli whose probabilities are computed from z with a fully-connected neural network with a single hidden layer:</p><formula xml:id="formula_23">log p(x|z) = D i=1 x i log y i + (1 − x i ) · log(1 − y i ) where y = f σ (W 2 tanh(W 1 z + b 1 ) + b 2 )<label>(11)</label></formula><p>where f σ (.) is the elementwise sigmoid activation function, and where θ = {W 1 , W 2 , b 1 , b 2 } are the weights and biases of the MLP.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C.2 Gaussian MLP as encoder or decoder</head><p>In this case let encoder or decoder be a multivariate Gaussian with a diagonal covariance structure:</p><formula xml:id="formula_24">log p(x|z) = log N (x; µ, σ 2 I) where µ = W 4 h + b 4 log σ 2 = W 5 h + b 5 h = tanh(W 3 z + b 3 )<label>(12)</label></formula><p>where {W 3 , W 4 , W 5 , b 3 , b 4 , b 5 } are the weights and biases of the MLP and part of θ when used as decoder. Note that when this network is used as an encoder q φ (z|x), then z and x are swapped, and the weights and biases are variational parameters φ.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D Marginal likelihood estimator</head><p>We derived the following marginal likelihood estimator that produces good estimates of the marginal likelihood as long as the dimensionality of the sampled space is low (less then 5 dimensions), and sufficient samples are taken. Let p θ (x, z) = p θ (z)p θ (x|z) be the generative model we are sampling from, and for a given datapoint x (i) we would like to estimate the marginal likelihood p θ (x (i) ).</p><p>The estimation process consists of three stages:</p><p>1. Sample L values {z (l) } from the posterior using gradient-based MCMC, e.g. Hybrid Monte Carlo, using ∇ z log p θ (z|x) = ∇ z log p θ (z) + ∇ z log p θ (x|z).</p><p>2. Fit a density estimator q(z) to these samples {z (l) }.</p><p>3. Again, sample L new values from the posterior. Plug these samples, as well as the fitted q(z), into the following estimator:</p><formula xml:id="formula_25">p θ (x (i) ) 1 L L l=1 q(z (l) ) p θ (z)p θ (x (i) |z (l) ) −1 where z (l) ∼ p θ (z|x (i) )</formula><p>Derivation of the estimator:</p><formula xml:id="formula_26">1 p θ (x (i) ) = q(z) dz p θ (x (i) ) = q(z) p θ (x (i) ,z) p θ (x (i) ,z) dz p θ (x (i) ) = p θ (x (i) , z) p θ (x (i) ) q(z) p θ (x (i) , z) dz = p θ (z|x (i) ) q(z) p θ (x (i) , z) dz 1 L L l=1 q(z (l) ) p θ (z)p θ (x (i) |z (l) ) where z (l) ∼ p θ (z|x (i) )</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E Monte Carlo EM</head><p>The Monte Carlo EM algorithm does not employ an encoder, instead it samples from the posterior of the latent variables using gradients of the posterior computed with ∇ z log p θ (z|x) = ∇ z log p θ (z) + ∇ z log p θ (x|z). The Monte Carlo EM procedure consists of 10 HMC leapfrog steps with an automatically tuned stepsize such that the acceptance rate was 90%, followed by 5 weight updates steps using the acquired sample. For all algorithms the parameters were updated using the Adagrad stepsizes (with accompanying annealing schedule).</p><p>The marginal likelihood was estimated with the first 1000 datapoints from the train and test sets, for each datapoint sampling 50 values from the posterior of the latent variables using Hybrid Monte Carlo with 4 leapfrog steps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F Full VB</head><p>As written in the paper, it is possible to perform variational inference on both the parameters θ and the latent variables z, as opposed to just the latent variables as we did in the paper. Here, we'll derive our estimator for that case.</p><p>Let p α (θ) be some hyperprior for the parameters introduced above, parameterized by α. The marginal likelihood can be written as:</p><formula xml:id="formula_27">log p α (X) = D KL (q φ (θ)||p α (θ|X)) + L(φ; X)<label>(13)</label></formula><p>where the first RHS term denotes a KL divergence of the approximate from the true posterior, and where L(φ; X) denotes the variational lower bound to the marginal likelihood:</p><formula xml:id="formula_28">L(φ; X) = q φ (θ) (log p θ (X) + log p α (θ) − log q φ (θ)) dθ<label>(14)</label></formula><p>Note that this is a lower bound since the KL divergence is non-negative; the bound equals the true marginal when the approximate and true posteriors match exactly. The term log p θ (X) is composed of a sum over the marginal likelihoods of individual datapoints log p θ (X) = N i=1 log p θ (x (i) ), which can each be rewritten as:</p><formula xml:id="formula_29">log p θ (x (i) ) = D KL (q φ (z|x (i) )||p θ (z|x (i) )) + L(θ, φ; x (i) )<label>(15)</label></formula><p>where again the first RHS term is the KL divergence of the approximate from the true posterior, and L(θ, φ; x) is the variational lower bound of the marginal likelihood of datapoint i:</p><formula xml:id="formula_30">L(θ, φ; x (i) ) = q φ (z|x) log p θ (x (i) |z) + log p θ (z) − log q φ (z|x) dz (16)</formula><p>The expectations on the RHS of eqs <ref type="formula" target="#formula_5">(14)</ref> and <ref type="formula" target="#formula_8">(16)</ref> can obviously be written as a sum of three separate expectations, of which the second and third component can sometimes be analytically solved, e.g. when both p θ (x) and q φ (z|x) are Gaussian. For generality we will here assume that each of these expectations is intractable.</p><p>Under certain mild conditions outlined in section (see paper) for chosen approximate posteriors q φ (θ) and q φ (z|x) we can reparameterize conditional samples z ∼ q φ (z|x) as</p><formula xml:id="formula_31">z = g φ ( , x) with ∼ p( )<label>(17)</label></formula><p>where we choose a prior p( ) and a function g φ ( , x) such that the following holds:</p><formula xml:id="formula_32">L(θ, φ; x (i) ) = q φ (z|x) log p θ (x (i) |z) + log p θ (z) − log q φ (z|x) dz = p( ) log p θ (x (i) |z) + log p θ (z) − log q φ (z|x) z=g φ ( ,x (i) ) d<label>(18)</label></formula><p>The same can be done for the approximate posterior q φ (θ):</p><formula xml:id="formula_33">θ = h φ (ζ) with ζ ∼ p(ζ)<label>(19)</label></formula><p>where we, similarly as above, choose a prior p(ζ) and a function h φ (ζ) such that the following holds:</p><p>L(φ; X) = q φ (θ) (log p θ (X) + log p α (θ) − log q φ (θ)) dθ = p(ζ) (log p θ (X) + log p α (θ) − log q φ (θ))</p><formula xml:id="formula_34">θ=h φ (ζ) dζ<label>(20)</label></formula><p>For notational conciseness we introduce a shorthand notation f φ (x, z, θ):</p><p>f φ (x, z, θ) = N · (log p θ (x|z) + log p θ (z) − log q φ (z|x)) + log p α (θ) − log q φ (θ)</p><p>Using equations (20) and (18), the Monte Carlo estimate of the variational lower bound, given datapoint x (i) , is:</p><formula xml:id="formula_36">L(φ; X) 1 L L l=1 f φ (x (l) , g φ ( (l) , x (l) ), h φ (ζ (l) ))<label>(22)</label></formula><p>where (l) ∼ p( ) and ζ (l) ∼ p(ζ). The estimator only depends on samples from p( ) and p(ζ) which are obviously not influenced by φ, therefore the estimator can be differentiated w.r.t. φ. The resulting stochastic gradients can be used in conjunction with stochastic optimization methods such as SGD or Adagrad <ref type="bibr" target="#b4">[DHS10]</ref>. See algorithm 1 for a basic approach to computing stochastic gradients.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F.1 Example</head><p>Let the prior over the parameters and latent variables be the centered isotropic Gaussian p α (θ) = N (z; 0, I) and p θ (z) = N (z; 0, I). Note that in this case, the prior lacks parameters. Let's also assume that the true posteriors are approximatily Gaussian with an approximately diagonal covariance. In this case, we can let the variational approximate posteriors be multivariate Gaussians with a diagonal covariance structure:</p><p>log q φ (θ) = log N (θ; µ θ , σ 2 θ I) log q φ (z|x) = log N (z; µ z , σ 2 z I)</p><p>Algorithm 2 Pseudocode for computing a stochastic gradient using our estimator. See text for meaning of the functions f φ , g φ and h φ .</p><p>Require: φ (Current value of variational parameters) g ← 0 for l is 1 to L do x ← Random draw from dataset X ← Random draw from prior p( ) ζ ← Random draw from prior p(ζ) g ← g + 1 L ∇ φ f φ (x, g φ ( , x), h φ (ζ)) end for return g where µ z and σ z are yet unspecified functions of x. Since they are Gaussian, we can parameterize the variational approximate posteriors:</p><formula xml:id="formula_38">q φ (θ) as θ = µ θ + σ θ ζ</formula><p>where ζ ∼ N (0, I) q φ (z|x) as z = µ z + σ z where ∼ N (0, I)</p><p>With we signify an element-wise product. These can be plugged into the lower bound defined above (eqs <ref type="formula" target="#formula_35">(21)</ref> and <ref type="formula" target="#formula_36">(22)</ref>).</p><p>In this case it is possible to construct an alternative estimator with a lower variance, since in this model p α (θ), p θ (z), q φ (θ) and q φ (z|x) are Gaussian, and therefore four terms of f φ can be solved analytically. The resulting estimator is: </p><formula xml:id="formula_39">L(φ; X) 1 L L l=1 N ·   1 2 J j=1 1 + log((σ (l) z,j ) 2 ) − (µ (l) z,j ) 2 − (σ</formula></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>The type of directed graphical model under consideration. Solid lines denote the generative model p θ (z)p θ (x|z), dashed lines denote the variational approximation q φ (z|x) to the intractable posterior p θ (z|x). The variational parameters φ are learned jointly with the generative model parameters θ.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Comparison of our AEVB method to the wake-sleep algorithm, in terms of optimizing the lower bound, for different dimensionality of latent space (N z ). Our method converged considerably faster and reached a better solution in all experiments. Interestingly enough, more latent variables does not result in more overfitting, which is explained by the regularizing effect of the lower bound. Vertical axis: the estimated average variational lower bound per datapoint. The estimator variance was small (&lt; 1) and omitted. Horizontal axis: amount of training points evaluated. Computation took around 20-40 minutes per million training samples with a Intel Xeon CPU running at an effective 40 GFLOPS.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Comparison of AEVB to the wake-sleep algorithm and Monte Carlo EM, in terms of the estimated marginal likelihood, for a different number of training points. Monte Carlo EM is not an on-line algorithm, and (unlike AEVB and the wake-sleep method) can't be applied efficiently for the full MNIST dataset.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>(a) Learned Frey Face manifold (b) Learned MNIST manifold</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>(a) 2-D latent space (b) 5-D latent space (c) 10-D latent space (d) 20-D latent space Figure 5: Random samples from learned generative models of MNIST for different dimensionalities of latent space. B Solution of −D KL (q φ (z)||p θ (z)), Gaussian case</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>j</head><label></label><figDesc>) 2 + log p θ (x (i) z (i) ) simply denote the j-th element of vectors µ (i) and σ (i) .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>1. Tractable inverse CDF. In this case, let ∼ U(0, I), and let g φ ( , x) be the inverse CDF of q φ (z|x). Examples: Exponential, Cauchy, Logistic, Rayleigh, Pareto, Weibull, Reciprocal, Gompertz, Gumbel and Erlang distributions. 2. Analogous to the Gaussian example, for any "location-scale" family of distributions we can choose the standard distribution (with location = 0, scale = 1) as the auxiliary variable , and let g(.) = location + scale · . Examples: Laplace, Elliptical, Student's t, Logistic, Uniform, Triangular and Gaussian distributions. 3. Composition: It is often possible to express random variables as different transformations of auxiliary variables.</figDesc><table /><note>Examples: Log-Normal (exponentiation of normally distributed variable), Gamma (a sum over exponentially distributed variables), Dirichlet (weighted sum of Gamma variates), Beta, Chi-Squared, and F distributions. When all three approaches fail, good approximations to the inverse CDF exist requiring computa- tions with time complexity comparable to the PDF (see e.g. [Dev86] for some methods).</note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2">Note that this is just a (simplifying) choice, and not a limitation of our method.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3">Available at http://www.cs.nyu.edu/˜roweis/data.html</note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Visualisations</head><p>See figures 4 and 5 for visualisations of latent space and corresponding observed space of models learned with SGVB.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Representation learning: A review and new perspectives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aaron</forename><surname>Courville</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pascal</forename><surname>Vincent</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Variational bayesian inference with stochastic search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>David</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">I</forename><surname>Blei</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">W</forename><surname>Jordan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Paisley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 29th International Conference on Machine Learning (ICML-12)</title>
		<meeting>the 29th International Conference on Machine Learning (ICML-12)</meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="1367" to="1374" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Thibodeau-Laufer</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1306.1091</idno>
		<title level="m">Deep generative stochastic networks trainable by backprop</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Sample-based non-uniform random variate generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luc</forename><surname>Devroye</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 18th conference on Winter simulation</title>
		<meeting>the 18th conference on Winter simulation</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1986" />
			<biblScope unit="page" from="260" to="265" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Adaptive subgradient methods for online learning and stochastic optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Duchi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elad</forename><surname>Hazan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoram</forename><surname>Singer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="2121" to="2159" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Hybrid monte carlo</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Simon</forename><surname>Duane</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Anthony</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><forename type="middle">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Duncan</forename><surname>Pendleton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Roweth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Physics letters B</title>
		<imprint>
			<biblScope unit="volume">195</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="216" to="222" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karol</forename><surname>Gregor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andriy</forename><surname>Mnih</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daan</forename><surname>Wierstra</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1310.8499</idno>
		<title level="m">Deep autoregressive networks</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Stochastic variational inference</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Matthew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hoffman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>David</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chong</forename><surname>Blei</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Paisley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1303" to="1347" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">The&quot; wakesleep&quot; algorithm for unsupervised neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geoffrey</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Dayan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Brendan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Radford M</forename><surname>Frey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Neal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SCIENCE</title>
		<imprint>
			<biblScope unit="page" from="1158" to="1158" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Fast inference in sparse coding algorithms with applications to object recognition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koray</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc&amp;apos;aurelio</forename><surname>Ranzato</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yann</forename><surname>Lecun</surname></persName>
		</author>
		<idno>CBLL- TR-2008-12-01</idno>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
		<respStmt>
			<orgName>Computational and Biological Learning Lab, Courant Institute, NYU</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">An application of the principle of maximum information preservation to linear systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ralph</forename><surname>Linsker</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
			<publisher>Morgan Kaufmann Publishers Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rajesh</forename><surname>Ranganath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sean</forename><surname>Gerrish</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">M</forename><surname>Blei</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1401.0118</idno>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
	<note type="report_type">Black box variational inference. arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Stochastic backpropagation and variational inference in deep latent gaussian models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Danilo</forename><surname>Jimenez Rezende</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shakir</forename><surname>Mohamed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daan</forename><surname>Wierstra</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1401.4082</idno>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">EM algorithms for PCA and SPCA</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sam</forename><surname>Roweis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="626" to="632" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Fixed-form variational posterior approximation through stochastic linear regression</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tim</forename><surname>Salimans</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>David</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Knowles</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bayesian Analysis</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Efficient learning of deep boltzmann machines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruslan</forename><surname>Salakhutdinov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hugo</forename><surname>Larochelle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Artificial Intelligence and Statistics</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="693" to="700" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Stacked denoising autoencoders: Learning useful representations in a deep network with a local denoising criterion</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pascal</forename><surname>Vincent</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hugo</forename><surname>Larochelle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Isabelle</forename><surname>Lajoie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pierre-Antoine</forename><surname>Manzagol</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">9999</biblScope>
			<biblScope unit="page" from="3371" to="3408" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
	<note>VLL + 10</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
