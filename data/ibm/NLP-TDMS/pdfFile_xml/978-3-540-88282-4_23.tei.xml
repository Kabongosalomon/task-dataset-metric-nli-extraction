<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/yhou/git/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-02-07T09:47+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Hybrid Approach to Word Segmentation of Vietnamese Texts</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lê</forename><forename type="middle">Hồng</forename><surname>Phương</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">LORIA</orgName>
								<address>
									<settlement>Nancy</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nguyễn</forename><surname>Thị</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Minh</forename><surname>Huyền</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Vietnam National University</orgName>
								<address>
									<settlement>Hanoi</settlement>
									<country key="VN">Vietnam</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Azim</forename><surname>Roussanaly</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">LORIA</orgName>
								<address>
									<settlement>Nancy</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hồ</forename><forename type="middle">Tường</forename><surname>Vinh</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">IFI</orgName>
								<address>
									<settlement>Hanoi</settlement>
									<country key="VN">Vietnam</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A Hybrid Approach to Word Segmentation of Vietnamese Texts</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We present in this article a hybrid approach to automatically tokenize Vietnamese text. The approach combines both finite-state au-tomata technique, regular expression parsing and the maximal-matching strategy which is augmented by statistical methods to resolve ambiguities of segmentation. The Vietnamese lexicon in use is compactly represented by a minimal finite-state automaton. A text to be tokenized is first parsed into lexical phrases and other patterns using pre-defined regular expressions. The automaton is then deployed to build linear graphs corresponding to the phrases to be segmented. The application of a maximal-matching strategy on a graph results in all candidate segmentations of a phrase. It is the responsibility of an ambiguity resolver, which uses a smoothed bigram language model, to choose the most probable seg-mentation of the phrase. The hybrid approach is implemented to create vnTokenizer, a highly accurate tokenizer for Vietnamese texts.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>As many occidental languages, Vietnamese is an alphabetic script. Alphabetic scripts usually separate words by blanks and a tokenizer which simply replaces blanks with word boundaries and cuts off punctuation marks, parentheses and quotation marks at both ends of a word, is already quite accurate <ref type="bibr" target="#b4">[5]</ref>. However, unlike other languages, in Vietnamese blanks are not only used to separate words, but they are also used to separate syllables that make up words. Furthermore, many of Vietnamese syllables are words by themselves, but can also be part of multi-syllable words whose syllables are separated by blanks between them. In general, the Vietnamese language creates words of complex meaning by combining syllables that most of the time also possess a meaning when considered individually. This linguistic mechanism makes Vietnamese close to that of syllabic scripts, like Chinese. That creates problems for all natural language processing tasks, complicating the identification of what constitutes a word in an input text.</p><p>Many methods for word segmentation have been proposed. These methods can be roughly classified as either dictionary-based or statistical methods, while many state-of-the-art systems use hybrid approaches <ref type="bibr" target="#b5">[6]</ref>.</p><p>We present in this paper an efficient hybrid approach for the segmentation of Vietnamese text. The approach combines both finitestate automata technique, regular expression parsing and the maximalmatching method which is augmented by statistical methods to deal with ambiguities of segmentation. The rest of the paper is organized as follows. The next section gives the construction of a minimal finite-state automaton that encodes the Vietnamese lexicon. Sect. 3 discusses the application of this automaton and the hybrid approach for word segmentation of Vietnamese texts. The developed tokenizer for Vietnamese and its experimental results are shown in Sect. 4. Finally, we conclude the paper with some discussions in Sect. 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Lexicon Representation</head><p>In this section, we first briefly describe the Vietnamese lexicon and then introduce the construction of a minimal deterministic, acyclic finite-state automaton that accepts it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Vietnamese Lexicon</head><p>The Vietnamese lexicon edited by the Vietnam Lexicography Center (Vietlex 4 ) contains 40, 181 words, which are widely used in contemporary spoken language, newspapers and literature. These words are made up of 7, 729 syllables. It is noted that Vietnamese is an inflexionless language, this means that every word has exactly one form.</p><p>There are some interesting statistics about lengths of words measured in syllables as shown in <ref type="table" target="#tab_0">Table 1</ref>. Firstly, there are about 81.55% of syllables which are words by themselves, they are called single words; 15.69% of words are single ones. Secondly, there are 70.72% of compound words which are composed of two syllables. Finally, there are 13, 59% of compounds which are composed of at least three syllables; only 1, 04% of compounds having more than four syllables. The high frequency of two-syllable compounds suggests us a simple but efficient method to resolve ambiguities of segmentation. The next paragraph presents the representation of the lexicon.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Lexicon Representation</head><p>Minimal deterministic finite state automata (MDFA) have been known to be the best representation of a lexicon. They are not only compact but also give the optimal access time to data <ref type="bibr" target="#b0">[1]</ref>. The Vietnamese lexicon is represented by an MDFA.</p><p>We implement an algorithm developed by J. Daciuk et al.</p><p>[2] that incrementally builds a minimal automaton in a single phase by adding new strings one by one and minimizing the resulting automaton on-the-fly.</p><p>The minimal automaton that accepts the Vietnamese lexicon contains 42, 672 states in which 5, 112 states are final ones. It has 76, 249 transitions; the maximum number of outgoing transitions from a state is 85, and the maximum number of incoming transitions to a state is 4, 615. The automaton operates in optimal time in the sense that the time to recognize a word corresponds to the time required to follow a single path in the deterministic finite-state machine, and the length of the path is the length of the word measured in characters.</p><p>We present in this section an application of the lexicon automaton for the word segmentation of Vietnamese texts. We first give the specification of segmentation task.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Segmentation Specification</head><p>We have developed a set of segmentation rules based on the principles discussed in the document of the ISO/TC 37/SC 4 work group on word segmentation (2006) <ref type="bibr" target="#b2">[3]</ref>. Notably, the segmentation of a corpus follows the following rules:</p><p>1. Compounds: word compounds are considered as words if their meaning is not compound from their sub parts, or if their usage frequency justifies it. 2. Derivation: when a bound morpheme is attached to a word, the result is considered as a word. The reduplication of a word (common phenomenon in Vietnamese) also gives a lexical unit. 3. Multiword expressions: expressions such as "because of" are considered as lexical units. 4. Proper names: name of people and locations are considered as lexical units. 5. Regular patterns: numbers, times and dates are recognized as lexical units.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Word Segmentation</head><p>An input text for segmentation is first analyzed by a regular expression recognizer for detection of regular patterns such as proper names, common abbreviations, numbers, dates, times, email addresses, URLs, punctuations, etc. The recognition of arbitrary compounds, derivation, and multiword expressions is committed to a regular expression that extracts phrases of the text. The regular recognizer analyzes the text using a greedy strategy in that all patterns are scanned and the longest matched pattern is taken out. If a pattern is a phrase, that is a sequence of syllables and spaces, it is passed to a segmenter for detection of word composition. In general, a phrase usually has several different word compositions; nevertheless, there is typically one correct composition which the segmenter need to determine.</p><p>A simple segmenter could be implemented by the maximal matching strategy which selects the segmentation that contains the fewest words <ref type="bibr" target="#b7">[8]</ref>. In this method, the segmenter determines the longest syllable sequence which starts at the current position and is listed in the lexicon. It takes the recognized pattern, moves the position pointer behind the pattern, and starts to scan the next one. Although this method works quite well since long words are more likely to be correct than short words. However, this is a too greedy method which sometimes leads to wrong segmentation because of a large number of overlapping candidate words in Vietnamese. Therefore, we need to list all possible segmentations and design a strategy to select the most probable correct segmentation from them.</p><p>A phrase can be formalized as a sequence of blank-separated syllables s 1 s 2 · · · s n . We ignore for the moment the possibility of seeing a new syllable or a new word in this sequence. Due to the fact that, as we showed in the previous section, most of Vietnamese compound words are composed of two syllables, the most frequent case of ambiguities involves three consecutive syllables s i s i+1 s i+2 in which both of the two segmentations (s i s i+1 )(s i+2 ) and (s i )(s i+1 s i+2 ) may be correct, depending on context. This type of ambiguity is called overlap ambiguity, and the string s i s i+1 s i+2 is called an overlap ambiguity string. </p><formula xml:id="formula_0">· vi+0 vi+1 vi+2 vi+3 · si si+1 si+2 sisi+1 si+1si+2</formula><p>The phrase is represented by a linearly directed graph G = (V, E), V = {v 0 , v 1 , . . . , v n , v n+1 }, as shown in <ref type="figure" target="#fig_0">Fig. 1</ref>. Vertices v 0 and v n+1 are respectively the start and the end vertex; n vertices v 1 , v 2 , . . . , v n are aligned to n syllables of the phrase. There is an arc (v i , v j ) if the consecutive syllables s i+1 , s i+2 , . . . , s j compose a word, for all i &lt; j. If we denote accept(A, s) the fact that the lexicon automaton A accepts the string s, the formal construction of the graph for a phrase is shown in Algorithm 1. We can then propose all segmentations of the phrase by listing all shortest paths on the graph from the start vertex to the end vertex.</p><note type="other">Algorithm 1 Construction of the graph for a phrase s 1 s 2 . . . s n 1: V ← ∅; 2: for i = 0 to n + 1 do 3: V ← V ∪ {vi}; 4: end for 5: for i = 0 to n do 6: for j = i to n do 7: if (accept(AW , si · · · sj)) then 8: E ← E ∪ {(vi, vj+1)}; 9: end if 10: end for 11: end for 12: return G = (V, E);</note><p>As illustrated in <ref type="figure" target="#fig_0">Fig. 1</ref>, each overlap ambiguity string results in an ambiguity group, therefore, if a graph has k ambiguity groups, there are 2 k segmentations of the underlying phrase 5 . For example, the ambiguity group in <ref type="figure" target="#fig_0">Fig. 1</ref> gives two segmentations (s i s i+1 )s i+2 and s i (s i+1 s i+2 ).</p><p>We discuss in the next subsection the ambiguity resolver which we develop to choose the most probable segmentation of a phrase in the case it has overlap ambiguities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Resolution of Ambiguities</head><p>The ambiguity resolver uses a bigram language model which is augmented by the linear interpolation smoothing technique.</p><p>In n-gram language modeling, the probability of a string P (s) is expressed as the product of the probabilities of the words that compose the string, with each word probability conditional on the identity of the last n − 1 words, i.e., if s = w 1 · · · w m we have</p><formula xml:id="formula_1">P (s) = m 񮽙 i=1 P (w i |w i−1 1 ) ≈ m 񮽙 i=1 P (w i |w i−1 i−n+1 ),<label>(1)</label></formula><p>where w j i denotes the words w i · · · w j . Typically, n is taken to be two or three, corresponding to a bigram or trigram model, respectively. <ref type="bibr" target="#b5">6</ref> In the case of a bigram model n = 2, to estimate the probabilities P (w i |w i−1 ) in (1), we can use training data, and take the maximum likelihood (ML) estimate for P (w i |w i−1 ) as follows</p><formula xml:id="formula_2">P M L (w i |w i−1 ) = P (w i−1 w i ) P (w i−1 ) = c(w i−1 w i )/N c(w i−1 )/N = c(w i−1 w i ) c(w i−1 ) ,</formula><p>where c(α) denotes the number of times the string α occurs and N is the total number of words in the training data.</p><p>The maximum likelihood estimate is a poor one when the amount of training data is small compared to the size of the model being built, as is generally the case in language modeling. A zero bigram probability can lead to errors of the modeling. Therefore, a variety of smoothing techniques have been developed to adjust the maximum likelihood estimate in order to produce more accurate probabilities. Not only do smoothing methods generally prevent zero probabilities, but they also attempt to improve the accuracy of the model as a whole. Whenever a probability is estimated from few counts, smoothing has the potential to significantly improve estimation <ref type="bibr" target="#b6">[7]</ref>.</p><p>We adopt the linear interpolation technique to smooth the model. This is a simple yet effective smoothing technique which is widely used in the domain of language modeling <ref type="bibr" target="#b3">[4]</ref>. In this method, the bigram model is interpolated with a unigram model P M L (w i ) = c(w i )/N, a model that reflects how often each word occurs in the training data. We take our estimate 񮽙 P (w i |w i−1 ) to be</p><formula xml:id="formula_3">񮽙 P (w i |w i−1 ) = λ 1 P M L (w i |w i−1 ) + λ 2 P M L (w i ),<label>(2)</label></formula><p>where λ 1 + λ 2 = 1 and λ 1 , λ 2 ≥ 0.</p><p>The objective of smoothing techniques is to improve the performance of a language model, therefore the estimation of λ values in (2) is related to the evaluation of the language model. The most common metric for evaluating a language model is the probability that the model assigns to test data, or more conveniently, the derivative measured of entropy. For a smoothed bigram model that has probabilities p(w i |w i−1 ), we can calculate the probability of a sentence P (s) using (1). For a test set T composed of n sentences s 1 , s 2 , . . . , s n , we can calculate the probability P (T ) of the test set as the product of the probabilities of all sentences in the set P (T ) = 񮽙 n i=1 P (s i ). The entropy H p (T ) of the model on data T is defined by</p><formula xml:id="formula_4">H p (T ) = − log 2 P (T ) N T = − 1 N T n 񮽙 i=1 log 2 P (s i ),<label>(3)</label></formula><p>where N T is the length of the text T measured in words. The entropy is inversely related to the average probability a model assigns to sentences in the test data, and it is generally assumed that lower entropy correlates with better performance in applications.</p><p>Starting from a part of the training set which is called the "validation" data, we define C(w i−1 , w i ) to be the number of times the bigram (w i−1 , w i ) is seen in the validation set. We need to choose λ 1 , λ 2 to maximize</p><formula xml:id="formula_5">L(λ 1 , λ 2 ) = 񮽙 w i−1 ,w i C(w i−1 , w i ) log 2 񮽙 P (w i |w i−1 )<label>(4)</label></formula><p>such that λ 1 + λ 2 = 1, and λ 1 , λ 2 ≥ 0. The λ 1 and λ 2 values can be estimated by an iterative process given in Algorithm 2. Once all the parameters of the bigram model have been estimated, the smoothed probabilities of bigrams can be easily computed by <ref type="bibr" target="#b1">(2)</ref>. These results are used by the resolver to choose the most probable segmentation of a phrase, say, s, by comparing probabilities P (s) which is estimated using (1). The segmentation with the greatest probability will be chosen.</p><p>We present in the next section the experimental setup and obtained results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 2 Estimation of values λ</head><p>1: λ1 ← 0.5, λ2 ← 0.5; 2: ϵ ← 0.01;</p><formula xml:id="formula_6">3: repeat 4: b λ1 ← λ1, b λ2 ← λ2; 5: c1 ← P w i−1 ,w i C(w i−1 ,w i )λ 1 P M L (w i |w i−1 ) λ 1 P M L (w i |w i−1 )+λ 2 P M L (w i ) ; 6: c2 ← P w i−1 ,w i C(w i−1 ,w i )λ 2 P M L (w i ) λ 1 P M L (w i |w i−1 )+λ 2 P M L (w i ) ; 7: λ1 ← c 1 c 1 +c 2 , λ2 ← 1 − b λ1; 8: b ϵ ← q ( b λ1 − λ1) 2 + ( b λ2 − λ2) 2 ; 9: until (b ϵ ≤ ϵ); 10: return λ1, λ2;</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Experiments</head><p>We present in this section the experimental setup and give a report on results of experiments with the hybrid approach presented in the previous sections. We also describe briefly vnTokenizer, an automatic software for segmentation of Vietnamese texts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Corpus Constitution</head><p>The corpus upon which we evaluate the performance of the tokenizer is a collection of 1264 articles from the "Politics -Society" section of the Vietnamese newspaper Tuổi trẻ (The Youth), for a total of 507, 358 words that have been manually spell-checked and segmented by linguists from the Vietnam Lexicography Center. Although there can be multiple plausible segmentations of a given Vietnamese sentence, only a single correct segmentation of each sentence is kept. We assume a single correct segmentation of a sentence for two reasons. The first one is of its simplicity. The second one is due to the fact that we are not currently aware of any effective way of using multiple segmentations in typical applications concerning Vietnamese processing.</p><p>We perform a 10-fold cross validation on the test corpus. In each experiment, we take 90% of the gold test set (≈ 456, 600 lexical units) as training set, and 10% as test set. We present in the next paragraph the training and results of the model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Results</head><p>In an experiment, the bigram language model is trained on a training set. An estimation of parameters λs in the Algorithm 2 is given in <ref type="table" target="#tab_1">Table 2</ref>. With a given error ϵ = 0.03, the estimated parameters converge after four iterations. The above experimental results reveal a fact that the smoothing technique basing on the linear interpolation adjusts well bigram and unigram probabilities, it thus improves the estimation and the accuracy of the model as a whole. <ref type="table" target="#tab_2">Table 3</ref> presents the values of precisions, recalls and F -measures of the system on two versions with or without ambiguity resolution. Precision is computed as the count of common tokens over tokens of the automatically segmented files, recall as the count of common tokens over tokens of the manually segmented files, and F -measure is computed as usual from these two values. The system has good recall ratios, about 96%. However, the use of the resolver for resolution of ambiguities only slightly improves the overall accuracy. This can be explained by the fact that the bigram model exploits a small amount of training data compared to the size of the universal language model. It is hopeful that the resolver may improve further the accuracy if it is trained on larger corpora.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">vnTokenizer</head><p>We have developed a software tool named vnTokenzier that implements the presented approach for automatic word segmentation of Vietnamese texts. The tool is written in Java and bundled as an Eclipse plug-in and it has already been integrated into vnToolkit, an Eclipse Rich Client 7 application which is intended to be a general framework integrating tools for processing of Vietnamese text. vnTokenizer plug-in, vnToolkit and related resources, include the lexicon and test corpus are freely available for download 8 . They are distributed under the GNU General Public License 9 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>We have presented an efficient hybrid approach to word segmentation of Vietnamese texts that gives a relatively high accuracy. The approach has been implemented to produce vnTokenizer, an automatic tokenizer for Vietnamese texts.</p><p>By analyzing results of experiments, we found two types of ambiguity strings in word segmentation of Vietnamese texts: (1) overlap ambiguity strings and (2) combination ambiguity strings. A sequence of syllables s 1 s 2 . . . s n is called a combination ambiguity string if it is a compound word by itself and there exists its sub sequences which are also words by themselves in some context. For instance, the word bà ba (a kind of pajamas) may be segmented into two words bà and ba (the third wife), and there exists contexts under which this segmentation is both syntactically and semantically correct. Being augmented with a bigram model, our tokenizer is able to resolve effectively overlap ambiguity strings, but combination ambiguity strings have not been discovered. There is a delicate reason, it is that combination ambiguities require a judgment of the syntactic and semantic sense of the segmentation -a task where an agreement cannot be reached easily among different human annotators. Furthermore, we observe that the relative frequency of combination ambiguity strings in Vietnamese is small. In a few ambiguity cases involving bigrams, we believe that a trigram model resolver would work better. These questions would be of interest for further research to improve the accuracy of the tokenizer.</p><p>Finally, we found that the majority of errors of segmentation are due to the presence in the texts of compounds absent from the lexicon. Unknown compounds are a much greater source of segmenting errors than segmentation ambiguities. Future efforts should therefore be geared in priority towards the automatic detection of new compounds, which can be performed by means either statistical in a large corpus or rule-based using linguistic knowledge about word composition.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. Graph representation of a phrase</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="true"><head>Table 1 .</head><label>1</label><figDesc></figDesc><table>Lengths of words measured in syllables 

Length 
# 
% 

1 6, 303 15.69 
2 28, 416 70.72 
3 2, 259 5.62 
4 2, 784 6.93 
≥ 5 
419 1.04 
Total 40, 181 
100 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 2 . Estimation of lambda values</head><label>2</label><figDesc></figDesc><table>Step λ1 
λ2 
ϵ 

0 0.500 0.500 1.000 
1 0.853 0.147 0.499 
2 0.952 0.048 0.139 
3 0.981 0.019 0.041 
4 0.991 0.009 0.015 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 3 . Precision, recall and F -measure of the system</head><label>3</label><figDesc></figDesc><table>Precision Recall F -measure 

0.948 
0.960 
0.954 
0.950 
0.963 
0.956 

</table></figure>

			<note place="foot" n="4"> http://www.vietlex.com/</note>

			<note place="foot" n="5"> If these ambiguity groups do not overlap each other.</note>

			<note place="foot" n="6"> To make the term P (wi|w i−1 i−n−1 ) meaningful for i &lt; n, one can pad the beginning of the string with a distinguished token. We assume there are n − 1 such distinguished tokens preceding each phrase.</note>

			<note place="foot" n="7"> http://www.eclipse.org/rcp/ 8 http://www.loria.fr/∼lehong/projects.php 9 http://www.gnu.org/copyleft/gpl.html</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The work reported in this article would not have been possible without the enthusiastic collaboration of all the linguists at the Vietnam Lexicography Center. We thank them for their help in data preparation.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Electronic Dictionaries and Acyclic Finite-State Automata: A State of The Art, Grammars and Automata for String Processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Denis</forename><surname>Maurel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Incremental Construction of Minimal Acyclic Finite-State Automata</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan</forename><surname>Daciuk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stoyan</forename><surname>Mihov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bruce</forename><forename type="middle">W</forename><surname>Watson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><forename type="middle">E</forename><surname>Watson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Linguistics</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Language Resource Management -Word Segmentation of Written Texts for Mono-lingual and Multi-lingual Information Processing -Part I: General Principles and Methods</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Iso/Tc</surname></persName>
		</author>
		<idno>37/SC 4 AWI N309</idno>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Interpolated estimation of Markov source parameters from sparse data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frederick</forename><surname>Jelinke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><forename type="middle">L</forename><surname>Mercer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Workshop on Pattern Recognition in Practice</title>
		<meeting>the Workshop on Pattern Recognition in Practice<address><addrLine>The Netherlands</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1980" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Helmut</forename><surname>Schmid</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tokenizing</forename></persName>
		</author>
		<title level="m">Corpus Linguistics. An International Handbook. Mouton de Gruyter</title>
		<meeting><address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
	<note>Anke Lüdeling and Merja Kytö</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jianfeng</forename><surname>Gao</surname></persName>
		</author>
		<title level="m">Chinese Word Segmentation and Named Entity Recognition: A Pragmatic Approach, Computational Linguistics</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">An Empirical Study of Smoothing Techniques for Language Modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Stanley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joshua</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Goodman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 34th Annual Meeting of the ACL</title>
		<meeting>the 34th Annual Meeting of the ACL</meeting>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Chinese Word Segmentation based on Maximum Matching and Word Binding Force</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Chan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th Conference on Computational Linguistics</title>
		<meeting>the 16th Conference on Computational Linguistics<address><addrLine>Copenhagen, DK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
