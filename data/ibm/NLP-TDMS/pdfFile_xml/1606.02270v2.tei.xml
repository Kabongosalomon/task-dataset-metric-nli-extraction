<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /nfs/home/kabenamualus/Research/task-dataset-metric-extraction/../grobid-0.6.0/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Natural Language Comprehension with the EpiReader</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adam</forename><surname>Trischler</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Maluuba Research Montreal</orgName>
								<address>
									<region>Québec</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adam</forename><surname>Trischler</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Maluuba Research Montreal</orgName>
								<address>
									<region>Québec</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zheng</forename><surname>Ye</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Maluuba Research Montreal</orgName>
								<address>
									<region>Québec</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xingdi</forename><surname>Yuan</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Maluuba Research Montreal</orgName>
								<address>
									<region>Québec</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Yuan</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Maluuba Research Montreal</orgName>
								<address>
									<region>Québec</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kaheer</forename><surname>Suleman</surname></persName>
							<email>k.suleman@maluuba.com</email>
							<affiliation key="aff0">
								<orgName type="institution">Maluuba Research Montreal</orgName>
								<address>
									<region>Québec</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Natural Language Comprehension with the EpiReader</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.6.0" ident="GROBID-SDO" when="2021-06-25T18:55+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid-sdo"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We present the EpiReader, a novel model for machine comprehension of text. Machine comprehension of unstructured, real-world text is a major research goal for natural language processing. Current tests of machine comprehension pose questions whose answers can be inferred from some supporting text, and evaluate a model's response to the questions. The EpiReader is an end-to-end neural model comprising two components: the first component proposes a small set of candidate answers after comparing a question to its supporting text, and the second component formulates hypotheses using the proposed candidates and the question, then reranks the hypotheses based on their estimated concordance with the supporting text.</p><p>We present experiments demonstrating that the EpiReader sets a new state-of-the-art on the CNN and Children's Book Test machine comprehension benchmarks, outperforming previous neural models by a significant margin.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>When humans reason about the world, we tend to formulate a variety of hypotheses and counterfactuals, then test them in turn by physical or thought experiments. The philosopher Epicurus first formalized this idea in his Principle of Multiple Explanations: if several theories are consistent with the observed data, retain them all until more data is observed. In this paper, we argue that the same principle can be applied to machine comprehension of natural language. We propose a deep, end-to-end, neural comprehension model that we call the EpiReader.</p><p>Comprehension of natural language by machines, at a near-human level, is a prerequisite for an extremely broad class of useful applications of artificial intelligence. Indeed, most human knowledge is collected in the natural language of text. Machine comprehension (MC) has therefore garnered significant attention from the machine learning research community. Machine comprehension is typically evaluated by posing a set of questions based on a supporting text passage, then scoring a system's answers to those questions. We all took similar tests in school. Such tests are objectively gradable and may assess a range of abilities, from basic understanding to causal reasoning to inference <ref type="bibr">(Richardson et al., 2013)</ref>.</p><p>In the past year, two large-scale MC datasets have been released: the CNN/Daily Mail corpus, consisting of news articles from those outlets <ref type="bibr" target="#b3">(Hermann et al., 2015)</ref>, and the Children's Book Test (CBT), consisting of short excerpts from books available through Project Gutenberg <ref type="bibr">(Hill et al., 2015)</ref>. The size of these datasets (on the order of 10 5 distinct questions) makes them amenable to data-intensive deep learning techniques. Both corpora use Clozestyle questions <ref type="bibr" target="#b4">(Taylor, 1953)</ref>, which are formulated by replacing a word or phrase in a given sentence with a placeholder token. The task is then to find the answer that "fills in the blank".</p><p>In tandem with these corpora, a host of neural machine comprehension models has been developed <ref type="bibr">(Weston et al., 2014;</ref><ref type="bibr" target="#b3">Hermann et al., 2015;</ref><ref type="bibr">Hill et al., 2015;</ref><ref type="bibr" target="#b3">Kadlec et al., 2016;</ref><ref type="bibr" target="#b1">Chen et al., 2016)</ref>. We compare the EpiReader to these earlier models through training and evaluation on the CNN and CBT datasets. <ref type="bibr">1</ref> The EpiReader factors into two components. The first component extracts a small set of potential answers based on a shallow comparison of the question with its supporting text; we call this the Extractor. The second component reranks the proposed answers based on deeper semantic comparisons with the text; we call this the Reasoner. We can summarize this process as Extract → Hypothesize → Test 2 . The semantic comparisons implemented by the Reasoner are based on the concept of recognizing textual entailment (RTE) <ref type="bibr" target="#b2">(Dagan et al., 2006)</ref>, also known as natural language inference. This process is computationally demanding. Thus, the Extractor serves the important function of filtering a large set of potential answers down to a small, tractable set of likely candidates for more thorough testing.</p><p>The Extractor follows the form of a pointer network <ref type="bibr">(Vinyals et al., 2015)</ref>, and uses a differentiable attention mechanism to indicate words in the text that potentially answer the question. This approach was used (on its own) for question answering with the Attention Sum Reader <ref type="bibr" target="#b3">(Kadlec et al., 2016)</ref>. The Extractor outputs a small set of answer candidates along with their estimated probabilities of correctness. The Reasoner forms hypotheses by inserting the candidate answers into the question, then estimates the concordance of each hypothesis with each sentence in the supporting text. We use these estimates as a measure of the evidence for a hypothesis, and aggregate evidence over all sentences. In the end, we combine the Reasoner's evidence with the Extractor's probability estimates to produce a final ranking of the answer candidates. This paper is organized as follows. In Section 2 we formally define the problem to be solved and give some background on the datasets used in our tests. In Section 3 we describe the EpiReader, focusing on its two components and how they combine. Section 4 discusses related work, and Section 5 details our experimental results and analysis. We conclude in Section 6. <ref type="bibr">1</ref> The CNN and Daily Mail datasets were released together and have the same form. The Daily Mail dataset is significantly larger, and our tests with this data are still in progress. <ref type="bibr">2</ref> The Extractor performs extraction, while the Reasoner both hypothesizes and tests.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Problem definition, notation, datasets</head><p>The task of the EpiReader is to answer a Cloze-style question by reading and comprehending a supporting passage of text. The training and evaluation data consist of tuples (Q, T , a * , A), where Q is the question (a sequence of words {q 1 , ...q |Q| }), T is the text (a sequence of words {t 1 , ..., t |T | }), A is a set of possible answers {a 1 , ..., a |A| }, and a * ∈ A is the correct answer. All words come from a vocabulary V , and A ⊂ T . In each question, there is a placeholder token indicating the missing word to be filled in.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Datasets</head><p>CNN This corpus is built using articles scraped from the CNN website. The articles themselves form the text passages, and questions are generated synthetically from short summary statements that accompany each article. These summary points are (presumably) written by human authors. Each question is created by replacing a named entity in a summary point with a placeholder token. All named entities in the articles and questions are replaced with anonymized tokens that are shuffled for each (Q, T ) pair. This forces the model to rely only on the text, rather than learning world knowledge about the entities during training. The CNN corpus (henceforth CNN) was presented by <ref type="bibr" target="#b3">Hermann et al. (2015)</ref>.</p><p>Children's Book Test This corpus is constructed similarly to CNN, but from children's books available through Project Gutenberg. Rather than articles, the text passages come from book excerpts of 20 sentences. Since no summaries are provided, a question is generated by replacing a single word in the next (i.e. 21st) sentence. The corpus distinguishes questions based on the type of word that is replaced: named entity, common noun, verb, or preposition. Like <ref type="bibr" target="#b3">Kadlec et al. (2016)</ref>, we focus only on the first two classes since <ref type="bibr">Hill et al. (2015)</ref> showed that standard LSTM language models already achieve humanlevel performance on the latter two. Unlike in the CNN corpora, named entities are not anonymized and shuffled in the Children's Book Test (CBT). The CBT was presented by <ref type="bibr">Hill et al. (2015)</ref>.</p><p>Due to the construction of questions in each corpus, CNN and CBT assess different aspects of machine comprehension. The summary points of CNN are condensed paraphrasings of information from the text, so determining the correct answer relies more on recognizing textual entailment. On the other hand, a CBT question, generated from a sentence which continues the text passage (rather than summarizes it), is more about making a prediction based on context.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">The EpiReader</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Overview and intuition</head><p>The EpiReader explicitly leverages the observation that the answer to a question is often a word or phrase from the related text passage. This condition holds for the CNN and CBT datasets. EpiReader's first module, the Extractor, can thus select a small set of candidate answers by pointing to their locations in the supporting passage. This mechanism is detailed in Section 3.2, and was used previously by the Attention Sum Reader <ref type="bibr" target="#b3">(Kadlec et al., 2016)</ref>. Pointing to candidate answers removes the need to apply a softmax over the entire vocabulary as in <ref type="bibr">Weston et al. (2014)</ref>, which is computationally more costly and uses less-direct information about the context of a predicted answer in the supporting text.</p><p>EpiReader's second module, the Reasoner, begins by formulating hypotheses using the extracted answer candidates. It generates each hypothesis by replacing the placeholder token in the question with an answer candidate. Cloze-style questions are ideally-suited to this process, because inserting the correct answer at the placeholder location produces a well-formed, grammatical statement. Thus, the correct hypothesis will "make sense" to a language model. The Reasoner then tests each hypothesis individually. It compares a hypothesis to the text, split into sentences, to measure textual entailment, and then aggregates entailment over all sentences. This computation uses a pair of convolutional encoder networks followed by a recurrent neural network. The convolutional encoders generate abstract representations of the hypothesis and each text sentence; the recurrent network estimates and aggregates entailment. This is described formally in Section 3.3. The end-toend EpiReader model, combining the Extractor and Reasoner modules, is depicted in <ref type="figure" target="#fig_0">Figure 1</ref>.</p><p>Throughout our model, words will be represented with trainable embeddings <ref type="bibr" target="#b0">(Bengio et al., 2000)</ref>. We represent these embeddings using a matrix W ∈ R D×|V | , where D is the embedding dimension and |V | is the vocabulary size.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">The Extractor</head><p>The Extractor is a Pointer Network <ref type="bibr">(Vinyals et al., 2015)</ref>. It uses a pair of bidirectional recurrent neural networks, f (θ T , T) and g(θ Q , Q), to encode the text passage and the question. θ T represents the parameters of the text encoder, and T ∈ R D×N is a matrix representation of the text (comprising N words), whose columns are individual word embeddings t i . Likewise, θ Q represents the parameters of the question encoder, and Q ∈ R D×N Q is a matrix representation of the question (comprising N Q words), whose columns are individual word embeddings q j .</p><p>We use a recurrent neural network with gated recurrent units (GRU) <ref type="bibr" target="#b0">(Bahdanau et al., 2014)</ref> to scan over the columns (i.e. word embeddings) of the input matrix. We selected the GRU because it is computationally simpler than Long Short-Term Memory (Hochreiter and Schmidhuber, 1997), while still avoiding the problem of vanishing/exploding gradients often encountered when training recurrent networks.</p><p>The GRU's hidden state gives a representation of the ith word conditioned on preceding words. To include context from proceeding words, we run a second GRU over T in the reverse direction. We refer to the combination as a biGRU. At each step the biGRU outputs two d-dimensional encoding vectors, one for the forward direction and one for the backward direction. We concatenate these to yield a vector f (t i ) ∈ R 2d . The question biGRU is similar, but we get a single-vector representation of the question by concatenating the final forward state with the initial backward state, which we denote g(Q) ∈ R 2d .</p><p>As in Kadlec et al. <ref type="formula" target="#formula_0">(2016)</ref>, we model the probability that the ith word in text T answers question Q using</p><formula xml:id="formula_0">s i ∝ exp(f (t i ) · g(Q)),<label>(1)</label></formula><p>which takes the inner product of the text and question representations followed by a softmax. In many cases unique words repeat in a text. Therefore, we compute the total probability that word w is the correct answer using a sum:  This probability is evaluated for each unique word in T . Finally, the Extractor outputs the set {p 1 , ..., p K } of the K highest word probabilities from 2, along with the corresponding set of K most probable answer words {â 1 , ...,â K }.</p><formula xml:id="formula_1">P (w | T , Q) = i: t i =w s i .<label>(2</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">The Reasoner</head><p>The indicial selection involved in gathering {â 1 , ...,â K } is not a smooth operation. To construct an end-to-end differentiable model, we bypass this by propagating the probability estimates of the Extractor directly through the Reasoner. The Reasoner begins by inserting the answer candidates, which are single words or phrases, into the question sequence Q at the placeholder location. This forms K hypotheses {H 1 , ..., H K }. At this point, we consider each hypothesis to have probability p(H k ) ≈ p k , as estimated by the Extractor. The Reasoner updates and refines this estimate.</p><p>The hypotheses represent new information in some sense-they are statements we have constructed, albeit from words already present in the question and text passage. The Reasoner estimates entailment between the statements H k and the passage T . We denote these estimates using e k = F (H k , T ), with F to be defined. We start by reorganizing T into a sequence of N s sentences: T = {t 1 , . . . , t N } → {S 1 , . . . , S Ns }, where S i is a sequence of words.</p><p>For each hypothesis and each sentence of the text, Reasoner input consists of two matrices: S i ∈ R D×|S i | , whose columns are the embedding vectors for each word of sentence S i , and H k ∈ R D×|H k | , whose columns are the embedding vectors for each word in the hypothesis H k . The embedding vectors themselves come from matrix W, as before.</p><p>These matrices feed into a convolutional architecture based on that of Severyn and Moschitti (2016). The architecture first augments S i with matrix M ∈ R 2×|S i | . The first row of M contains the inner product of each word embedding in the sentence with the candidate answer embedding, and the second row contains the maximum inner product of each sentence word embedding with any word embedding in the question. These word-matching features were inspired by similar approaches in <ref type="bibr" target="#b5">Wang and Jiang (2015)</ref> and <ref type="bibr" target="#b4">Trischler et al. (2016)</ref>, where they were shown to improve entailment estimates.</p><p>The augmented S i is then convolved with a bank of filters F S ∈ R (D+2)×m , while H k is convolved with filters F H ∈ R D×m , where m is the convolutional filter width. We add a bias term and apply a nonlinearity (we use a ReLU) following the convolution. Maxpooling over the sequences then yields two vectors: the representation of the text sentence, r S i ∈ R N F , and the representation of the hypothesis, r H k ∈ R N F , where N F is the number of filters.</p><p>We then compute a scalar similarity score between these vector representations using the bilinear form</p><formula xml:id="formula_2">ς = r T S i Rr H k ,<label>(3)</label></formula><p>where R ∈ R N F ×N F is a matrix of trainable parameters. We then concatenate the similarity score with the sentence and hypothesis representations to get a vector, x ik = [ς; r S i ; r H k ] T . There are more powerful models of textual entailment that could have been used in place of this convolutional architecture. We adopted the approach of Severyn and Moschitti (2016) for computational efficiency. The resulting sequence of N s vectors feeds into yet another GRU for synthesis, of hidden dimension d S . Intuitively, it is often the case that evidence for a particular hypothesis is distributed over several sentences. For instance, if we hypothesize that the football is in the park, perhaps it is because one sentence tells us that Sam picked up the football and a later one tells us that Sam ran to the park. 3 The Reasoner synthesizes distributed information by running a GRU network over x ik , where i indexes sentences and represents the step dimension. <ref type="bibr">4</ref> The final hidden state of the GRU is fed through a fully-connected layer, yielding a single scalar y k . This value represents the collected evidence for H k based on the text. In practice, the Reasoner processes all K hypotheses in parallel and the estimated entailment of each is normalized by a softmax, e k ∝ exp(y k ).</p><p>The reranking step performed by the Reasoner helps mitigate a significant weakness of most existing attention mechanisms. Specifically, these mechanisms blend representations of all possible outcomes together using "soft" attention, rather than considering them discretely using "hard" attention. This is like exploring a maze by generating an average path out of the several before you, and then attempting to follow it by walking through a wall. Examining possibilities individually, as in the Reasoner module, is more natural.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Combining components</head><p>Finally, we combine the evidence from the Reasoner with the probability from the Extractor. We compute the output probability of each hypothesis, π k , according to the product</p><formula xml:id="formula_3">π k ∝ e k p k ,<label>(4)</label></formula><p>whereby the evidence of the Reasoner can be interpreted as a correction to the Extractor probabilities, applied as an additive shift in log-space. We experimented with other combinations of the Extractor and Reasoner, but we found the multiplicative approach to yield the best performance. After combining results from the Extractor and Reasoner to get the probabilities π k described in Eq. 4, we optimize the parameters of the full EpiReader to minimize a cost comprising two terms, L E and L R . The first term is a standard negative loglikelihood objective, which encourages the Extractor to rate the correct answer above other answers. This is the same loss term used in <ref type="bibr" target="#b3">Kadlec et al. (2016)</ref>. This loss is given by:</p><formula xml:id="formula_4">L E = E (Q,T ,a * ,A) [− log P (a * | T , Q)] ,<label>(5)</label></formula><p>where P (a * | T , Q) is as defined in Eq. 2, and a * denotes the true answer. The second term is a marginbased loss on the end-to-end probabilities π k . We define π * as the probability π k corresponding to the true answer word a * . This term is given by:</p><formula xml:id="formula_5">L R = E (Q,T ,a * ,A)   â i ∈{â 1 ,...,â K }\a * [γ − π * + πâ i ] +   ,<label>(6)</label></formula><p>where γ is a margin hyperparameter, {â 1 , ...,â K } is the set of K answers proposed by the Extractor, and [x] + indicates truncating x to be non-negative. Intuitively, this loss says that we want the end-to-end probability π * for the correct answer to be at least γ larger than the probability πâ i for any other answer proposed by the Extractor. During training, the correct answer is occasionally missed by the Extractor, especially in early epochs. We counter this issue by forcing the correct answer into the top K set while training. When evaluating the model on validation and test examples we rely fully on the top K answers proposed by the Extractor.</p><p>To get the final loss term L ER , minus 2 regularization terms on the model parameters, we take a weighted combination of L E and L R :</p><formula xml:id="formula_6">L ER = L E + λL R ,<label>(7)</label></formula><p>where λ is a hyperparameter for weighting the relative contribution of the Extractor and Reasoner losses.</p><p>In practice, we found that λ should be fairly large (e.g. 10 &lt; λ &lt; 100). Empirically, we observed that the output probabilities from the Extractor often peak and saturate the first softmax; hence, the Extractor term can come to dominate the Reasoner term without the weight λ (we discuss the Extractor's propensity to overfit in Section 5).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Related Work</head><p>The Impatient and Attentive Reader models were proposed by <ref type="bibr" target="#b3">Hermann et al. (2015)</ref>. The Attentive Reader applies bidirectional recurrent encoders to the question and supporting text. It then uses the attention mechanism described in <ref type="bibr" target="#b0">Bahdanau et al. (2014)</ref> to compute a fixed-length representation of the text based on a weighted sum of the text encoder's output, guided by comparing the question representation to each location in the text. Finally, a joint representation of the question and supporting text is formed by passing their separate representations through a feedforward MLP and an answer is selected by comparing the MLP output to a representation of each possible answer. The Impatient Reader operates similarly, but computes attention over the text after processing each consecutive word of the question. The two models achieved similar performance on the CNN and Daily Mail datasets. Memory Networks were first proposed by <ref type="bibr">Weston et al. (2014)</ref> and later applied to machine comprehension by <ref type="bibr">Hill et al. (2015)</ref>. This model builds fixed-length representations of the question and of windows of text surrounding each candidate answer, then uses a weighted-sum attention mechanism to combine the window representations. As in the previous Readers, the combined window representation is then compared with each possible answer to form a prediction about the best answer. What distinguishes Memory Networks is how they construct the question and text window representations. Rather than a recurrent network, they use a specially-designed, trainable transformation of the word embeddings.</p><p>Most of the details for the very recent AS Reader are provided in the description of our Extractor module in Section 3.2, so we do not summarize it further here. This model <ref type="bibr" target="#b3">(Kadlec et al., 2016)</ref> set the previous state-of-the-art on the CBT dataset.</p><p>During the write-up of this paper, another very recent model came to our attention. <ref type="bibr" target="#b1">Chen et al. (2016)</ref> propose using a bilinear term instead of a tanh layer to compute the attention between question and passage words, and also uses the attended word encodings for direct, pointer-style prediction as in <ref type="bibr" target="#b3">Kadlec et al. (2016)</ref>. This model set the previous state-of-theart on the CNN dataset. However, this model used embedding vectors pretrained on a large external corpus <ref type="bibr">(Pennington et al., 2014)</ref>.</p><p>The EpiReader borrows ideas from other models as well. The Reasoner's convolutional architecture is based on Severyn and Moschitti (2016) and <ref type="bibr">Kalchbrenner et al. (2014)</ref>. Our use of word-level match- ing was inspired by the Parallel-Hierarchical model of <ref type="bibr" target="#b4">Trischler et al. (2016)</ref> and the natural language inference model of <ref type="bibr" target="#b5">Wang and Jiang (2015)</ref>. Finally, the idea of formulating and testing hypotheses for question-answering was used to great effect in IBM's DeepQA system for Jeopardy! <ref type="bibr">(Ferrucci et al., 2010)</ref>, although that was a more traditional information retrieval pipeline rather than an end-to-end neural model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Implementation and training details</head><p>To train our model we used stochastic gradient descent with the ADAM optimizer (Kingma and Ba, 2014), with an initial learning rate of 0.001. The word embeddings were initialized randomly, drawing from the uniform distribution over [−0.05, 0.05). We used batches of 32 examples, and early stopping with a patience of 2 epochs. Our model was implement in Theano <ref type="bibr" target="#b0">(Bergstra et al., 2010)</ref> using the Keras framework <ref type="bibr" target="#b2">(Chollet, 2015)</ref>. The results presented below for the EpiReader were obtained by searching over a small grid of hyperparameter settings. We selected the model that, on each dataset, maximized accuracy on the validation set, then evaluated it on the test set. We record the best settings for each dataset in <ref type="table" target="#tab_1">Table 1</ref>. As has been done previously, we train separate models on CBT's named entity (CBT-NE) and common noun (CBT-CN) splits. All our models used 2 -regularization at 0.001, λ = 50, and γ = 0.04. We did not use dropout but plan to investigate its effect in the future. <ref type="bibr">Hill et al. (2015)</ref> and <ref type="bibr" target="#b3">Kadlec et al. (2016)</ref> also present results for ensembles of their models. Time did not permit us to generate an ensemble of EpiReaders on the CNN dataset so we omit those measures; however, EpiReader ensembles (of seven models) demonstrated improved performance on the CBT dataset.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Results</head><p>In <ref type="table" target="#tab_2">Table 2</ref>, we compare the performance of the EpiReader against that of several baselines, on the validation and test sets of the CBT and CNN corpora. We measure EpiReader performance at the output of both the Extractor and the Reasoner. The EpiReader achieves state-of-the-art performance across the board for both datasets. On CNN, we score 2.2% higher on test than the best previous model of <ref type="bibr" target="#b1">Chen et al. (2016)</ref>. Interestingly, an analysis of the CNN dataset by <ref type="bibr" target="#b1">Chen et al. (2016)</ref> suggests that approximately 25% of the test examples contain coreference errors or questions which are "ambiguous/hard" even for a human analyst. If this estimate is accurate, then the EpiReader, achieving an absolute test accuracy of 74.0%, is operating close to expected human performance. On the other hand, ambiguity is unlikely to be distributed evenly over entities, so a good model should be able to perform at better-thanchance levels even on questions where the correct answer is uncertain. If, on the 25% of "noisy" questions, the model can shift its hit rate from, e.g., 1/10 to 1/3, then there is still a fair amount of performance to gain.</p><p>On CBT-CN our single model scores 4.0% higher than the previous best of the AS Reader. The improvement on CBT-NE is more modest at 1.1%. Looking more closely at our CBT-NE results, we found that the validation and test accuracies had relatively high variance even in late epochs of training. We discovered that many of the validation and test questions were asked about the same named entity, which may explain this issue.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Analysis</head><p>Aside from achieving state-of-the-art results at its final output, the EpiReader framework gives a boost to its Extractor component through the joint training process. In <ref type="table" target="#tab_2">Table 2</ref>, we provide accuracy scores evaluated at the output of the Extractor. These are all higher than the analogous scores reported for the AS Reader, which we verified ourselves to within negligible difference. Based on our own work with that We verified that our Extractor achieved a similar rate, and of course this is vital for performance of the full system, since the Reasoner cannot recover when the correct answer is not among its inputs.</p><p>Our results demonstrate that the Reasoner often corrects erroneous answers from the Extractor. <ref type="figure" target="#fig_1">Figure 2</ref> gives an example of this correction. In the text passage, from CBT-NE, Mr. Blacksnake is pursuing Mr. Toad, presumably to eat him. The dialogue in the question sentence refers to both: Mr. Toad is its subject, referred to by the pronoun "he", and Mr. Blacksnake is its object. In the preceding sentences, it is clear (to a human) that Jimmy is worried about Mr. Toad and his potential encounter with Mr. Blacksnake. The Extractor, however, points most strongly to "Toad", possibly because he has been referred to most recently. The Reasoner corrects this error and selects "Blacksnake" as the answer. This relies on a deeper understanding of the text. The named entity can, in this case, be inferred through an alternation of the entities most recently referred to. This kind alternation is typical of dialogues, when two actors Mr. Blacksnake grinned and started after him, not very fast because he knew that he wouldn't have to run very fast to catch old Mr. Toad, and he thought the exercise would do him good. … "Still, the green meadows wouldn't be quite the same without old Mr. Toad. I should miss him if anything happened to him. I suppose it would be partly my fault, too, for if I hadn't pulled over that piece of bark, he probably would have stayed there the rest of the day and been safe." QUESTION: "Maybe he won't meet Mr. XXXXX," said a little voice inside of Jimmy.</p><p>EXTRACTOR: Toad REASONER: Blacksnake 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>18.</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>21.</head><p>19. 20. interact in turns. The Reasoner can capture this behavior because it examines sentences in sequence.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>In this article we presented the novel EpiReader framework for machine comprehension, and evaluated it on two large, complex datasets: CNN and CBT. Our model achieves state-of-the-art results on these corpora, outperforming all previous approaches. In future work, we plan to augment our framework with a more powerful model for natural language inference, and explore the effect of pretraining such a model specifically on an inference task. We also plan to try simplifying the model by reusing the Extractor's biGRU encodings in the Reasoner.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>The complete EpiReader framework. The Extractor is above, the Reasoner below. Propagating the Extractor's probability estimates forward and combining them with the Reasoner's entailment estimates renders the model end-to-end differentiable.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>An abridged example from CBT-NE demonstrating corrective reranking by the Reasoner.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Sam and James played all day.</head><label></label><figDesc></figDesc><table><row><cell></cell><cell>Passage</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="3">It was a beautiful morning.</cell><cell>Embeddings</cell><cell></cell><cell></cell><cell>Word encodings</cell></row><row><cell></cell><cell>…</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="3">Sam and James played all day.</cell><cell></cell><cell>biGRU</cell><cell></cell><cell>…</cell></row><row><cell></cell><cell>…</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="3">They lived happily ever after.</cell><cell></cell><cell>Comparison</cell><cell>{</cell><cell>…</cell><cell>}</cell></row><row><cell cols="3">Question X was Sam's best friend</cell><cell>Embeddings</cell><cell>biGRU</cell><cell></cell><cell></cell><cell>{</cell><cell>Ernie Elmo James</cell><cell>p 1 p 2 p k</cell><cell>}</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>Top candidates/probabilities</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>Question encoding</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>GRU</cell></row><row><cell cols="3">It was a beautiful morning.</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="2">Convolutional</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>Network</cell><cell></cell><cell></cell></row><row><cell cols="3">They lived happily ever after.</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="3">Top candidates</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>{</cell><cell>Ernie James Elmo</cell><cell>}</cell><cell cols="2">Hypotheses</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell cols="3">James was Sam's best friend</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>)</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc>Hyperparameter settings for best EpiReaders. D is the embedding dimension, d is the hidden dimension in the Extractor GRUs, K is the number of candidates to consider, m is the filter width, NF is the number of filters, and dS is the hidden dimension in the Reasoner GRU.</figDesc><table><row><cell></cell><cell></cell><cell cols="3">Hyperparameters</cell></row><row><cell>Dataset</cell><cell>D</cell><cell>d</cell><cell cols="2">K m N F d S</cell></row><row><cell cols="4">CBT-NE 300 128 5</cell><cell>3</cell><cell>16 32</cell></row><row><cell cols="4">CBT-CN 300 128 5</cell><cell>3</cell><cell>32 32</cell></row><row><cell>CNN</cell><cell cols="4">384 256 10 3</cell><cell>32 32</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 :</head><label>2</label><figDesc>Model comparison on the CBT and CNN datasets. Results marked with 1 are from Hill et al. (2016), those marked with 2 are from Kadlec et al. (2016), those marked with 3 are from<ref type="bibr" target="#b3">Hermann et al. (2015)</ref>, and those marked with 4 are from Chen et al.</figDesc><table><row><cell>(2016).</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell cols="2">CBT-NE</cell><cell cols="2">CBT-CN</cell><cell></cell><cell>CNN</cell></row><row><cell>Model</cell><cell cols="4">valid test valid test</cell><cell>Model</cell><cell>valid test</cell></row><row><cell>Humans (context + query) 1</cell><cell>-</cell><cell>81.6</cell><cell>-</cell><cell>81.6</cell><cell cols="2">Deep LSTM Reader 3 55.0 57.0</cell></row><row><cell>LSTMs (context + query) 1 MemNNs 1 AS Reader 2 EpiReader Extractor EpiReader</cell><cell cols="4">51.2 41.8 62.6 56.0 70.4 66.6 64.2 63.0 73.8 68.6 68.8 63.4 73.2 69.4 69.9 66.7 75.3 69.7 71.5 67.4</cell><cell>Attentive Reader 3 Impatient Reader 3 MemNNs 1 AS Reader 2 Stanford AR 4</cell><cell>61.6 63.0 61.8 63.8 63.4 66.8 68.6 69.5 72.4 72.4</cell></row><row><cell>AS Reader (ensemble) 2 EpiReader (ensemble)</cell><cell cols="4">74.5 70.6 71.1 68.9 76.6 71.8 73.6 70.6</cell><cell>EpiReader Extractor EpiReader</cell><cell>71.8 72.0 73.4 74.0</cell></row><row><cell cols="4">model, we found it to overfit the training set rapidly</cell><cell></cell><cell></cell></row><row><cell cols="4">and significantly, achieving training accuracy scores</cell><cell></cell><cell></cell></row><row><cell cols="4">upwards of 98% after only 2 epochs. We suspect that</cell><cell></cell><cell></cell></row><row><cell cols="4">the Reasoner module had a regularizing effect on the</cell><cell></cell><cell></cell></row><row><cell cols="4">Extractor, but leave the verification for future work.</cell><cell></cell><cell></cell></row><row><cell cols="4">An analysis by Kadlec et al. (2016) indicates that</cell><cell></cell><cell></cell></row><row><cell cols="4">the trained AS Reader includes the correct answer</cell><cell></cell><cell></cell></row><row><cell cols="4">among its five most probable candidates on approxi-</cell><cell></cell><cell></cell></row><row><cell cols="3">mately 95% of test examples for both datasets.</cell><cell></cell><cell></cell><cell></cell></row></table><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3">This example is characteristic of the bAbI dataset<ref type="bibr" target="#b6">(Weston et al., 2015)</ref>.4  Note a benefit of forming the hypothesis: it renders bidirectional aggregation unnecessary, since knowing both the question and the putative answer "closes the loop" the same way that a bidirectional encoding would.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Neural machine translation by jointly learning to align and translate</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>References</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bahdanau</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1409.0473</idno>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="932" to="938" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>Proc. of SciPy</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A thorough examination of the cnn / daily mail reading comprehension task</title>
	</analytic>
	<monogr>
		<title level="m">Association for Computational Linguistics (ACL)</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The pascal recognising textual entailment challenge. In Machine learning challenges. evaluating predictive uncertainty, visual object classification, and recognising textual entailment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">François</forename><surname>Chollet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Dagan</surname></persName>
		</author>
		<ptr target="https://github.com/fchollet/keras" />
	</analytic>
	<monogr>
		<title level="j">AI magazine</title>
		<editor>Ferrucci et al.2010] David Ferrucci, Eric Brown, Jennifer Chu-Carroll, James Fan, David Gondek, Aditya A Kalyanpur, Adam Lally, J William Murdock</editor>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="59" to="79" />
			<date type="published" when="2006" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
	<note>Building watson: An overview of the deepqa project</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The goldilocks principle: Reading children&apos;s books with explicit memory representations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Hermann</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1511.02301</idno>
		<idno>arXiv:1604.01178</idno>
	</analytic>
	<monogr>
		<title level="m">Nal Kalchbrenner, Edward Grefenstette, and Phil Blunsom. 2014. A convolutional neural network for modelling sentences</title>
		<editor>Pennington et al.2014] Jeffrey Pennington, Richard Socher, and Christopher D Manning</editor>
		<meeting><address><addrLine>Matthew Richardson, Christopher JC Burges, and Erin Renshaw</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1997-01" />
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="1735" to="1780" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>EMNLP. Severyn and Moschitti2016] Aliaksei Severyn and Alessandro Moschitti. 2016. Modeling relational information in question-answer pairs with convolutional neural networks</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A parallel-hierarchical model for machine comprehension on sparse data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wilson L Taylor ; Adam</forename><surname>Trischler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zheng</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xingdi</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jing</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philip</forename><surname>Bachman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kaheer</forename><surname>Suleman</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1603.08884.[Vinyalsetal.2015</idno>
	</analytic>
	<monogr>
		<title level="m">Meire Fortunato, and Navdeep Jaitly. 2015. Pointer networks</title>
		<imprint>
			<date type="published" when="1953" />
			<biblScope unit="page" from="2674" to="2682" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>Advances in Neural Information Processing Systems</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jiang2015] Shuohang</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jing</forename><surname>Jiang</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1512.08849</idno>
		<idno>arXiv:1410.3916</idno>
	</analytic>
	<monogr>
		<title level="m">Sumit Chopra, and Antoine Bordes. 2014. Memory networks</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>Learning natural language inference with lstm</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Towards aicomplete question answering: A set of prerequisite toy tasks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Weston</forename></persName>
		</author>
		<idno type="arXiv">arXiv:1502.05698</idno>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
