<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /nfs/home/kabenamualus/Research/task-dataset-metric-extraction/../grobid-0.6.0/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Evolving simple programs for playing Atari games</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dennis</forename><forename type="middle">G</forename><surname>Wilson</surname></persName>
							<email>dennis.wilson@irit.fr</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Toulouse IRIT -CNRS -UMR5505 Toulouse</orgName>
								<address>
									<postCode>31015</postCode>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sylvain</forename><surname>Cussat-Blanc</surname></persName>
							<email>sylvain.cussat-blanc@irit.fr</email>
							<affiliation key="aff1">
								<orgName type="department">IRIT -CNRS -UMR5505 Toulouse</orgName>
								<orgName type="institution">University of Toulouse</orgName>
								<address>
									<postCode>31015</postCode>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hervé</forename><surname>Luga</surname></persName>
							<email>herve.luga@irit.fr</email>
							<affiliation key="aff2">
								<orgName type="department">IRIT -CNRS -UMR5505 Toulouse</orgName>
								<orgName type="institution">University of Toulouse</orgName>
								<address>
									<postCode>31015</postCode>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Julian</forename><forename type="middle">F</forename><surname>Miller</surname></persName>
							<email>julian.miller@york.ac.uk</email>
							<affiliation key="aff3">
								<orgName type="institution">University of York York</orgName>
								<address>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Evolving simple programs for playing Atari games</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1145/3205455.3205578</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.6.0" ident="GROBID-SDO" when="2021-06-25T16:46+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid-sdo"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Games</term>
					<term>Genetic programming</term>
					<term>Image analysis</term>
					<term>Arti cial intelli- gence</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Cartesian Genetic Programming (CGP) has previously shown capabilities in image processing tasks by evolving programs with a function set specialized for computer vision. A similar approach can be applied to Atari playing. Programs are evolved using mixed type CGP with a function set suited for matrix operations, including image processing, but allowing for controller behavior to emerge. While the programs are relatively small, many controllers are competitive with state of the art methods for the Atari benchmark set and require less training time. By evaluating the programs of the best evolved individuals, simple but e ective strategies can be found.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>CCS CONCEPTS</head><p>•Computing methodologies → Arti cial intelligence; Model development and analysis;</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>KEYWORDS</head><p>Games, Genetic programming, Image analysis, Arti cial intelligence</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">BACKGROUND</head><p>While game playing in the ALE involves both image processing and reinforcement learning techniques, research on these topics using CGP has not been equal. ere is a wealth of literature concerning image processing in CGP, but li le concerning reinforcement learning. Here, we therefore focus on the general history of CGP and its application to image processing.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>e Arcade Learning Environment (ALE) <ref type="bibr" target="#b0">[1]</ref> has recently been used to compare many controller algorithms, from deep Q learning to neuroevolution. is environment of Atari games o ers a number of di erent tasks with a common interface, understandable reward metrics, and an exciting domain for study, while using relatively limited computation resources. It is no wonder that this benchmark suite has seen wide adoption.</p><p>One of the di culties across the Atari domain is using pure pixel input. While the screen resolution is modest compared to modern game platforms, processing this visual information is a challenging Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for pro t or commercial advantage and that copies bear this notice and the full citation on the rst page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permi ed. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior speci c permission and/or a fee. Request permissions from permissions@acm.org. GECCO '18, Kyoto, Japan © 2018 ACM. 978-1-4503-5618-3/18/07. . . $15.00 DOI: 10.1145/3205455.3205578 task for arti cial agents. Object representations and pixel reduction schemes have been used to condense this information into a more palatable form for evolutionary controllers. Deep neural network controllers have excelled here, bene ting from convolutional layers and a history of application in computer vision.</p><p>Cartesian Genetic Programming (CGP) also has a rich history in computer vision, albeit less so than deep learning. CGP-IP has capably created image lters for denoising, object detection, and centroid determination. ere has been less study using CGP in reinforcement learning tasks, and this work represents the rst use of CGP as a game playing agent. e ALE o ers a quantitative comparison between CGP and other methods. Atari game scores are directly compared to published results of multiple di erent methods, providing a perspective on CGP's capability in comparison to other methods in this domain.</p><p>CGP has unique advantages that make its application to the ALE interesting. By using a xed-length genome, small programs can be evolved and later read for understanding. While the inner workings of a deep actor or evolved neural network might be hard to discern, the programs CGP evolves can give insight into strategies for playing the Atari games. Finally, by using a diverse function set intended for matrix operations, CGP is able to perform comparably to humans on a number of games using pixel input with no prior game knowledge.</p><p>is article is organized as follows. In the next section, Section 2, a background overview of CGP is given, followed by a history of its use in image processing. More background is provided concerning the ALE in Section 2.3. e details of the CGP implementation used in this work are given in Section 3, which also covers the application of CGP to the ALE domain. In Section 4, CGP results from 61 Atari games are compared to results from the literature and selected evolved programs are examined. Finally, in Section 5, concerns from this experiment and plans for future work are discussed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Cartesian Genetic Programming</head><p>Cartesian Genetic Programming <ref type="bibr" target="#b15">[16]</ref> is a form of Genetic Programming in which programs are represented as directed, o en acyclic graphs indexed by Cartesian coordinates. Functional nodes, dened by a set of evolved genes, connect to program inputs and to other functional nodes via their coordinates. e outputs of the program are taken from any internal node or program input based on evolved output coordinates.</p><p>In its original formulation, CGP nodes are arranged in a rectangular grid of R rows and C columns. Nodes are allowed to connect to any node from previous columns based on a connectivity parameter L which sets the number of columns back a node can connect to; for example, if L = 1, nodes could connect to the previous column only. Many modern CGP implementations, including that used in this work, use R = 1, meaning that all nodes are arranged in a single row <ref type="bibr" target="#b16">[17]</ref>.</p><p>In recurrent CGP <ref type="bibr" target="#b25">[26]</ref> (RCGP), a recurrency parameter was introduced to express the likelihood of creating a recurrent connection; when r = 0, standard CGP connections were maintained, but r could be increased by the user to create recurrent programs. is work uses a slight modi cation of the meaning of r , but the idea remains the same.</p><p>In practice, only a small portion of the nodes described by a CGP chromosome will be connected to its output program graph. ese nodes which are used are called "active" nodes here, whereas nodes that are not connected to the output program graph are referred to as "inactive" or "junk" nodes. While these nodes are not used in the nal program, they have been shown to aid evolutionary search <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b27">28,</ref><ref type="bibr" target="#b29">30]</ref>. e functions used by each node are chosen from a set of functions based on the program's genes. e choice of functions to include in this set is an important design decision in CGP. In this work, the function set is informed by MT-CGP <ref type="bibr" target="#b4">[5]</ref> and CGP-IP <ref type="bibr" target="#b5">[6]</ref>. In MT-CGP, the function of a node is overloaded based on the type of input it receives: vector functions are applied to vector input and scalar functions are applied to scalar input. e choice of function set is very important in CGP. In CGP-IP, the function set contained a subset of the OpenCV image processing library and a variety of vector operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Image Processing</head><p>CGP has been used extensively in image processing and ltering tasks. In Montes and Wya <ref type="bibr" target="#b20">[21]</ref>, centroids of objects in images were determined by CGP. A similar task was more recently undertaken in Paris et al. <ref type="bibr" target="#b21">[22]</ref>, which detected and ltered simple shapes and musical notes in images. Other image lters were evolved in Smith et al. <ref type="bibr" target="#b24">[25]</ref> and Sekanina et al. <ref type="bibr" target="#b23">[24]</ref> which involved tasks such as image denoising. Finally, Harding <ref type="bibr" target="#b3">[4]</ref> demonstrated the ability to use GPUs with CGP for improved performance in image processing tasks.</p><p>Many of these methods use direct pixel input to the evolved program. While originally demonstrated using machine learning benchmarks, MT-CGP <ref type="bibr" target="#b4">[5]</ref> o ered an improvement to CGP allowing for greater image processing techniques to follow. By using matrix inputs and functions, entire images could be processed using state of the art image processing libraries. A large subset of the OpenCV library was used in Harding et al. <ref type="bibr" target="#b5">[6]</ref> for image processing, medical imaging, and object detection in robots.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Arcade Learning Environment</head><p>e ALE o ers a related problem to image processing, but also demands reinforcement learning capability, which has not been well studied with CGP. Multiple neuroevolution approaches, including HyperNEAT, and CMA-ES were applied to pixel and object representations of the Atari games in Hausknecht et al. <ref type="bibr" target="#b7">[8]</ref>. e performance of the evolved object-based controllers demonstrated the di culties of using raw pixel input; of the 61 games evaluated, controllers using pixel input performed the best for only 5 games. Deterministic random noise was also given as input and controllers using this input performed the best for 7 games. is demonstrates the capability of methods that learn to perform a sequence of actions unrelated to input from the screen.</p><p>HyperNEAT was also used in Hausknecht et al. <ref type="bibr" target="#b6">[7]</ref> to show generalization over the Freeway and Asterix games, using a visual processing architecture to automatically nd an object representation as inputs for the neural network controller. e ability to generalize over multiple Atari games was further demonstrated in Kelly and Heywood <ref type="bibr" target="#b9">[10]</ref>, which followed Kelly and Heywood <ref type="bibr" target="#b8">[9]</ref>. In this method, tangled problem graphs (TPG) use a feature grid created from the original pixel input. When evolved on single games, the performance on 20 games was impressive, rivaling human performance in 6 games and outperforming neuroevolution.</p><p>is method generalized over sets of 3 games with li le performance decrease. e ALE is a popular benchmark suite for deep reinforcement learning. Originally demonstrated with deep Q-learning in Mnih et al. <ref type="bibr" target="#b18">[19]</ref>, the capabilities of deep neural networks to learn action policies based on pixel input was fully demonstrated in Mnih et al. <ref type="bibr" target="#b19">[20]</ref>. Finally, an actor-critic model improved upon deep network performance in Mnih et al. <ref type="bibr" target="#b17">[18]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">METHODS</head><p>While there are many examples of CGP use for image processing, these implementations had to be modi ed for playing Atari games. Most importantly, the input pixels must be processed by evolved programs to determine scalar outputs, requiring the programs to reduce the input space. e methods following were chosen to ensure comparability with other ALE results and to encourage the evolution of competitive but simple programs. e code for this paper is available as part of the CGP.jl repository. <ref type="bibr" target="#b0">1</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">CGP genotype</head><p>In this work, a oating point representation of CGP is used. It has some similarity with a previous oating point representation <ref type="bibr" target="#b2">[3]</ref>. In the genome, each node n in C columns is represented by four oats, which are all bound between [0.0, 1.0]: x input, input, function, parameter p. e x and values are used to determine the inputs to n. e function gene is cast to an integer and used to index into the list of available functions, determining f n . Finally, the parameter is scaled between [−1.0, 1.0] using p n = 2p − 1. Parameters are passed to</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Function</head><p>Description Arity Broadcasting Mathematical</p><formula xml:id="formula_0">ADD (x + )/2 2 Yes AMINUS |x − |/2 2 Yes MULT x 2 Yes CMULT xp n 1 Yes INV 1/x 1 Yes ABS |x | 1 Yes SQRT |x | 1 Yes CPOW |x | p n +1 1 Yes YPOW |x | | | 2 Yes EXPX (e x − 1)/(e 1 − 1) 1 Yes SINX sin x 1 Yes SQRTXY x 2 + 2 / √ 2 2 Yes ACOS (arccos x)/π 1 Yes ASIN 2(arcsin x)/π 1 Yes ATAN 4(arctan x)/π 1 Yes Statistical STDDEV std(ì x) 1 No SKEW skewness(ì x) 1 No KURTOSIS kurtosis(ì x) 1 No MEAN mean(ì x) 1 No RANGE max(ì x) − min(ì x) − 1 1 No ROUND round(ì x) 1 No CEIL ceil(ì x) 1 No FLOOR f loor (ì x) 1 No MAX1 max(ì x) 1 No MIN1 min(ì x) 1 No Comparison LT x &lt; 2 Yes GT x &gt; 2 Yes MAX2 max(x, ) 2 Yes MIN2</formula><p>min(x, ) 2 Yes <ref type="table">Table 1</ref>: A part of the function set used. Many of the mathematical and comparison functions are standard for inclusion in CGP function sets for scalar inputs. Where broadcast is indicated, the function was applied equally to scalar and matrix input, and where it is not, scalar inputs were passed directly to output and only matrix inputs were processed by the function.</p><p>functions, as they are used by some functions. Parameters are also used in this work as weights on the nal function, which has been done in other CGP work <ref type="bibr" target="#b10">[11]</ref>. Nodes are ordered based on their ordering in the genome. e genome begins with n output nodes which determine the index of the output nodes in the graph, and then all genes for the C program nodes. e rst n input nodes correspond to the program inputs and are not evolved; the rst node a er these will correspond to the rst four oating point values a er n output in the genome, and the next node will correspond to the next four values, and so on. e number of columns C counts only the program nodes a er n input , so, in total, the graph is composed of N = n input + C nodes and is based on G = n output + 4C genes.</p><p>When determining the inputs for a node n, the x n and n genes are scaled according to r and then rounded down to determine the index of the connected nodes, xi n and i n . e value r indicates the range over which x n and n operate; when r = 0, connections are only possible between the rst input node and the nth graph node, and when r = 1, connections are possible over the entire genome.</p><formula xml:id="formula_1">xi n = x n ((1 − n N )r + n N ) i n = n ((1 − n N )r + n N )</formula><p>Output genes are also rounded down to determine the indices of the nodes which will give the nal program output. Once all genes have been converted into nodes, the active graph is determined. Starting from the output nodes, xi n and i n are used to recursively trace the node inputs back to the nal program input. Nodes are marked as active when passed, and nodes which have already been marked active are not followed, allowing for a recursive search over graphs with recurrent connections.</p><p>With the proper nodes marked as active, the program can be processed. Due to the recurrent connections, the program must be computed in steps. Each node in the graph has an output value, which is initially set to the scalar 0. At each step, rst the output values of the program input nodes are set to the program inputs.</p><p>en, the function of each program node is computed once, using the outputs from connected nodes of the previous step as inputs.</p><p>for n = 0 to n input do out n = program input[n] end for for n = n input to N do out n = p n f n (out xi n , out i n , p n ) end for e oating point representation in this work was chosen to simplify the genome and evolution. It allows all genes to be represented as the same type, a oat, while still allowing for high precision in the evolution of the parameter gene.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Evolution</head><p>A standard 1+λ EA is used to evolve the programs. At initialization, a random genome is created using G uniformly distributed values in [0.0, 1.0]. is individual is evaluated and is considered the rst elite individual. At each generation, λ o spring are generated using genetic mutation. ese o spring are each evaluated and, if their tness is greater than or equal to that of the elite individual, they replace the elite. is process is repeated until n e al individuals have been evaluated; in other words, for n e al λ generations. e stop condition is expressed here as a number of evaluations to make runs comparable during optimization of λ. e genetic mutation operator randomly selects m nodes of the program node genes and sets them to new random values, again drawn from a uniform random distribution in [0.0, 1.0]. e output nodes are mutated according to a di erent probability; m output of the output genes are randomly set to new values during mutation. When these values have been optimized, they are o en found to be distinct. It therefore seems bene cial to include this second parameter for output mutation rate. e parameters C, r , λ, m nodes , and m output were optimized using irace <ref type="bibr" target="#b12">[13]</ref>. e values used in this experiment are presented in <ref type="table">Table 3</ref> and are somewhat standard for CGP. λ is unusually large; normal values are 4 or 5, and the maximum allowed during  <ref type="table">Table 2</ref>: List processing and other functions in the function set. e choice of many of these functions was inspired by MT-CGP <ref type="bibr" target="#b4">[5]</ref>.</p><p>C 40 m nodes 0.1 r 0.1 m output 0.6 λ 9 n e al 10000 <ref type="table">Table 3</ref>: CGP parameter values. All parameters except n e al were optimized using irace.</p><p>parameter optimization was 10. e other main parameter se ing in CGP is the choice of function set, which is detailed next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Mixed Types</head><p>In this work, the program inputs are pixel values of the Atari screen and program outputs must be scalar values, representing the preference for a speci c action. Intermediate program nodes can therefore receive a mix of matrix and scalar inputs. To handle this, each node's function was overloaded with four possible input types: (x, ), (x, ì ), (ì x, ), (ì x, ì ). For some functions, broadcasting was used to apply the same function to the scalar and matrix input types. In other functions, arity made it possible to ignore the type of the argument. Some functions, however, such as std(ì x), require matrix input. In these cases, scalar x input was passed directly to output; in other words, these functions operated as a wire when not receiving matrix input. In other functions, scalar input of either x or is necessary. In these cases, the average value of matrix input is used. Finally, some functions use inputs to index into matrices; when oating point values are used to index into matrices, they are rst multiplied by the number of elements in the matrix and then rounded down.</p><p>To account for matrix inputs of di erent sizes, the minimum of each dimension between the two matrices is taken. is inherently places more import on the earlier values along each dimension than later ones, as the later ones will o en be discarded. However, between minimizing the sizes of the two matrices and maximizing them, minimizing was found to be superior. Maximization requires a padding value to ll in smaller dimensions, for which 0, 1, and p n were used, but the resultant graphs were found to be highly dependent on this padding value.</p><p>All functions in the chosen set are designed to operate over the domain [−1.0, 1.0]. However, some functions, such as std(ì x), return values outside of this domain or are unde ned for some values in this domain. Outputs are therefore constrained to [−1.0, 1.0] and NaN and inf values are replaced with 0. is constraining operator is applied element-wise for matrix output. While this appears to limit the utility of certain functions, there have been instances of exaptation where evolution has used such functions with out-ofdomain values to achieve constant 0.0 or p n output. e function set used in this work was designed to be as simple as possible while still allowing for necessary pixel input processing. No image processing library was used, but certain matrix functions allow for pixel input to inform program output actions. e function Here, all legal controller actions are represented, but most games only use a subset of possible actions. Actions with a red mark indicate a button press. set used in this work de ned in tables <ref type="table">Table 1 and Table 2</ref>. It is a large function set and it is the intention of future work to nd the minimal necessary function set for Atari playing.</p><p>To determine the action taken, each node speci ed by an output gene is examined. For nodes with output in matrix format, the average value is taken, and for nodes with scalar output, the scalar value is taken.</p><p>ese output values are then compared and the maximum value triggers the corresponding action.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">ALE</head><p>In the ALE, there are 18 legal actions, corresponding to directional movements of the controller (8), bu on pressing (1), no action (1), and controller movement while bu on pressing <ref type="bibr" target="#b7">(8)</ref>. Not all games use every possible action; some use as few as 4 actions. In this work, outputs of the evolved program correspond only to the possible actions for each game. e output with the highest value is chosen as the controller action.</p><p>An important parameter in Atari playing is frame skip <ref type="bibr" target="#b1">[2]</ref>. In this work, the same frame skip parameter as in Hausknecht et al. <ref type="bibr" target="#b7">[8]</ref>, Kelly and Heywood <ref type="bibr" target="#b8">[9]</ref> and Mnih et al. <ref type="bibr" target="#b19">[20]</ref> is used. Frames are randomly skipped with probability p f skip = 0.25 and the previous controller action is replayed. is default value was chosen as the highest value for which human play-testers were unable to detect a delay or control lag <ref type="bibr" target="#b13">[14]</ref>. is allows the results from arti cial controllers to be directly compared to human performance. e screen representation used in this work is pixel values separated into red, green, and blue layers. A representation of the full CGP and Atari scheme is included in <ref type="figure" target="#fig_0">Figure 1</ref>.</p><p>CGP parameter optimization was performed on a subset of the full game set consisting of Boxing, Centipede, Demon A ack, Enduro, Freeway, Kung Fu Master, Space Invader, Riverraid, and Pong. ese games were chosen to represent a variety of game strategies and input types. Games were played until completion or until reaching 18000 frames, not including skipped frames. By inspecting the resultant functional graphs of an evolved CGP player and observing the node output values during its use, the strategy encoded by the program can be understood. For some of the best performing games for CGP, these strategies can remain incredibly simple. One example is Kung-Fu Master, shown in <ref type="figure" target="#fig_1">Figure 2</ref>. e strategy, which can receive a score of 57800, is to alternate between the crouching punch action (output 14), and a lateral movement (output 5). e input conditions leading to these actions can be determined through a study of the output program, but output 14 is selected in most cases based simply on the average pixel value of input 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">RESULTS</head><p>While this strategy is di cult to replicate by hand, due to the use of lateral movement, interested readers are encouraged to try simply repeating the crouching punch action on the Stella Atari emulator. e lateral movement allows the Kung-Fu Master to sometimes dodge melee a acks, but the crouching punch is sucient to wipe out the enemies and dodge half of the bullets. In fact, in comparison to the other a ack options (low kick and high kick) it appears optimal due to the reduced exposure from crouching. For the author, employing this strategy by hand achieved a be er score than playing the game normally, and the author now uses crouching punches exclusively when a acking in this game.  Other games follow a similar theme. Just as crouching is the safest position in Kung-Fu Master, the bo om le corner is safe from most enemies in Centipede. e graph of an individual from early in evolution, shown in <ref type="figure" target="#fig_3">Figure 3</ref>, demonstrates this. While this strategy alone receives a high score, it does not use any pixel input. Instead, output 17 is the only active output, and is therefore repeated continuously. is action, down-le -and-re, navigates the player to the bo om le corner and repeatedly res on enemies. Further evolved individuals do use input to dodge incoming enemies, but most revert to this basic strategy once the enemy is avoided. e common link between these simple strategies is that they are, on average, e ective. Evolution rewards agents by selecting them based on their overall performance in the game, not based on any individual action. e policy which the agent represents will therefore tend towards actions which, on average, give very good rewards. As can be seen in the case of the Kung-Fu Master, which has di erent a ack types, the best of these is chosen. Crouching punch will minimize damage to the player, maximizing the game's score and therefore the evolutionary tness. e policy encoded by the program doesn't incorporate other actions because the average reward return for these actions is lower. e safe locations found in these games can also be seen as an average maximum over the entire game space; the players don't move into di erent positions because those positions represent a higher average risk and therefore a worse evolutionary tness.</p><p>Not all CGP agents follow this pa ern, however. A counter example is boxing, which pits the agent against an Atari AI in a boxing match. e CGP agent is successful at trapping the Atari player against the ropes, leading to a quick victory, as shown in <ref type="figure">Figure 4</ref>. Doing this requires a responsive program that reacts to the Atari AI sprite, moving and placing punches correctly to back it into a corner. While the corresponding program can be read as a CGP program, it is more complex and performs more input manipulation than the previous examples. Videos of these strategies are included as supplementary material. <ref type="figure">Figure 4</ref>: Boxing, a game that uses pixel input to continuously move and take di erent actions. Here, the CGP player has pinned the Atari player against the ropes by slowly advancing on it with a series of jabs.</p><p>Finally, in <ref type="table">Table 4</ref>, CGP is compared to other state of the art results. CGP performs be er than all other compared arti cial agents on 8 games, and is tied for best with HyperNEAT for one game. On a number of games where CGP does not perform the best, it still achieves competitive scores to other methods. However, there are certain games where CGP does not perform well. ere appears to be a degree of similarity between the evolved agents (TPG <ref type="bibr" target="#b8">[9]</ref>, HyperNEAT <ref type="bibr" target="#b7">[8]</ref>). ere is also a degree of similarity between the deep learning agents (Double <ref type="bibr" target="#b26">[27]</ref>, Dueling <ref type="bibr" target="#b28">[29]</ref>, Prioritized <ref type="bibr" target="#b22">[23]</ref>, and A3C <ref type="bibr" target="#b17">[18]</ref>). e authors a ribute this similarity to the creation of a policy model for deep learning agents, which is trained over a number of frames, as opposed to a player which is evaluated over an entire episode, as is the case for the evolutionary methods. is di erence is discussed further in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">DISCUSSION</head><p>Taking all of the scores achieved by CGP into account, the capability of CGP to evolve competitive Atari agents is clear. In this work, we have demonstrated how pixel input can be processed by an evolved program to achieve, on certain games, human level results. Using a function set based on list processing, mathematics, and statistics, the pixel input can be properly processed to inform a policy which makes intelligent game decisions. e simplicity of some of the resultant programs, however, can be disconcerting, even in the face of their impressive results. Agents like a Kung-Fu Master that repeatedly crouches and punches, or a Centipede blaster that hides in the corner and res on every frame, do not seem as if they have learned about the game. Even worse, some of these strategies do not use their pixel input to inform their nal strategies, a point that was also noted in Hausknecht et al. <ref type="bibr" target="#b7">[8]</ref>. is is a clear demonstration of a key di culty in evolutionary reinforcement learning. By using the reward over the entire sequence as evolutionary tness, complex policies can be overtaken by simple polices that receive a higher average reward in evolution. While CGP showed its capability to creating complex policies, on certain games, there are more bene cial simple strategies which dominate evolution. ese simple strategies create local optima which can deceive evolution.</p><p>In future work, the authors intend to use novelty metrics to encourage a variety of policies. Novelty metrics have shown the  <ref type="table">Table 4</ref>: Average CGP scores from ve 1 + λ evolutionary runs, compared to state of the art methods. Bold indicates the best score from an arti cial player. Reported methods Double <ref type="bibr" target="#b26">[27]</ref>, Dueling <ref type="bibr" target="#b28">[29]</ref>, Prioritized <ref type="bibr" target="#b22">[23]</ref>, A3C <ref type="bibr" target="#b17">[18]</ref>, TPG <ref type="bibr" target="#b8">[9]</ref>, and HyperNEAT <ref type="bibr" target="#b7">[8]</ref> were chosen based on use of pixel input. Professional human game tester scores are from Mnih et al. <ref type="bibr" target="#b18">[19]</ref>.</p><p>ability to aid evolution in escaping local optima. <ref type="bibr" target="#b11">[12]</ref> Furthermore, deep reinforcement learning has shown that certain frames can be more important in forming the policy than others <ref type="bibr" target="#b22">[23]</ref>. Similarly, evolutionary tness could be constrained to reward from certain frames or actions and not others. Finally, reducing the frame count in evolution could also decrease the computational load of evolving on the Atari set, as the same frame, action pairs are o en computed multiple times by similar individuals. A more thorough comparison between methods on the Atari games is also necessary as future work. Deep learning methods use frame counts, instead of episode counts, to mark the training experience of a model. While the use of frame skipping is consistent between all compared works, the random seeding of environments and resulting statistical comparisons are di cult. e most available comparison baseline is with published results, but these are o en averages or sometimes single episode scores. Finally, a thorough computational performance comparison is necessary. e authors believe that CGP can achieve the reported results much faster than other methods using comparable hardware, as the main computational cost is performing the Atari games, but a more thorough analysis is necessary.</p><p>In conclusion, this work represents a rst use of CGP in the Atari domain, and the rst case of a GP method using pure pixel input. CGP was best among or competitive with other arti cial agents while o ering agents that are far less complex and can be read as a program. It was also competitive with human results on a number of games and gives insight into be er human playing strategies. While there are many avenues for improvement, this work demonstrates that CGP is competitive in the Atari domain.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Using CGP to play Atari. Red, green, blue pixel matrices are input to the evolved program, and evolved outputs determine the nal controller action.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>e Kung-Fu Master crouching approach and the functional graph of the player. Outputs which are never activated, and the computational graph leading to them, are omitted for clarity.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>e Centipede player, which only activates output 17, down-le -and-re. All other outputs are linked to null or constant zero inputs and are not shown.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">h ps://github.com/d9w/CGP.jl</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>ACKNOWLEDGMENTS is work is supported by ANR-11-LABX-0040-CIMI, within programme ANR-11-IDEX-0002-02. is work was performed using HPC resources from CALMIP (Grant P16043).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">e Arcade Learning Environment: An Evaluation Platform for General Agents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">G</forename><surname>Bellemare</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Naddaf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Veness</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bowling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Arti cial Intelligence Research</title>
		<imprint>
			<biblScope unit="volume">47</biblScope>
			<biblScope unit="page" from="253" to="279" />
			<date type="published" when="2013-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Frame skip is a powerful parameter for learning to play atari</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Braylan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Hollenbeck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elliot</forename><surname>Meyerson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Risto</forename><surname>Miikkulainen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Space</title>
		<imprint>
			<biblScope unit="volume">1600</biblScope>
			<biblScope unit="page">1800</biblScope>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A new crossover technique for Cartesian genetic programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Janet</forename><surname>Clegg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><forename type="middle">Alfred</forename><surname>Walker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Julian</forename><forename type="middle">Frances</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th annual conference on Genetic and evolutionary computation -GECCO &apos;07</title>
		<meeting>the 9th annual conference on Genetic and evolutionary computation -GECCO &apos;07<address><addrLine>New York, New York, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page">1580</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Evolution of image lters on graphics processor units using cartesian genetic programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Simon</forename><surname>Harding</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Evolutionary Computation</title>
		<imprint>
			<publisher>IEEE Congress on. IEEE</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="1921" to="1928" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">MT-CGP: Mixed Type Cartesian Genetic Programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Simon</forename><surname>Harding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vincent</forename><surname>Graziano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jürgen</forename><surname>Leitner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jürgen</forename><surname>Schmidhuber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of the fourteenth international conference on Genetic and evolutionary computation conference -GECCO</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page">751</biblScope>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Cartesian genetic programming for image processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Simon</forename><surname>Harding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jürgen</forename><surname>Leitner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juergen</forename><surname>Schmidhuber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Genetic programming theory and practice X</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="31" to="44" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">HyperNEAT-GGP: A HyperNEAT-based Atari general game player</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Piyush</forename><surname>Ma Hew Hausknecht</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Risto</forename><surname>Khandelwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Miikkulainen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Stone</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th annual conference on Genetic and evolutionary computation</title>
		<meeting>the 14th annual conference on Genetic and evolutionary computation</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="217" to="224" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A neuroevolution approach to general atari game playing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joel</forename><surname>Ma Hew Hausknecht</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Risto</forename><surname>Lehman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Miikkulainen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Stone</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Computational Intelligence and AI in Games</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="355" to="366" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Emergent Tangled Graph Representations for Atari Game Playing Agents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Kelly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Malcolm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Heywood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Conference on Genetic Programming</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="64" to="79" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Multi-task learning in Atari video games with Emergent Tangled Program Graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Kelly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Malcolm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Heywood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Genetic and Evolutionary Computation Conference</title>
		<meeting>the Genetic and Evolutionary Computation Conference</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="195" to="202" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Amplitude-oriented Mixed-type CGP Classi cation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karlo</forename><surname>Knezevic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stjepan</forename><surname>Picek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Julian</forename><forename type="middle">F</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Genetic and Evolutionary Computation Conference Companion (GECCO &apos;17</title>
		<meeting>the Genetic and Evolutionary Computation Conference Companion (GECCO &apos;17</meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="1415" to="1418" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Exploiting open-endedness to solve problems through the search for novelty</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joel</forename><surname>Lehman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Kenneth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Stanley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ALIFE</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="329" to="336" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">e irace package: Iterated racing for automatic algorithm con guration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Manuel</forename><surname>López-Ibáñez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jérémie</forename><surname>Dubois-Lacoste</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leslie</forename><forename type="middle">Pérez</forename><surname>Cáceres</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mauro</forename><surname>Bira Ari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Omas</forename><surname>Stützle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Operations Research Perspectives</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="43" to="58" />
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Revisiting the Arcade Learning Environment: Evaluation Protocols and Open Problems for General Agents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Marlos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><forename type="middle">G</forename><surname>Machado</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erik</forename><surname>Bellemare</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joel</forename><surname>Talvitie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ma</forename><forename type="middle">Hew</forename><surname>Veness</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hausknecht</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Bowling</surname></persName>
		</author>
		<idno>abs/1709.06009</idno>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Redundancy and computational e ciency in Cartesian Genetic Programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">L</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Evolutionary Computation</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="167" to="174" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Cartesian Genetic Programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">Omson</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. European Conf. on Genetic Programming</title>
		<meeting>European Conf. on Genetic Programming</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="volume">10802</biblScope>
			<biblScope unit="page" from="121" to="132" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Julian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Omson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Cartesian Genetic Programming. Natural Computing Series</title>
		<imprint>
			<biblScope unit="volume">1802</biblScope>
			<biblScope unit="page" from="121" to="132" />
			<date type="published" when="2011" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Asynchronous methods for deep reinforcement learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Volodymyr</forename><surname>Mnih</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adria</forename><forename type="middle">Puigdomenech</forename><surname>Badia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mehdi</forename><surname>Mirza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Timothy</forename><surname>Lillicrap</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tim</forename><surname>Harley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Silver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koray</forename><surname>Kavukcuoglu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning</title>
		<imprint>
			<date type="published" when="1928" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Playing atari with deep reinforcement learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Volodymyr</forename><surname>Mnih</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koray</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Silver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ioannis</forename><surname>Antonoglou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daan</forename><surname>Wierstra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Riedmiller</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1312.5602</idno>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Human-level control through deep reinforcement learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Volodymyr</forename><surname>Mnih</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koray</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Silver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrei</forename><forename type="middle">A</forename><surname>Rusu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joel</forename><surname>Veness</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Marc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Bellemare</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><forename type="middle">K</forename><surname>Riedmiller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Georg</forename><surname>Fidjeland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ostrovski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">518</biblScope>
			<biblScope unit="page">529</biblScope>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Cartesian Genetic Programming for Image Processing Tasks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Héctor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeremy</forename><forename type="middle">L</forename><surname>Montes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Wya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Neural Networks and Computational Intelligence</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="185" to="190" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Automatic learning of image lters using Cartesian genetic programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paulo Cesar Donizeti</forename><surname>Paris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emerson</forename><forename type="middle">Carlos</forename><surname>Pedrino</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mc Nicole I</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Integrated Computer-Aided Engineering</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="135" to="151" />
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Schaul</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ioannis</forename><surname>John An</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Antonoglou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Silver</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1511.05952</idno>
		<title level="m">Prioritized experience replay</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Image processing and CGP</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lukas</forename><surname>Sekanina</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Simon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wolfgang</forename><surname>Harding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Taras</forename><surname>Banzhaf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kowaliw</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Cartesian Genetic Programming</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="181" to="215" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">An implicit context representation for evolving image processing lters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Stephen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew M</forename><surname>Legge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tyrrell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshops on Applications of Evolutionary Computation</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="407" to="416" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Recurrent Cartesian Genetic Programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><forename type="middle">James</forename><surname>Turner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Julian</forename><forename type="middle">Francis</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Parallel Problem Solving from Nature</title>
		<meeting>Parallel Problem Solving from Nature</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="476" to="486" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Deep Reinforcement Learning with Double Q-Learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arthur</forename><surname>Hado Van Hasselt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Guez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Silver</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AAAI</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="2094" to="2100" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Advantages of Landscape Neutrality in Digital Circuit Evolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">K</forename><surname>Vassilev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Int. Conf. on Evolvable Systems (LNCS)</title>
		<meeting>Int. Conf. on Evolvable Systems (LNCS)</meeting>
		<imprint>
			<publisher>Springer Verlag</publisher>
			<date type="published" when="2000" />
			<biblScope unit="volume">1801</biblScope>
			<biblScope unit="page" from="252" to="263" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ziyu</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Schaul</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hado</forename><surname>Ma Eo Hessel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Van Hasselt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nando De</forename><surname>Lanctot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Freitas</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1511.06581</idno>
		<title level="m">Dueling network architectures for deep reinforcement learning</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Neutrality and the Evolvability of Boolean function landscape</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. European Conference on Genetic Programming</title>
		<meeting>European Conference on Genetic Programming</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="volume">2038</biblScope>
			<biblScope unit="page" from="204" to="217" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
