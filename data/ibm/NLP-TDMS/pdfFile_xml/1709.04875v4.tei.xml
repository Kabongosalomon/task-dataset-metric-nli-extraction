<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /nfs/home/kabenamualus/Research/task-dataset-metric-extraction/../grobid-0.6.0/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Spatio-Temporal Graph Convolutional Networks: A Deep Learning Framework for Traffic Forecasting</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bing</forename><surname>Yu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Mathematical Sciences</orgName>
								<orgName type="institution">Peking University</orgName>
								<address>
									<settlement>Beijing</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haoteng</forename><surname>Yin</surname></persName>
							<email>htyin@pku.edu.cn</email>
							<affiliation key="aff1">
								<orgName type="department">Academy for Advanced Interdisciplinary Studies</orgName>
								<orgName type="institution">Peking University</orgName>
								<address>
									<settlement>Beijing</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
							<affiliation key="aff2">
								<orgName type="department">Center for Data Science</orgName>
								<orgName type="institution">Peking University</orgName>
								<address>
									<settlement>Beijing</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhanxing</forename><surname>Zhu</surname></persName>
							<email>zhanxing.zhu@pku.edu.cn</email>
							<affiliation key="aff2">
								<orgName type="department">Center for Data Science</orgName>
								<orgName type="institution">Peking University</orgName>
								<address>
									<settlement>Beijing</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
							<affiliation key="aff3">
								<orgName type="institution">Beijing Institute of Big Data Research (BIBDR)</orgName>
								<address>
									<settlement>Beijing</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Spatio-Temporal Graph Convolutional Networks: A Deep Learning Framework for Traffic Forecasting</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.6.0" ident="GROBID-SDO" when="2021-06-26T12:23+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid-sdo"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Timely accurate traffic forecast is crucial for urban traffic control and guidance. Due to the high nonlinearity and complexity of traffic flow, traditional methods cannot satisfy the requirements of mid-and-long term prediction tasks and often neglect spatial and temporal dependencies. In this paper, we propose a novel deep learning framework, Spatio-Temporal Graph Convolutional Networks (STGCN), to tackle the time series prediction problem in traffic domain. Instead of applying regular convolutional and recurrent units, we formulate the problem on graphs and build the model with complete convolutional structures, which enable much faster training speed with fewer parameters. Experiments show that our model STGCN effectively captures comprehensive spatio-temporal correlations through modeling multi-scale traffic networks and consistently outperforms state-of-the-art baselines on various real-world traffic datasets.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Transportation plays a vital role in everybody's daily life. According to a survey in 2015, U.S. drivers spend about 48 minutes on average behind the wheel daily. 1 Under this circumstance, accurate real-time forecast of traffic conditions is of paramount importance for road users, private sectors and governments. Widely used transportation services, such as flow control, route planning, and navigation, also rely heavily on a high-quality traffic condition evaluation. In general, multiscale traffic forecast is the premise and foundation of urban traffic control and guidance, which is also one of main functions of the Intelligent Transportation System (ITS).</p><p>In the traffic study, fundamental variables of traffic flow, namely speed, volume, and density are typically chosen as indicators to monitor the current status of traffic conditions and * Equal contributions. † Corresponding author. 1 https://aaafoundation.org/american-driving-survey-2014-2015/ to predict the future. Based on the length of prediction, traffic forecast is generally classified into two scales: short-term (5 ∼ 30 min), medium and long term (over 30 min). Most prevalent statistical approaches (for example, linear regression) are able to perform well on short interval forecast. However, due to the uncertainty and complexity of traffic flow, those methods are less effective for relatively long-term predictions. Previous studies on mid-and-long term traffic prediction can be roughly divided into two categories: dynamical modeling and data-driven methods. Dynamical modeling uses mathematical tools (e.g. differential equations) and physical knowledge to formulate traffic problems by computational simulation <ref type="bibr" target="#b4">[Vlahogianni, 2015]</ref>. To achieve a steady state, the simulation process not only requires sophisticated systematic programming but also consumes massive computational power. Impractical assumptions and simplifications among the modeling also degrade the prediction accuracy. Therefore, with rapid development of traffic data collection and storage techniques, a large group of researchers are shifting their attention to data-driven approaches.</p><p>Classic statistical and machine learning models are two major representatives of data-driven methods. In timeseries analysis, autoregressive integrated moving average (ARIMA) and its variants are one of the most consolidated approaches based on classical statistics [Ahmed and <ref type="bibr" target="#b0">Cook, 1979;</ref><ref type="bibr" target="#b4">Williams and Hoel, 2003</ref>]. However, this type of model is limited by the stationary assumption of time sequences and fails to take the spatio-temporal correlation into account. Therefore, these approaches have constrained representability of highly nonlinear traffic flow. Recently, classic statistical models have been vigorously challenged by machine learning methods on traffic prediction tasks. Higher prediction accuracy and more complex data modeling can be achieved by these models, such as k-nearest neighbors algorithm (KNN), support vector machine (SVM), and neural networks (NN).</p><p>Deep learning approaches have been widely and successfully applied to various traffic tasks nowadays. Significant progress has been made in related work, for instance, deep belief network (DBN) <ref type="bibr" target="#b2">[Jia et al., 2016;</ref><ref type="bibr" target="#b1">Huang et al., 2014]</ref>, stacked autoencoder (SAE) <ref type="bibr" target="#b3">[Lv et al., 2015;</ref>. However, it is difficult for these dense networks to extract spatial and temporal features from the input jointly. Moreover, within narrow constraints or even complete absence of spatial attributes, the representative ability of these networks would be hindered seriously.</p><p>To take full advantage of spatial features, some researchers use convolutional neural network (CNN) to capture adjacent relations among the traffic network, along with employing recurrent neural network (RNN) on time axis. By combining long short-term memory (LSTM) network <ref type="bibr">[Hochreiter and Schmidhuber, 1997</ref>] and 1-D CNN, <ref type="bibr">Wu and Tan [2016]</ref> presented a feature-level fused architecture CLTFP for shortterm traffic forecast. Although it adopted a straightforward strategy, CLTFP still made the first attempt to align spatial and temporal regularities. Afterwards, <ref type="bibr" target="#b4">Shi et al. [2015]</ref> proposed the convolutional LSTM, which is an extended fullyconnected LSTM (FC-LSTM) with embedded convolutional layers. However, the normal convolutional operation applied restricts the model to only process grid structures (e.g. images, videos) rather than general domains. Meanwhile, recurrent networks for sequence learning require iterative training, which introduces error accumulation by steps. Additionally, RNN-based networks (including LSTM) are widely known to be difficult to train and computationally heavy.</p><p>For overcoming these issues, we introduce several strategies to effectively model temporal dynamics and spatial dependencies of traffic flow. To fully utilize spatial information, we model the traffic network by a general graph instead of treating it separately (e.g. grids or segments). To handle the inherent deficiencies of recurrent networks, we employ a fully convolutional structure on time axis. Above all, we propose a novel deep learning architecture, the spatio-temporal graph convolutional networks, for traffic forecasting tasks. This architecture comprises several spatio-temporal convolutional blocks, which are a combination of graph convolutional layers  and convolutional sequence learning layers, to model spatial and temporal dependencies. To the best of our knowledge, it is the first time that to apply purely convolutional structures to extract spatio-temporal features simultaneously from graph-structured time series in a traffic study. We evaluate our proposed model on two realworld traffic datasets. Experiments show that our framework outperforms existing baselines in prediction tasks with multiple preset prediction lengths and network scales.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Preliminary</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Traffic Prediction on Road Graphs</head><p>Traffic forecast is a typical time-series prediction problem, i.e. predicting the most likely traffic measurements (e.g. speed or traffic flow) in the next H time steps given the previous M traffic observations as, v t+1 , ...,v t+H = arg max vt+1,...,v t+H</p><formula xml:id="formula_0">log P (v t+1 , ..., v t+H |v t−M +1 , ..., v t ),<label>(1)</label></formula><p>where v t ∈ R n is an observation vector of n road segments at time step t, each element of which records historical observation for a single road segment.</p><p>In this work, we define the traffic network on a graph and focus on structured traffic time series. The observation v t is  <ref type="figure">Figure 1</ref>: Graph-structured traffic data. Each vt indicates a frame of current traffic status at time step t, which is recorded in a graphstructured data matrix. not independent but linked by pairwise connection in graph. Therefore, the data point v t can be regarded as a graph signal that is defined on an undirected graph (or directed one) G with weights w ij as shown in <ref type="figure">Figure 1</ref>. At the t-th time step, in graph G t = (V t , E, W ), V t is a finite set of vertices, corresponding to the observations from n monitor stations in a traffic network; E is a set of edges, indicating the connectedness between stations; while W ∈ R n×n denotes the weighted adjacency matrix of G t .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Convolutions on Graphs</head><p>A standard convolution for regular grids is clearly not applicable to general graphs. There are two basic approaches currently exploring how to generalize CNNs to structured data forms. One is to expand the spatial definition of a convolution <ref type="bibr">[Niepert et al., 2016]</ref>, and the other is to manipulate in the spectral domain with graph Fourier transforms <ref type="bibr" target="#b0">[Bruna et al., 2013]</ref>. The former approach rearranges the vertices into certain grid forms which can be processed by normal convolutional operations. The latter one introduces the spectral framework to apply convolutions in spectral domains, often named as the spectral graph convolution. Several followingup studies make the graph convolution more promising by reducing the computational complexity from O(n 2 ) to linear <ref type="bibr" target="#b3">Kipf and Welling, 2016]</ref>.</p><p>We introduce the notion of graph convolution operator " * G " based on the conception of spectral graph convolution, as the multiplication of a signal x ∈ R n with a kernel Θ,</p><formula xml:id="formula_1">Θ * G x = Θ(L)x = Θ(U ΛU T )x = U Θ(Λ)U T x,<label>(2)</label></formula><p>where graph Fourier basis U ∈ R n×n is the matrix of eigenvectors of the normalized graph Laplacian</p><formula xml:id="formula_2">L = I n − D − 1 2 W D − 1 2 = U ΛU T ∈ R n×n (I n is an identity matrix, D ∈ R n×n is the diagonal degree matrix with D ii = Σ j W ij );</formula><p>Λ ∈ R n×n is the diagonal matrix of eigenvalues of L, and filter Θ(Λ) is also a diagonal matrix. By this definition, a graph signal x is filtered by a kernel Θ with multiplication between Θ and graph Fourier transform</p><formula xml:id="formula_3">U T x [Shuman et al., 2013].</formula><p>3 Proposed Model</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Network Architecture</head><p>In this section, we elaborate on the proposed architecture of spatio-temporal graph convolutional networks (STGCN). As shown in <ref type="figure">Figure 2</ref>, STGCN is composed of several spatiotemporal convolutional blocks, each of which is formed as a "sandwich" structure with two gated sequential convolution layers and one spatial graph convolution layer in between. The details of each module are described as follows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ST-Conv Block</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ST-Conv Block</head><p>Output Layer</p><formula xml:id="formula_4">(vt-M+1, … vt) W Spatial Graph-Conv, C=16 Temporal Gated-Conv, C=64 Temporal Gated-Conv, C=64 GLU 1-D Conv Ŵ v (vt-M+1, … vt ) l l Temporal Gated-Conv ST-Conv Block (vt-M+K , … vt ) l l t v l v l+1</formula><p>Figure 2: Architecture of spatio-temporal graph convolutional networks. The framework STGCN consists of two spatio-temporal convolutional blocks (ST-Conv blocks) and a fully-connected output layer in the end. Each ST-Conv block contains two temporal gated convolution layers and one spatial graph convolution layer in the middle. The residual connection and bottleneck strategy are applied inside each block. The input vt−M+1, ..., vt is uniformly processed by ST-Conv blocks to explore spatial and temporal dependencies coherently. Comprehensive features are integrated by an output layer to generate the final predictionv.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Graph CNNs for Extracting Spatial Features</head><p>The traffic network generally organizes as a graph structure. It is natural and reasonable to formulate road networks as graphs mathematically. However, previous studies neglect spatial attributes of traffic networks: the connectivity and globality of the networks are overlooked, since they are split into multiple segments or grids. Even with 2-D convolutions on grids, it can only capture the spatial locality roughly due to compromises of data modeling. Accordingly, in our model, the graph convolution is employed directly on graphstructured data to extract highly meaningful patterns and features in the space domain. Though the computation of kernel Θ in graph convolution by Eq.</p><p>(2) can be expensive due to O(n 2 ) multiplications with graph Fourier basis, two approximation strategies are applied to overcome this issue.</p><p>Chebyshev Polynomials Approximation To localize the filter and reduce the number of parameters, the kernel Θ can be restricted to a polynomial of Λ as Θ(Λ) =</p><formula xml:id="formula_5">K−1 k=0 θ k Λ k , where θ ∈ R K is a vector of polynomial coefficients. K</formula><p>is the kernel size of graph convolution, which determines the maximum radius of the convolution from central nodes. Traditionally, Chebyshev polynomial T k (x) is used to approximate kernels as a truncated expansion of order K −1 as <ref type="bibr">et al., 2011]</ref>. The graph convolution can then be rewritten as,</p><formula xml:id="formula_6">Θ(Λ) ≈ K−1 k=0 θ k T k (Λ) with rescaledΛ = 2Λ/λ max − I n (λ max denotes the largest eigenvalue of L) [Hammond</formula><formula xml:id="formula_7">Θ * G x = Θ(L)x ≈ K−1 k=0 θ k T k (L)x,<label>(3)</label></formula><p>where T k (L) ∈ R n×n is the Chebyshev polynomial of order k evaluated at the scaled LaplacianL = 2L/λ max − I n . By recursively computing K-localized convolutions through the polynomial approximation, the cost of Eq.</p><p>(2) can be reduced to O(K|E|) as Eq. <ref type="formula" target="#formula_7">(3)</ref> shows .</p><p>1 st -order Approximation A layer-wise linear formulation can be defined by stacking multiple localized graph convolutional layers with the first-order approximation of graph Laplacian <ref type="bibr" target="#b3">[Kipf and Welling, 2016]</ref>. Consequently, a deeper architecture can be constructed to recover spatial information in depth without being limited to the explicit parameterization given by the polynomials. Due to the scaling and normalization in neural networks, we can further assume that λ max ≈ 2. Thus, the Eq.</p><p>(3) can be simplified to,</p><formula xml:id="formula_8">Θ * G x ≈ θ 0 x + θ 1 ( 2 λ max L − I n )x ≈ θ 0 x − θ 1 (D − 1 2 W D − 1 2 )x,<label>(4)</label></formula><p>where θ 0 , θ 1 are two shared parameters of the kernel. In order to constrain parameters and stabilize numerical performances, θ 0 and θ 1 are replaced by a single parameter θ by letting θ = θ 0 = −θ 1 ; W and D are renormalized bỹ W = W + I n andD ii = Σ jWij separately. Then, the graph convolution can be alternatively expressed as,</p><formula xml:id="formula_9">Θ * G x = θ(I n + D − 1 2 W D − 1 2 )x = θ(D − 1 2WD − 1 2 )x.<label>(5)</label></formula><p>Applying a stack of graph convolutions with the 1 st -order approximation vertically that achieves the similar effect as Klocalized convolutions do horizontally, all of which exploit the information from the (K −1)-order neighborhood of central nodes. In this scenario, K is the number of successive filtering operations or convolutional layers in a model instead.</p><p>Additionally, the layer-wise linear structure is parametereconomic and highly efficient for large-scale graphs, since the order of the approximation is limited to one.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Generalization of Graph Convolutions</head><p>The graph convolution operator " * G " defined on x ∈ R n can be extended to multi-dimensional tensors. For a signal with C i channels X ∈ R n×Ci , the graph convolution can be generalized by,</p><formula xml:id="formula_10">y j = Ci i=1 Θ i,j (L)x i ∈ R n , 1 ≤ j ≤ C o<label>(6)</label></formula><p>with the C i × C o vectors of Chebyshev coefficients Θ i,j ∈ R K (C i , C o are the size of input and output of the feature maps, respectively). The graph convolution for 2-D variables is denoted as "Θ * G X" with Θ ∈ R K×Ci×Co . Specifically, the input of traffic prediction is composed of M frame of road graphs as <ref type="figure">Figure 1</ref> shows. Each frame v t can be regarded as a matrix whose column i is the C i -dimensional value of v t at the i th node in graph G t , as X ∈ R n×Ci (in this case, C i = 1). For each time step t of M , the equal graph convolution operation with the same kernel Θ is imposed on X t ∈ R n×Ci in parallel. Thus, the graph convolution can be further generalized in 3-D variables, noted as "Θ * G X " with X ∈ R M ×n×Ci .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Gated CNNs for Extracting Temporal Features</head><p>Although RNN-based models become widespread in timeseries analysis, recurrent networks for traffic prediction still suffer from time-consuming iterations, complex gate mechanisms, and slow response to dynamic changes. On the contrary, CNNs have the superiority of fast training, simple structures, and no dependency constraints to previous steps. Inspired by <ref type="bibr" target="#b1">[Gehring et al., 2017]</ref>, we employ entire convolutional structures on time axis to capture temporal dynamic behaviors of traffic flows. This specific design allows parallel and controllable training procedures through multi-layer convolutional structures formed as hierarchical representations.</p><p>As <ref type="figure">Figure 2 (right)</ref> shows, the temporal convolutional layer contains a 1-D causal convolution with a width-K t kernel followed by gated linear units (GLU) as a non-linearity. For each node in graph G, the temporal convolution explores K t neighbors of input elements without padding which leading to shorten the length of sequences by K t -1 each time. Thus, input of temporal convolution for each node can be regarded as a length-M sequence with C i channels as Y ∈ R M ×Ci . The convolution kernel Γ ∈ R Kt×Ci×2Co is designed to map the input Y to a single output element [P Q] ∈ R (M −Kt+1)×(2Co) (P , Q is split in half with the same size of channels). As a result, the temporal gated convolution can be defined as,</p><formula xml:id="formula_11">Γ * T Y = P σ(Q) ∈ R (M −Kt+1)×Co ,<label>(7)</label></formula><p>where P , Q are input of gates in GLU respectively; denotes the element-wise Hadamard product. The sigmoid gate σ(Q) controls which input P of the current states are relevant for discovering compositional structure and dynamic variances in time series. The non-linearity gates contribute to the exploiting of the full input filed through stacked temporal layers as well. Furthermore, residual connections are implemented among stacked temporal convolutional layers. Similarly, the temporal convolution can also be generalized to 3-D variables by employing the same convolution kernel Γ to every node Y i ∈ R M ×Ci (e.g. sensor stations) in G equally, noted as "Γ * T Y" with Y ∈ R M ×n×Ci .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Spatio-temporal Convolutional Block</head><p>In order to fuse features from both spatial and temporal domains, the spatio-temporal convolutional block (ST-Conv block) is constructed to jointly process graph-structured time series. The block itself can be stacked or extended based on the scale and complexity of particular cases.</p><p>As illustrated in <ref type="figure">Figure 2 (mid)</ref>, the spatial layer in the middle is to bridge two temporal layers which can achieve fast spatial-state propagation from graph convolution through temporal convolutions. The "sandwich" structure also helps the network sufficiently apply bottleneck strategy to achieve scale compression and feature squeezing by downscaling and upscaling of channels C through the graph convolutional layer. Moreover, layer normalization is utilized within every ST-Conv block to prevent overfitting.</p><p>The input and output of ST-Conv blocks are all 3-D tensors. For the input v l ∈ R M ×n×C l of block l, the output v l+1 ∈</p><formula xml:id="formula_12">R (M −2(Kt−1))×n×C l+1 is computed by, v l+1 = Γ l 1 * T ReLU(Θ l * G (Γ l 0 * T v l )),<label>(8)</label></formula><p>where Γ l 0 , Γ l 1 are the upper and lower temporal kernel within block l, respectively; Θ l is the spectral kernel of graph convolution; ReLU(·) denotes the rectified linear units function. After stacking two ST-Conv blocks, we attach an extra temporal convolution layer with a fully-connected layer as the output layer in the end (See the left of <ref type="figure">Figure 2</ref>). The temporal convolution layer maps outputs of the last ST-Conv block to a single-step prediction. Then, we can obtain a final output Z ∈ R n×c from the model and calculate the speed prediction for n nodes by applying a linear transformation across c-channels asv = Zw + b, where w ∈ R c is a weight vector and b is a bias. We use L2 loss to measure the performance of our model. Thus, the loss function of STGCN for traffic prediction can be written as,</p><formula xml:id="formula_13">L(v; W θ ) = t ||v(v t−M +1 , ..., v t , W θ ) − v t+1 || 2 ,<label>(9)</label></formula><p>where W θ are all trainable parameters in the model; v t+1 is the ground truth andv(·) denotes the model's prediction.</p><p>We now summarize the main characteristics of our model STGCN in the following,</p><p>• STGCN is a universal framework to process structured time series. It is not only able to tackle traffic network modeling and prediction issues but also to be applied to more general spatio-temporal sequence learning tasks. • The spatio-temporal block combines graph convolutions and gated temporal convolutions, which can extract the most useful spatial features and capture the most essential temporal features coherently. • The model is entirely composed of convolutional structures and therefore achieves parallelization over input with fewer parameters and faster training speed. More importantly, this economic architecture allows the model to handle large-scale networks with more efficiency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Experiments</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Dataset Description</head><p>We verify our model on two real-world traffic datasets, BJER4 and PeMSD7, collected by Beijing Municipal Traffic Commission and California Deportment of Transportation, respectively. Each dataset contains key attributes of traffic observations and geographic information with corresponding timestamps, as detailed below. BJER4 was gathered from the major areas of east ring No.4 routes in Beijing City by double-loop detectors. There are 12 roads selected for our experiment. The traffic data are aggregated every 5 minutes. The time period used is from 1st July to 31st August, 2014 except the weekends. We select the first month of historical speed records as training set, and the rest serves as validation and test set respectively.</p><p>PeMSD7 was collected from Caltrans Performance Measurement System (PeMS) in real-time by over 39, 000 sensor stations, deployed across the major metropolitan areas of California state highway system <ref type="bibr" target="#b1">[Chen et al., 2001]</ref>. The dataset is also aggregated into 5-minute interval from 30-second data samples. We randomly select a medium and a large scale among the District 7 of California containing 228 and 1, 026 stations, labeled as PeMSD7(M) and PeMSD7(L), respectively, as data sources (shown in the left of <ref type="figure" target="#fig_1">Figure 3)</ref>. The time range of PeMSD7 dataset is in the weekdays of May and June of 2012. We split the training and test sets based on the same principles as above.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Data Preprocessing</head><p>The standard time interval in two datasets is set to 5 minutes. Thus, every node of the road graph contains 288 data points per day. The linear interpolation method is used to fill missing values after data cleaning. In addition, data input are normalized by Z-Score method.</p><p>In BJER4, the topology of the road graph in Beijing east No.4 ring route system is constructed by the deployment diagram of sensor stations. By collating affiliation, direction and origin-destination points of each road, the ring route system can be digitized as a directed graph.</p><p>In PeMSD7, the adjacency matrix of the road graph is computed based on the distances among stations in the traffic network. The weighted adjacency matrix W can be formed as,</p><formula xml:id="formula_14">w ij =    exp(− d 2 ij σ 2 ), i = j and exp(− d 2 ij σ 2 ) ≥ 0 , otherwise.<label>(10)</label></formula><p>where w ij is the weight of edge which is decided by d ij (the distance between station i and j). σ 2 and are thresholds to control the distribution and sparsity of matrix W , assigned to 10 and 0.5, respectively. The visualization of W is presented in the right of <ref type="figure" target="#fig_1">Figure 3</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Experimental Settings</head><p>All experiments are compiled and tested on a Linux cluster (CPU: Intel(R) Xeon(R) CPU E5-2620 v4 @ 2.10GHz, GPU: NVIDIA GeForce GTX 1080). In order to eliminate atypical traffic, only workday traffic data are adopted in our experiment <ref type="bibr" target="#b3">[Li et al., 2015]</ref>. We execute grid search strategy to locate the best parameters on validations. All the tests use 60 minutes as the historical time window, a.k.a. 12 observed data points (M = 12) are used to forecast traffic conditions in the next 15, 30, and 45 minutes (H = 3, 6, 9). Root Mean Squared Errors (RMSE) are adopted. We compare our framework STGCN with the following baselines: 1). Historical Average (HA); 2). Linear Support Victor Regression (LSVR); 3). Auto-Regressive Integrated Moving Average (ARIMA); 4). Feed-Forward Neural Network (FNN); 5). STGCN Model For BJER4 and PeMSD7(M/L), the channels of three layers in ST-Conv block are 64, 16, 64 respectively. Both the graph convolution kernel size K and temporal convolution kernel size K t are set to 3 in the model STGCN(Cheb) with the Chebyshev polynomials approximation, while the K is set to 1 in the model STGCN(1 st ) with the 1 st -order approximation. We train our models by minimizing the mean square error using RMSprop for 50 epochs with batch size as 50. The initial learning rate is 10 −3 with a decay rate of 0.7 after every 5 epochs. <ref type="table">Table 1</ref> and 2 demonstrate the results of STGCN and baselines on the datasets BJER4 and PeMSD7(M/L). Our proposed model achieves the best performance with statistical significance (two-tailed T-test, α = 0.01, P &lt; 0.01) in all three evaluation metrics. We can easily observe that traditional statistical and machine learning methods may perform well for short-term forecasting, but their long-term predictions are not accurate because of error accumulation, memorization issues, and absence of spatial information. ARIMA model performs the worst due to its incapability of handling complex spatio-temporal data. Deep learning approaches generally achieved better prediction results than traditional machine learning models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Evaluation Metric &amp; Baselines</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Experiment Results</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Benefits of Spatial Topology</head><p>Previous methods did not incorporate spatial topology and modeled the time series in a coarse-grained way. Differently, through modeling spatial topology of the sensors, our model STGCN has achieved a significant improvement on short and mid-and-long term forecasting. The advantage of STGCN is more obvious on dataset PeMSD7 than BJER4, since the sensor network of PeMS is more complicated and structured (as illustrated in <ref type="figure" target="#fig_1">Figure 3</ref>), and our model can effectively utilize spatial structure to make more accurate predictions.</p><p>To compare three methods based on graph convolution: GCGRU, STGCN(Cheb) and STGCN(1 st ), we show their     predictions during morning peak and evening rush hours, as shown in <ref type="figure">Figure 4</ref>. It is easy to observe that our proposal STGCN captures the trend of rush hours more accurately than other methods; and it detects the ending of the rush hours earlier than others. Stemming from the efficient graph convolution and stacked temporal convolution structures, our model is capable of fast responding to the dynamic changes among the traffic network without over-reliance on historical average as most of recurrent networks do.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Training Efficiency and Generalization</head><p>To see the benefits of the convolution along time axis in our proposal, we summarize the comparison of training time between STGCN and GCGRU in  do. For PeMSD7(L), GCGRU has to use the half of batch size since its GPU consumption exceeded the memory capacity of a single card (results marked as "*" in <ref type="table" target="#tab_3">Table 2)</ref>; while STGCN only need to double the channels in the middle of ST-Conv blocks. Even though our model still consumes less than a tenth of the training time of model GCGRU under this circumstance. Meanwhile, the advantages of the 1 st -order approximation have appeared since it is not restricted to the parameterization of polynomials. The model STGCN(1 st ) speeds up around 20% on a larger dataset with a satisfactory performance compared with STGCN(Cheb). In order to further investigate the performance of compared deep learning models, we plot the RMSE and MAE of the test set of PeMSD7(M) during the training process, see <ref type="figure">Figure 5</ref>. Those figures also suggest that our model can achieve much faster training procedure and easier convergences. Thanks to the special designs in ST-Conv blocks, our model has superior performances in balancing time consumption and parameter settings. Specifically, the number of parameters in STGCN (4.54 × 10 5 ) only accounts for around two third of GCGRU, and saving over 95% parameters compared to FC-LSTM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Related Works</head><p>There are several recent deep learning studies that are also motivated by the graph convolution in spatio-temporal tasks. Seo et al. <ref type="bibr">[2016]</ref> introduced graph convolutional recurrent network (GCRN) to identify jointly spatial structures and dynamic variation from structured sequences of data. The key challenge of this study is to determine the optimal combinations of recurrent networks and graph convolution under specific settings. Based on principles above, Li et al. <ref type="bibr">[2018]</ref> successfully employed the gated recurrent units (GRU) with graph convolution for long-term traffic forecasting. In contrast to these works, we build up our model completely from convolutional structures; The ST-Conv block is specially designed to uniformly process structured data with residual connection and bottleneck strategy inside; More efficient graph convolution kernels are employed in our model as well.</p><p>In this paper, we propose a novel deep learning framework STGCN for traffic prediction, integrating graph convolution and gated temporal convolution through spatio-temporal convolutional blocks. Experiments show that our model outperforms other state-of-the-art methods on two real-world datasets, indicating its great potentials on exploring spatiotemporal structures from the input. It also achieves faster training, easier convergences, and fewer parameters with flexibility and scalability. These features are quite promising and practical for scholarly development and large-scale industry deployment. In the future, we will further optimize the network structure and parameter settings. Moreover, our proposed framework can be applied into more general spatiotemporal structured sequence forecasting scenarios, such as evolving of social networks, and preference prediction in recommendation systems, etc.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>PeMS sensor network in District 7 of California (left), each dot denotes a sensor station; Heat map of weighted adjacency matrix in PeMSD7(M) (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>Full-Connected LSTM (FC-LSTM) [Sutskever et al., 2014]; 6). Graph Convolutional GRU (GCGRU) [Li et al., 2018].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :Figure 5 :</head><label>45</label><figDesc>Speed prediction in the morning peak and evening rush hours of the dataset PeMSD7. Test RMSE versus the training time (left); Test MAE versus the number of training epochs (right). (PeMSD7(M))</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>. </figDesc><table><row><cell>Model</cell><cell>MAE</cell><cell>BJER4 (15/ 30/ 45 min) MAPE (%)</cell><cell>RMSE</cell></row><row><cell>HA</cell><cell>5.21</cell><cell>14.64</cell><cell>7.56</cell></row><row><cell cols="4">LSVR 4.24/ 5STGCN(1 st ) 3.83/ 4.51/ 5.10 9.28/ 11.19/ 12.79 5.29/ 6.39/ 7.39</cell></row><row><cell cols="4">Table 1: Performance comparison of different approaches on the</cell></row><row><cell>dataset BJER4.</cell><cell></cell><cell></cell><cell></cell></row><row><cell>To measure and evaluate</cell><cell></cell><cell></cell><cell></cell></row><row><cell>the performance of different methods, Mean Absolute Er-</cell><cell></cell><cell></cell><cell></cell></row><row><cell>rors (MAE), Mean Absolute Percentage Errors (MAPE), and</cell><cell></cell><cell></cell><cell></cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 :</head><label>2</label><figDesc>Performance comparison of different approaches on the dataset PeMSD7.</figDesc><table><row><cell>Speed (km/h)</cell><cell>20 30 40 50 70 60</cell><cell>10:00</cell><cell>14:00 Ground Truth HA GCGRU STGCN(Cheb) STGCN(1st)</cell><cell>18:00</cell><cell>22:00</cell><cell>Speed (km/h)</cell><cell>70 20 30 40 50 60</cell><cell>04:00</cell><cell>10:00</cell><cell>16:00</cell><cell>22:00</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 3 .</head><label>3</label><figDesc>In terms of fairness, GCGRU consists of three layers with 64, 64, 128 units respectively in the experiment for PeMSD7(M), and STGCN uses the default settings as described in Section 4.3. Our model STGCN only consumes 272 seconds, while RNN-type of model GCGRU spends 3, 824 seconds on PeMSD7(M). This 14 times acceleration of training speed mainly benefits from applying the temporal convolution instead of recurrent structures, which can achieve fully parallel training rather than exclusively relying on chain structures as RNN</figDesc><table><row><cell>Dataset</cell><cell cols="3">Time Consumption (s) STGCN(Cheb) STGCN(1 st ) GCGRU</cell></row><row><cell>PeMSD7(M)</cell><cell>272.34</cell><cell>271.18</cell><cell>3824.54</cell></row><row><cell>PeMSD7(L)</cell><cell>1926.81</cell><cell>1554.37</cell><cell>19511.92</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 3 :</head><label>3</label><figDesc>Time consumptions of training on the dataset PeMSD7.</figDesc><table /><note></note></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Analysis of freeway traffic time-series data by using Box-Jenkins techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><surname>Cook</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mohammed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Allen R Cook ;</forename><surname>Ahmed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bruna</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1312.6203</idno>
	</analytic>
	<monogr>
		<title level="m">Spectral networks and locally connected networks on graphs</title>
		<editor>Joan Bruna, Wojciech Zaremba, Arthur Szlam, and Yann LeCun</editor>
		<imprint>
			<date type="published" when="1979" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Learning deep representation from big and heterogeneous data for traffic accident inference</title>
		<idno type="arXiv">arXiv:1705.03122</idno>
	</analytic>
	<monogr>
		<title level="m">Transportation Research Record: Journal of the Transportation Research Board</title>
		<imprint>
			<date type="published" when="1748" />
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="2191" to="2201" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>Neural computation</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Traffic speed prediction using deep learning method</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Jia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ITSC</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="1217" to="1222" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Diffusion convolutional recurrent neural network: Data-driven traffic forecasting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><surname>Welling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Thomas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Max</forename><surname>Kipf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><surname>Welling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Li</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1609.02907</idno>
		<idno>arXiv:1612.07659</idno>
	</analytic>
	<monogr>
		<title level="m">Structured sequence modeling with graph convolutional recurrent networks</title>
		<editor>Mathias Niepert, Mohamed Ahmed, and Konstantin Kutzkov</editor>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015" />
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="2014" to="2023" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>Semi-supervised classification with graph convolutional networks</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The emerging field of signal processing on graphs: Extending high-dimensional data analysis to networks and other irregular domains</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Shi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Engineering and Applied Sciences Optimization</title>
		<imprint>
			<publisher>Williams and Hoel</publisher>
			<date type="published" when="2003" />
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="664" to="672" />
		</imprint>
	</monogr>
	<note>IEEE Signal Processing Magazine</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Shortterm traffic flow forecasting with spatial-temporal correlation in a hybrid deep learning framework</title>
		<idno type="arXiv">arXiv:1612.01022</idno>
		<editor>and Tan, 2016] Yuankai Wu and Huachun Tan</editor>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
