[{"caption":"SincConv \n\nconvolutional \nlayers \nrecurrent \nlayers \n\ntemporal \npooling \n\nfeed-forward \nlayers \nfeature extraction \n\nFig. 2. Generic PyanNet end-to-end architecture used for sequence labeling (without pooling) and embedding (with pooling). \n\nAMI \nDIHARD \nETAPE \nDetER \nFA \nMiss \nDetER \nFA \nMiss DetER \nFA \nMiss \nBaseline \n11.2 [2, 3] \n6.5 \n4.7 7.7 [5] \n7.5 \n0.2 \npyannote (MFCC) [12] \n6.3 5.5 3.5 3.1 2.7 2.4 \n10.5 10.0 6.8 5.4 3.7 4.6 \n5.6 4.2 5.2 3.6 0.4 0.6 \npyannote (waveform) \n6.0 5.8 3.6 3.4 2.4 2.4 \n9.9 9.3 5.7 3.7 4.2 5.6 \n4.9 3.7 4.2 2.9 0.7 0.8 \n\nTable 1. Evaluation of pre-trained voice activity detection models, in terms of detection error (DetER %), false alarm (FA \n%), and missed detection (Miss %) rates. Results on the development set are reported using small font size. We report two \npyannote.audio variants: the first one is based on handcrafted features (MFCCs) and the other one is an end-to-end model \nprocessing the waveform directly. Baseline corresponds to the best result we could find in the literature as of October 2019. \n\n","rows":["pyannote ( MFCC ) [ 12 ]","Baseline","pyannote ( waveform )"],"columns":["convolutional","SincConv","feed - forward","DetER","pooling","ETAPE","layers","Miss","FA","recurrent","AMI","temporal","DIHARD"],"mergedAllColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."],"numberCells":[{"number":"5.7","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","recurrent","pooling","DIHARD","FA"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"0.2","isBolded":false,"associatedRows":["Baseline"],"associatedColumns":["convolutional","feed - forward","layers","ETAPE","Miss"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"2.7","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","layers","layers","AMI","Miss"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"5.6","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","feed - forward","layers","ETAPE","DetER"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"4.2","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","temporal","pooling","DIHARD","Miss"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"10.5","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","recurrent","layers","DIHARD","DetER"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"0.6","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","feed - forward","layers","ETAPE","Miss"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"4.6","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","temporal","pooling","DIHARD","Miss"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"9.9","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","recurrent","layers","DIHARD","DetER"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"4.2","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","feed - forward","layers","ETAPE","FA"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"2.4","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","layers","layers","AMI","Miss"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"3.7","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","temporal","pooling","DIHARD","FA"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"4.2","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","feed - forward","layers","ETAPE","DetER"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"9.3","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","recurrent","layers","DIHARD","DetER"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"0.7","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","feed - forward","layers","ETAPE","Miss"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"5.2","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","feed - forward","layers","ETAPE","FA"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"3.1","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","layers","layers","AMI","FA"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"2.4","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","layers","layers","AMI","Miss"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"3.7","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","feed - forward","layers","ETAPE","DetER"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"5.4","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","temporal","pooling","DIHARD","FA"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"5.6","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","temporal","pooling","DIHARD","Miss"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"0.8","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","feed - forward","layers","ETAPE","Miss"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"2.4","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","layers","layers","AMI","Miss"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"6.3","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","SincConv","layers","AMI","DetER"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"3.6","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","layers","layers","AMI","FA"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"3.7","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","temporal","pooling","DIHARD","Miss"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"6.0","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","SincConv","layers","AMI","DetER"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"5.8","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","layers","layers","AMI","DetER"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"6.5","isBolded":false,"associatedRows":["Baseline"],"associatedColumns":["convolutional","temporal","pooling","DIHARD","FA"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"11.2[2,3]","isBolded":false,"associatedRows":["Baseline"],"associatedColumns":["convolutional","recurrent","layers","DIHARD","DetER"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"6.8","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","recurrent","pooling","DIHARD","FA"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"4.7","isBolded":false,"associatedRows":["Baseline"],"associatedColumns":["convolutional","temporal","pooling","DIHARD","Miss"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"7.7[5]","isBolded":false,"associatedRows":["Baseline"],"associatedColumns":["convolutional","feed - forward","layers","ETAPE","DetER"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"7.5","isBolded":false,"associatedRows":["Baseline"],"associatedColumns":["convolutional","feed - forward","layers","ETAPE","FA"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"10.0","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","recurrent","layers","DIHARD","DetER"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"3.6","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","feed - forward","layers","ETAPE","FA"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"3.4","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","layers","layers","AMI","FA"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"3.5","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","layers","layers","AMI","FA"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"2.9","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","feed - forward","layers","ETAPE","FA"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"0.4","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","feed - forward","layers","ETAPE","Miss"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"5.5","isBolded":false,"associatedRows":["pyannote ( MFCC ) [ 12 ]"],"associatedColumns":["convolutional","layers","layers","AMI","DetER"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]},{"number":"4.9","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["convolutional","feed - forward","layers","ETAPE","DetER"],"associatedMergedColumns":["Fig . 2 . Generic PyanNet end - to - end architecture used for sequence labeling ( without pooling ) and embedding ( with pooling ) ."]}]},{"caption":"DIHARD \nETAPE \nPurity Coverage \nPurity Coverage \nPurity Coverage \nBaseline \n91.0 [13] \n90.9 [13] \npyannote (MFCC) \n89.4 90.0 \n78.7 75.2 92.4 90.0 \n74.5 76.6 90.1 90.0 \n95.9 95.7 \npyannote (waveform) 90.4 90.0 \n84.2 83.5 86.8 84.5 \n93.7 93.4 89.3 90.0 \n97.2 98.2 \n\nTable 2. Evaluation of pre-trained speaker change detection models, in terms of speech turn coverage (%) and purity (%). \nResults on the development set are reported using small font size. We report two pyannote.audio variants: the first one is \nbased on handcrafted features (MFCCs) and the other one is an end-to-end model processing the waveform directly. Baseline \ncorresponds to the best result we could find in the literature as of October 2019. \n\n","rows":["pyannote ( MFCC )","Baseline","pyannote ( waveform )"],"columns":["ETAPE","Purity","Coverage","DIHARD"],"mergedAllColumns":[],"numberCells":[{"number":"97.2","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["ETAPE","Coverage"],"associatedMergedColumns":[]},{"number":"83.5","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["DIHARD","Coverage"],"associatedMergedColumns":[]},{"number":"93.7","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["DIHARD","Coverage"],"associatedMergedColumns":[]},{"number":"93.4","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["DIHARD","Coverage"],"associatedMergedColumns":[]},{"number":"76.6","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["DIHARD","Coverage"],"associatedMergedColumns":[]},{"number":"86.8","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["DIHARD","Purity"],"associatedMergedColumns":[]},{"number":"92.4","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["DIHARD","Purity"],"associatedMergedColumns":[]},{"number":"98.2","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["ETAPE","Coverage"],"associatedMergedColumns":[]},{"number":"90.0","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["DIHARD","Purity"],"associatedMergedColumns":[]},{"number":"78.7","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["DIHARD","Coverage"],"associatedMergedColumns":[]},{"number":"95.7","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["ETAPE","Coverage"],"associatedMergedColumns":[]},{"number":"90.0","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["ETAPE","Purity"],"associatedMergedColumns":[]},{"number":"84.5","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["DIHARD","Purity"],"associatedMergedColumns":[]},{"number":"75.2","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["DIHARD","Coverage"],"associatedMergedColumns":[]},{"number":"74.5","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["DIHARD","Coverage"],"associatedMergedColumns":[]},{"number":"90.1","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["ETAPE","Purity"],"associatedMergedColumns":[]},{"number":"95.9","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["ETAPE","Coverage"],"associatedMergedColumns":[]},{"number":"90.0","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["DIHARD","Purity"],"associatedMergedColumns":[]},{"number":"90.4","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["DIHARD","Purity"],"associatedMergedColumns":[]},{"number":"84.2","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["DIHARD","Coverage"],"associatedMergedColumns":[]},{"number":"91.0[13]","isBolded":false,"associatedRows":["Baseline"],"associatedColumns":["ETAPE","Purity"],"associatedMergedColumns":[]},{"number":"90.9[13]","isBolded":false,"associatedRows":["Baseline"],"associatedColumns":["ETAPE","Coverage"],"associatedMergedColumns":[]},{"number":"90.0","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["DIHARD","Purity"],"associatedMergedColumns":[]},{"number":"90.0","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["ETAPE","Purity"],"associatedMergedColumns":[]},{"number":"89.4","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["DIHARD","Purity"],"associatedMergedColumns":[]},{"number":"89.3","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["ETAPE","Purity"],"associatedMergedColumns":[]}]},{"caption":"Table 3. Evaluation of pre-trained overlapped speech detection models, in terms of precision (%) and recall (%). Results \non the development set are reported using small font size. We report two pyannote.audio variants: the first one is based on \nhandcrafted features (MFCCs) and the other one is an end-to-end model processing the waveform directly. Baseline corresponds \nto the best result we could find in the literature as of October 2019. \n\n","rows":["pyannote ( MFCC )","Baseline","pyannote ( waveform )"],"columns":["ETAPE","Precision","Recall","AMI","DIHARD"],"mergedAllColumns":[],"numberCells":[{"number":"67.1","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["ETAPE","Precision"],"associatedMergedColumns":[]},{"number":"14.0","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["DIHARD","Recall"],"associatedMergedColumns":[]},{"number":"60.0","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["ETAPE","Precision"],"associatedMergedColumns":[]},{"number":"75.8","isBolded":false,"associatedRows":["Baseline"],"associatedColumns":["AMI","Precision"],"associatedMergedColumns":[]},{"number":"90.0","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["AMI","Precision"],"associatedMergedColumns":[]},{"number":"52.5","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["AMI","Recall"],"associatedMergedColumns":[]},{"number":"55.3","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["ETAPE","Recall"],"associatedMergedColumns":[]},{"number":"55.0","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["ETAPE","Precision"],"associatedMergedColumns":[]},{"number":"63.8","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["AMI","Recall"],"associatedMergedColumns":[]},{"number":"58.0","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["DIHARD","Precision"],"associatedMergedColumns":[]},{"number":"65.8","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["AMI","Recall"],"associatedMergedColumns":[]},{"number":"63.6","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["ETAPE","Recall"],"associatedMergedColumns":[]},{"number":"57.3","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["ETAPE","Recall"],"associatedMergedColumns":[]},{"number":"61.7","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["ETAPE","Recall"],"associatedMergedColumns":[]},{"number":"86.8","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["AMI","Precision"],"associatedMergedColumns":[]},{"number":"90.0","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["AMI","Precision"],"associatedMergedColumns":[]},{"number":"91.9","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["AMI","Precision"],"associatedMergedColumns":[]},{"number":"52.7[1]","isBolded":false,"associatedRows":["Baseline"],"associatedColumns":["ETAPE","Recall"],"associatedMergedColumns":[]},{"number":"69.6","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["ETAPE","Precision"],"associatedMergedColumns":[]},{"number":"80.5[4]","isBolded":false,"associatedRows":["Baseline"],"associatedColumns":["AMI","Precision"],"associatedMergedColumns":[]},{"number":"17.6","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["DIHARD","Recall"],"associatedMergedColumns":[]},{"number":"60.3[1]","isBolded":false,"associatedRows":["Baseline"],"associatedColumns":["ETAPE","Precision"],"associatedMergedColumns":[]},{"number":"26.7","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["DIHARD","Recall"],"associatedMergedColumns":[]},{"number":"75.3","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["DIHARD","Precision"],"associatedMergedColumns":[]},{"number":"24.4","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["DIHARD","Recall"],"associatedMergedColumns":[]},{"number":"50.2[4]","isBolded":false,"associatedRows":["Baseline"],"associatedColumns":["AMI","Recall"],"associatedMergedColumns":[]},{"number":"44.6","isBolded":false,"associatedRows":["Baseline"],"associatedColumns":["AMI","Recall"],"associatedMergedColumns":[]},{"number":"48.4","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["AMI","Recall"],"associatedMergedColumns":[]},{"number":"64.5","isBolded":false,"associatedRows":["pyannote ( waveform )"],"associatedColumns":["DIHARD","Precision"],"associatedMergedColumns":[]},{"number":"73.8","isBolded":false,"associatedRows":["pyannote ( MFCC )"],"associatedColumns":["DIHARD","Precision"],"associatedMergedColumns":[]}]},{"caption":"Baseline \n3.1 [16] \npyannote triplet loss \n7.0 WIP \npyannote additive angular margin loss 10.0 WIP \npyannote constrastive loss \n17.4 WIP \npyannote center loss \n16.6 WIP \npyannote congenerous cosine loss \n18.4 WIP \n\nTable 4. Evaluation of speaker embedding on VoxCeleb 1 \nspeaker verification task, in terms of equal error rate (%). WIP \nindicates that training is still ongoing. \n\n","rows":["Baseline8 . 4 [ 18 ]","pyannote [ 15 ] 4 . 6",". . . with overlap [ 14 ]"],"columns":["ETAPE","AMI","DIHARD"],"mergedAllColumns":[],"numberCells":[{"number":"29.6","isBolded":false,"associatedRows":["pyannote [ 15 ] 4 . 6"],"associatedColumns":["AMI"],"associatedMergedColumns":[]},{"number":"24.7","isBolded":false,"associatedRows":[". . . with overlap [ 14 ]"],"associatedColumns":["AMI"],"associatedMergedColumns":[]},{"number":"18.3","isBolded":false,"associatedRows":["pyannote [ 15 ] 4 . 6"],"associatedColumns":["ETAPE"],"associatedMergedColumns":[]},{"number":"24.5[5]","isBolded":false,"associatedRows":["Baseline8 . 4 [ 18 ]"],"associatedColumns":["ETAPE"],"associatedMergedColumns":[]},{"number":"24.0","isBolded":false,"associatedRows":["pyannote [ 15 ] 4 . 6"],"associatedColumns":["ETAPE"],"associatedMergedColumns":[]},{"number":"24.8","isBolded":false,"associatedRows":[". . . with overlap [ 14 ]"],"associatedColumns":["AMI"],"associatedMergedColumns":[]},{"number":"29.7","isBolded":false,"associatedRows":["pyannote [ 15 ] 4 . 6"],"associatedColumns":["AMI"],"associatedMergedColumns":[]},{"number":"27.1[2]","isBolded":false,"associatedRows":["Baseline8 . 4 [ 18 ]"],"associatedColumns":["DIHARD"],"associatedMergedColumns":[]},{"number":"34.4","isBolded":false,"associatedRows":["pyannote [ 15 ] 4 . 6"],"associatedColumns":["DIHARD"],"associatedMergedColumns":[]},{"number":"31.5","isBolded":false,"associatedRows":["pyannote [ 15 ] 4 . 6"],"associatedColumns":["DIHARD"],"associatedMergedColumns":[]}]},{"caption":"Table 5. Evaluation of speaker diarization pipelines in terms \nof diarization error rate (%). Baseline corresponds to the \nbest result we could find in the literature as of October 2019. \nSince ","rows":["Baseline8 . 4 [ 18 ]","pyannote [ 15 ] 4 . 6",". . . with overlap [ 14 ]"],"columns":["ETAPE","AMI","DIHARD"],"mergedAllColumns":[],"numberCells":[{"number":"27.1[2]","isBolded":false,"associatedRows":["Baseline8 . 4 [ 18 ]"],"associatedColumns":["DIHARD"],"associatedMergedColumns":[]},{"number":"24.0","isBolded":false,"associatedRows":["pyannote [ 15 ] 4 . 6"],"associatedColumns":["ETAPE"],"associatedMergedColumns":[]},{"number":"31.5","isBolded":false,"associatedRows":["pyannote [ 15 ] 4 . 6"],"associatedColumns":["DIHARD"],"associatedMergedColumns":[]},{"number":"29.7","isBolded":false,"associatedRows":["pyannote [ 15 ] 4 . 6"],"associatedColumns":["AMI"],"associatedMergedColumns":[]},{"number":"29.6","isBolded":false,"associatedRows":["pyannote [ 15 ] 4 . 6"],"associatedColumns":["AMI"],"associatedMergedColumns":[]},{"number":"24.7","isBolded":false,"associatedRows":[". . . with overlap [ 14 ]"],"associatedColumns":["AMI"],"associatedMergedColumns":[]},{"number":"18.3","isBolded":false,"associatedRows":["pyannote [ 15 ] 4 . 6"],"associatedColumns":["ETAPE"],"associatedMergedColumns":[]},{"number":"24.5[5]","isBolded":false,"associatedRows":["Baseline8 . 4 [ 18 ]"],"associatedColumns":["ETAPE"],"associatedMergedColumns":[]},{"number":"34.4","isBolded":false,"associatedRows":["pyannote [ 15 ] 4 . 6"],"associatedColumns":["DIHARD"],"associatedMergedColumns":[]},{"number":"24.8","isBolded":false,"associatedRows":[". . . with overlap [ 14 ]"],"associatedColumns":["AMI"],"associatedMergedColumns":[]}]}]