<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /nfs/home/kabenamualus/Research/task-dataset-metric-extraction/../grobid-0.6.0/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">DropGNN: Random Dropouts Increase the Expressiveness of Graph Neural Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P?l</forename><surname>Andr?s</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Papp</forename><surname>Eth</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zurich</forename><forename type="middle">Apapp@ethz</forename><surname>Ch</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karolis</forename><surname>Martinkus</surname></persName>
							<email>martinkus@ethz.ch</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eth</forename><surname>Zurich</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lukas</forename><surname>Faber</surname></persName>
							<email>lfaber@ethz.ch</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eth</forename><surname>Zurich</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><surname>Wattenhofer</surname></persName>
							<email>wattenhofer@ethz.ch</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eth</forename><surname>Zurich</surname></persName>
						</author>
						<title level="a" type="main">DropGNN: Random Dropouts Increase the Expressiveness of Graph Neural Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.6.0" ident="GROBID-SDO" when="2022-11-11T15:21+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid-sdo"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper studies Dropout Graph Neural Networks (DropGNNs), a new approach that aims to overcome the limitations of standard GNN frameworks. In DropGNNs, we execute multiple runs of a GNN on the input graph, with some of the nodes randomly and independently dropped in each of these runs. Then, we combine the results of these runs to obtain the final result. We prove that DropGNNs can distinguish various graph neighborhoods that cannot be separated by message passing GNNs. We derive theoretical bounds for the number of runs required to ensure a reliable distribution of dropouts, and we prove several properties regarding the expressive capabilities and limits of DropGNNs. We experimentally validate our theoretical findings on expressiveness. Furthermore, we show that DropGNNs perform competitively on established GNN benchmarks.</p><p>We validate our theoretical findings on established problems that are impossible to solve for standard GNNs. We find that DropGNNs clearly outperform the competition on these datasets. We further show that DropGNNs have a competitive performance on several established graph benchmarks, and they provide particularly impressive results in applications where the graph structure is really a crucial factor.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>GNNs apply deep learning to graph-structured data <ref type="bibr" target="#b29">[30]</ref>. In GNNs, every node has an embedding that is shared over multiple iterations with its neighbors. This way nodes can gather their neighbors' features. In recent years, many different models have been proposed to realize how the information between nodes is shared <ref type="bibr" target="#b34">[35]</ref>. Some approaches take inspiration from convolution [23; 8; 13], others from graph spectra [18; 5], others from attention <ref type="bibr" target="#b32">[33]</ref>, and others extend previous ideas of established concepts such as skip connections <ref type="bibr" target="#b35">[36]</ref>.</p><p>Principally, GNNs are limited in their expressiveness by the Weisfeiler-Lehman test (WL-test) <ref type="bibr" target="#b36">[37]</ref>, a heuristic to the graph isomorphism problem. The work of [37] proposes a new architecture, Graph Isomoprhism Networks (GIN), that is proven to be exactly as powerful as the WL-test. However, even GINs cannot distinguish certain different graphs, namely those that the WL-test cannot distinguish. This finding [11] motivated more expressive GNN architectures. These improvements follow two main paths.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Neural networks have been successful in handling various forms of data. Since some of the world's most interesting data is represented by graphs, Graph Neural Networks (GNNs) have achieved state-of-the-art performance in various fields such as quantum chemistry, physics, or social networks <ref type="bibr">[12; 27; 18]</ref>. On the other hand, GNNs are also known to have severe limitations and are sometimes unable to recognize even simple graph structures.</p><p>In this paper, we present a new approach to increase the expressiveness of GNNs, called Dropout Graph Neural Networks (DropGNNs). Our main idea is to execute not one but multiple different runs of the GNN. We then aggregate the results from these different runs into a final result.</p><p>In each of these runs, we remove ("drop out") each node in the graph with a small probability p. As such, the different runs of an episode will allow us to not only observe the actual extended neighborhood of a node for some number of layers d, but rather to observe various slightly perturbed versions of this d-hop neighborhood. We emphasize that this notion of dropouts is very different from the popular dropout regularization method; in particular, DropGNNs remove nodes during both training and testing, since their goal is to observe a similar distribution of dropout patterns during training and testing.</p><p>This dropout technique increases the expressive power of our GNNs dramatically: even when two distinct d-hop neighborhoods cannot be distinguished by a standard GNN, their dropout variants (with a few nodes removed) are already separable by GNNs in most cases. Thus by learning to identify the dropout patterns where the two d-hop neighborhoods differ, DropGNNs can also distinguish a wide variety of cases that are beyond the theoretical limits of standard GNNs.</p><p>Our contributions. We begin by showing several example graphs that are not distinguishable in the regular GNN setting but can be easily separated by DropGNNs. We then analyze the theoretical properties of DropGNNs in detail. We first show that executing O(?) different runs is often already sufficient to ensure that we observe a reasonable distribution of dropouts in a neighborhood of size ?. We then discuss the theoretical capabilities and limitations of DropGNNs in general, as well as the limits of the dropout approach when combined with specific aggregation methods.</p><p>The first approach augments the features of nodes or edges by additional information to make nodes with similar neighborhoods distinguishable. Several kinds of information have been used: inspired from distributed computing are port numbers on edges <ref type="bibr" target="#b27">[28]</ref>, unique IDs for nodes <ref type="bibr" target="#b19">[20]</ref>, or random features on nodes <ref type="bibr">[29; 1]</ref>. Another idea is to use angles between edges <ref type="bibr" target="#b18">[19]</ref> from chemistry (where edges correspond to electron bonds).</p><p>However, all of these approaches have some shortcomings. For ports and angles, there are some simple example graphs that still cannot be distinguished with these extensions <ref type="bibr" target="#b10">[11]</ref>. Adding IDs or random features helps during training, but the learned models do not generalize: GNNs often tend to overfit to the specific random values in the training set, and as such, they produce weaker results on unseen test graphs that received different random values. In contrast to this, DropGNNs observe a similar distribution of embeddings during training and testing, and hence they also generalize well to test set graphs.</p><p>The second approach exploits the fact that running the WL-test on tuples, triples, or generally ktuples keeps increasing its expressiveness. Thus a GNN operating on tuples of nodes has higher expressiveness than a standard GNN <ref type="bibr">[22; 21]</ref>. However, the downside of this approach is that even building a second-order graph blows up the graph quadratically. The computational cost quickly becomes a problem that needs to be to addressed, for example with sampling <ref type="bibr" target="#b21">[22]</ref>. Furthermore, second-order graph creation is a global operation of the graph that destroys the local semantics induced by the edges. In contrast to this, DropGNN can reason about graphs beyond the WL-test with only a small overhead (through run repetition), while also keeping the local graph structure intact.</p><p>Our work is also somewhat similar to the randomized smoothing approach <ref type="bibr" target="#b6">[7]</ref>, which has also been extended to GNNs recently <ref type="bibr" target="#b3">[4]</ref>. This approach also conducts multiple runs on slightly perturbed variants of the data. However, in randomized smoothing, the different embeddings are combined in a smoothing operation (e.g. majority voting), which specifically aims to get rid of the atypical perturbed variants in order to increase robustness. In contrast to this, the main idea of DropGNNs is exactly to find and identify these perturbed special cases which are notably different from the original neighborhood, since these allow us to distinguish graphs that otherwise seem identical.</p><p>Finally, we note that removing nodes is a common tool for regularization in deep neural networks, which has also seen use in GNNs <ref type="bibr">[26; 9]</ref>. However, as mentioned before, this is a different dropout concept where nodes are only removed during training to reduce the co-dependence of nodes. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">DropGNN</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">About GNNs</head><p>Almost all GNN architectures <ref type="bibr">[33; 18; 37; 8; 35; 13; 36]</ref> follow the message passing framework <ref type="bibr">[12; 3]</ref>. Every node starts with an embedding given by its initial features. One round of message passing has three steps. In the first MESSAGE step, nodes create a message based on their embedding and send this message to all neighbors. Second, nodes AGGREGATE all messages they receive. Third, every node UPDATEs its embedding based on its old embedding and the aggregated messages. One such round corresponds to one GNN layer. Usually, a GNN performs d rounds of message passing for some small constant d. Thus, the node's embedding in a GNN reflects its features and the information within its d-hop neighborhood. Finally, a READOUT method translates these final embeddings into predictions. Usually, MESSAGE, AGGREGATE, UPDATE and READOUT are functions with learnable parameters, for instance linear layers with activation functions. This GNN paradigm is closely related to the WL-test for a pair of graphs, which is an iterative color refinement procedure. In rounds 1, ..., d, each node looks at its own color and the multiset of colors of its direct neighbors, and uses a hash function to select a new color based on this information. As such, if the WL-test cannot distinguish two graphs, then a standard GNN cannot distinguish them either: intuitively, the nodes in these graphs receive the same messages and create the same embedding in each round, and thus they always arrive at the same final result.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Idea and motivation</head><p>The main idea of DropGNNs is to execute multiple independent runs of the GNN during both training and testing. In each run, every node of the GNN is removed with probability p, independently from all other nodes. If a node v is removed during a run, then v does not send or receive any messages to/from its neighbors and does not affect the remaining nodes in any way. Essentially, the GNN behaves as if v (and its incident edges) were not present in the graph in the specific run, and no embedding is computed for v in this run (see <ref type="figure" target="#fig_0">Figure 1</ref> for an illustration).</p><p>Over the course of multiple runs, dropouts allow us to not only observe the d-hop neighborhood around any node u, but also several slightly perturbed variants of this d-hop neighborhood. In the different runs, the embedding computed for u might also slightly vary, depending on which node(s) are missing from its d-hop neighborhood in a specific run. This increases the expressive power of GNNs significantly: even when two different d-hop neighborhoods cannot be distinguished by standard GNNs, the neighborhood variants observed when removing some of the nodes are usually still remarkably different. In Section 3.4, we discuss multiple examples for this improved expressiveness.</p><p>Our randomized approach means that in different runs, we will have different nodes dropping out of the GNN. As such, the GNN is only guaranteed to produce the same node embeddings in two runs if we have exactly the same subset of nodes dropping out. Given the d-hop neighborhood of a node u, we will refer to a specific subset of nodes dropping out as a dropout combination, or more concretely as a k-dropout in case the subset has size k.</p><p>In order to analyze the d-hop neighborhood of u, the reasonable strategy is to use a relatively small dropout probability p: this ensures that in each run, only a few nodes are removed (or none at all), and thus the GNN will operate on a d-hop neighborhood that is similar to the original neighborhood of u. As a result, 1-dropouts will be frequent, while for a larger k, observing a k-dropout will be unlikely.</p><p>To reduce the effect of randomization on the final outcome, we have to execute multiple independent runs of our GNN; we denote this number of runs by r. For a successful application of the dropout idea, we have to select r large enough to ensure that the set of observed dropout combinations is already reasonably close to the actual probability distribution of dropouts. In practice, this will not be feasible for k-dropouts with large k that occur very rarely, but we can already ensure for a reasonably small r that e.g. the frequency of each 1-dropout is relatively close to its expected value.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Run aggregation</head><p>Recall that standard GNNs first compute a final embedding for each node through d layers, and then they use a READOUT method to transform this into a prediction. In DropGNNs, we also need to introduce an extra phase between these two steps, called run aggregation.</p><p>In particular, we execute r independent runs of the d-layer GNN (with different dropouts), which altogether produces r distinct final embeddings for a node u. Hence we also need an extra step to merge these r distinct embeddings into a single final embedding of u, which then acts as the input for the READOUT function. This run aggregation method has to transform a multiset of embeddings into a single embedding; furthermore, it has to be a permutation-invariant function (similarly to neighborhood aggregation), since the ordering of different runs carries no meaning.</p><p>We note that simply applying a popular permutation-invariant function for run aggregation, such as sum or max, is often not expressive enough to extract sufficient information from the distribution of runs. Instead, one natural solution is to first apply a transformation on each node embedding, and only execute sum aggregation afterward. For example, a simple transformation</p><formula xml:id="formula_0">x ? ? (W x + b),</formula><p>where ? denotes a basic non-linearity such as a sigmoid or step function, is already sufficient for almost all of our examples and theoretical results in the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Motivational examples</head><p>We discuss several examples to demonstrate how DropGNNs are more expressive than standard GNNs. We only outline the intuitive ideas behind the behavior of the DropGNNs here; however, in Appendix A, we also describe the concrete functions that can separate each pair of graphs.</p><p>Example 1. <ref type="figure" target="#fig_1">Figure 2a</ref> shows a fundamental example of two different graphs that cannot be distinguished by the 1-WL test, consisting of cycles of different length. This example is known to be hard for extended GNNs variants: the two cases cannot even be distinguished if we also use port numbers or angles between the edges <ref type="bibr" target="#b10">[11]</ref>.</p><p>The simplest solution here is to consider a GNN with d = 2 layers; this already provides a very different distribution of dropouts in the two graphs. For example, the 8-cycle has 2 distinct 1-dropouts where u retains both of its direct neighbors, but it only has 1 neighbor at distance 2; such a situation is not possible in the 4-cycle at all. Alternatively, the 4-cycle has a 1-dropout case with probability p ? (1 ? p) 2 where u has 2 direct neighbors, but no distance 2 neighbors at all; this only happens for a 2-dropout in the 8-cycle, i.e. with a probability of only p 2 ? (1 ? p) 2 . With appropriate weights, a GNN can learn to recognize these situations, and thus distinguish the two cases.</p><p>Example 2. <ref type="figure" target="#fig_1">Figure 2b</ref> shows another example of two graphs that cannot be separated by a WL test; note that node features simply correspond to the degrees of the nodes. From an algorithmic perspective, it is not hard to distinguish the two graphs from specific 1-dropout cases. Let u and v denote the two gray nodes in the graphs, and consider the process from u's perspective. In both graphs, u can recognize if v is removed in a run since u does not receive a "gray" message in the first round. However, the dropout of v has a different effect in the two graphs later in the process: in the right-hand graph, it means that there is no gray neighbor at a 3-hop distance from u, while in the left-hand graph, u will still see a gray node (itself) in a 3-hop distance.</p><p>Thus by identifying the 1-dropout of v, an algorithm can distinguish the two graphs: if we observe runs where u receives no gray message in the first round, but it receives an (aggregated) gray message in the third round, then u has the left-hand neighborhood. This also means that a sufficiently powerful GNN which is equivalent to the 1-WL test can also separate the two cases.</p><p>Example 3. Note that using a sum function for neighborhood aggregation is often considered a superior choice to mean, since u cannot separate e.g. the two cases shown in <ref type="figure" target="#fig_1">Figure 2c</ref> with mean aggregation <ref type="bibr" target="#b36">[37]</ref>. However, the mean aggregation of neighbors also has some advantages over sum; most notably, it the computed values do not increase with the degree of the node.</p><p>We show that dropouts also increase the expressive power of GNNs with mean aggregation, thus possibly making mean aggregation a better choice in some applications. In particular, a DropGNN with mean aggregation is still able to separate the two cases on <ref type="figure" target="#fig_1">Figure 2c</ref>.</p><p>Assume that the two colors in the figure correspond to feature values of 1 and ?1, and let p = 1 4 . In the left-hand graph, there is a 1-dropout where u ends up with a single neighbor of value 1; hence mean aggregation yields a value of 1 with probability 1 4 ? 3 4 ? 0.19 in each run. However, in the right-hand graph, the only way to obtain a mean of 1 is through a 2-dropout or some 3-dropouts; one can calculate that the total probability of these is only 0.06 (see Appendix A). If we first transform all other values to 0 (e.g. with ?(x ? 0.5), where ? is a step function), then run aggregation with mean or sum can easily separate these cases. Note that if we apply a more complex transformation at run aggregation, then separation is even much easier, since e.g. the mean value of 0.33 can only appear in the right-hand graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Theoretical analysis 4.1 Required number of runs</head><p>We analyze DropGNNs with respect to the neighborhood of interest around a node u, denoted by ?. That is, we select a specific region around u, and we want to ensure that the distribution of dropout combinations in this region is reasonably close to the actual probabilities. This choice of ? then determines the ideal choice of p and r in our DropGNN.</p><p>One natural choice is to select ? as the entire d-hop neighborhood of u, since a GNN will always compute its final values based on this region of the graph. Note that even for this largest possible ?, the size of this neighborhood ? := |?| does not necessarily scale with the entire graph. That is, input graphs in practice are often sparse, and we can e.g. assume that their node degrees are upper bounded by a constant; this is indeed realistic in many biological or chemical applications, and also a frequent assumptions in previous works <ref type="bibr" target="#b27">[28]</ref>. In this case, having d = O(1) layers implies that ? is also essentially a constant, regardless of the size of the graph.</p><p>However, we point out that ? can be freely chosen as a neighborhood of any specific size. That is, even if a GNN aggregates information within a distance of d = 5 layers, we can still select ? to denote, for example, only the 2-hop neighborhood of u. The resulting DropGNN will still compute a final node embedding based on the entire 5-hop neighborhood of u; however, our DropGNN will now only ensure that we observe a reasonable distribution of dropout combinations in the 2-hop neighborhood of u.</p><p>In this sense, the size ? is essentially a trade-off hyperparameter: while a smaller ? will require a smaller number of runs r until the distribution of dropout combinations stabilizes, a larger ? allows us to observe more variations of the region around u.</p><p>1-complete dropouts. From a strictly theoretical perspective, choosing a sufficiently large r always allows us to observe every possible dropout combination. However, since the number of combinations is exponential in ?, this approach is not viable in practice (see Appendix B for more details).</p><p>To reasonably limit the number of necessary runs, we focus on the so-called 1-complete case: we want to have enough runs to ensure that at least every 1-dropout is observed a few times. Indeed, if we can observe each variant of ? where a single node is removed, then this might already allow a sophisticated algorithm to reconstruct a range of useful properties of ?. Note that in all of our examples, a specific 1-dropout was already sufficient to distinguish the two cases.</p><p>For any specific node v ? ?, the probability of a 1-dropout for v is p ? (1 ? p) ? in a run (including the probability that u is not dropped out). We apply the p value that maximizes the probability of such a 1-dropout; a simple differentiation shows that this maximum is obtained at p * = 1 1+? . This choice of p also implies that the probability of observing a specific 1-dropout in a run is</p><formula xml:id="formula_1">1 1 + ? ? ? 1 + ? ? ? 1 1 + ? ? 1 e .</formula><p>Hence if we execute r ? e ? (? + 1) = ?(?) runs, then the expected number of times we observe a specific 1-dropout (let us denote this by E 1 ) is at least E 1 ? r ? 1 e ? 1 1+? ? 1. Moreover, one can use a Chernoff bound to show that after ?(? log ?) runs, the frequency of each 1-dropout is sharply concentrated around E 1 . This also implies that we indeed observe each 1-dropout at least once with high probability.</p><p>For a more formal statement, let us consider a constant ? ? [0, 1] and an error probability 1 t &lt; 1. Also, given a node v ? ? (or subset S ? ?), let X v (or X S ) denote the number of times this 1-dropout (|S|-dropout) occurs during our runs.</p><formula xml:id="formula_2">Theorem 1 If r ? ? (? log ?t), then with a probability of 1 ? 1 t , it holds that for each v ? ?, we have X v ? [ (1??) ? E 1 , (1+?) ? E 1 ].</formula><p>With slightly more runs, we can even ensure that each k-dropout for k ? 2 happens less frequently than 1-dropouts. In this case, it already becomes possible to distinguish 1-dropouts from multipledropout cases based on their frequency.</p><p>Theorem 2 If r ? ? ? 2 + ? log ?t , then with a probability of 1 ? 1 t it holds that</p><formula xml:id="formula_3">? for each v ? ?, we have X v ? [ (1??) ? E 1 , (1+?) ? E 1 ], ? for each S ? ? with |S| ? 2, we have X S &lt; (1??) ? E 1 .</formula><p>Since the number of all dropout combinations is in the magnitude of 2 ? , proving this bound is slightly more technical. We discuss the proofs of these theorems in Appendix B.</p><p>Note that in sparse graphs, where ? is essentially a constant, the number of runs described in Theorems 1 and 2 is also essentially a constant; as such, DropGNNs only impose a relatively small (constant factor) overhead in this case.</p><p>Finally, note that these theorems only consider the dropout distribution around a specific node u. To ensure the same properties for all n nodes in the graph simultaneously, we need to add a further factor of n within the logarithm to the number of necessary runs in Theorems 1 and 2. However, while this is only a logarithmic dependence on n, it might still be undesired in practice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Expressive power of DropGNNs</head><p>In Section 3.4, we have seen that DropGNNs often succeed when a WL-test fails. It is natural to wonder about the capabilities and limits of the dropout approach in general; we study this question for multiple neighborhood aggregation methods separately.</p><p>We consider neighborhood aggregation with sum and mean in more detail; the proofs of the corresponding claims are discussed in Appendices C and D, respectively. Appendix D also discusses briefly why max aggregation does not combine well with the dropout approach in practice. u u 1-dropouts u <ref type="figure">Figure 3</ref>: Example of two graphs not separable by 1-dropouts (left side). In both of the graphs, for any of the 1-dropouts, u observes the same tree structure for d = 2, shown on the right side.</p><p>Aggregation with sum. Previous work has already shown that sum neighborhood aggregation allows for an injective GNN design, which computes a different embedding for any two neighborhoods whenever they are not equivalent for the WL-test <ref type="bibr" target="#b36">[37]</ref>. Intuitively speaking, this means that sum aggregation has the same expressive power as a general-purpose d-hop distributed algorithm in the corresponding model, i.e. without IDs or port numbers. Hence to understand the expressiveness of DropGNNs in this case, one needs to analyze which embeddings can be computed by such a distributed algorithm from a specific (observed) distribution of dropout combinations.</p><p>It is already non-trivial to find two distinct neighborhoods that cannot be distinguished in the 1complete case. However, such an example exists, even if we also consider 2-dropouts. That is, one can construct a pair of d-hop neighborhoods that are non-isomorphic, and yet they produce the exact same distribution of 1and 2-dropout neighborhoods in a d-layer DropGNN.</p><p>Theorem 3 There exists a pair of neighborhoods that cannot be distinguished by 1and 2-dropouts.</p><p>We illustrate a simpler example for only 1-dropouts in <ref type="figure">Figure 3</ref>. For a construction that also covers the case of 2-dropouts, the analysis is more technical; we defer this to Appendix C.</p><p>We note that even these more difficult examples can be distinguished with our dropout approach, based on their k-dropouts for larger k values. However, this requires an even higher number of runs: we need to ensure that we can observe a reliable distribution even for these many-node dropouts.</p><p>On the other hand, our dropout approach becomes even more powerful if we combine it e.g. with the extension by port numbers introduced in <ref type="bibr" target="#b27">[28]</ref>. Intuitively speaking, port numbers allow an algorithm to determine all paths to the removed node in a 1-dropout, which in turn allows us to reconstruct the entire d-hop neighborhood of u. As such, in this case, 1-complete dropouts already allow us to distinguish any two neighborhoods.</p><p>Theorem 4 In the setting of Theorem 1, a DropGNN with port numbers can distinguish any two non-isomorphic d-hop neighborhoods.</p><p>Finally, we note that the expressive power of DropGNNs in the 1-complete case is closely related to the graph reconstruction problem, which is a major open problem in theoretical computer science since the 1940s <ref type="bibr" target="#b13">[14]</ref>. We discuss the differences between the two settings in Appendix C.</p><p>Aggregation with mean. We have seen in Section 3.4 that even with mean aggregation, DropGNNs can sometimes distinguish 1-hop neighborhoods (that is, multisets S 1 and S 2 of features) which look identical to a standard GNN. One can also prove in general that a similar separation is possible in various cases, e.g. whenever the two multisets have the same size.</p><p>Lemma 1 Let S 1 = S 2 be two multisets of feature vectors with |S 1 | = |S 2 |. Then S 1 and S 2 can be distinguished by a DropGNN with mean neighborhood aggregation.</p><p>However, in the general case, mean aggregation does not allow us to separate any two multisets based on 1-dropouts. In particular, in Appendix C, we also describe an example of multisets S 1 ? S 2 = ? where the distribution of means obtained from 0and 1-dropouts is essentially identical in S 1 and S 2 . This implies that if we want to distinguish these multisets S 1 and S 2 , then the best we can hope for is a more complex approach based on multiple-node dropouts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experiments</head><p>In all cases we extend the base GNN model to a DropGNN by running the GNN r times in parallel, doing mean aggregation over the resulting r node embedding copies before the graph readout step and then applying the base GNN's graph readout. Additionally, an auxiliary readout head is added to produce predictions based on each individual run. These predictions are used for an auxiliary loss term which comprises 1 3 of the final loss. Unless stated otherwise, we set the number of runs to m and choose the dropout probability to be p = 1 m , where m is the mean number of nodes in the graphs in the dataset. This is based on the assumption, that in the datasets we use the GNN will usually have the receptive field which covers the whole graph. We implement random node dropout by, in each run, setting all features of randomly selected nodes to 0. See Appendix E for more details about the experimental setup and dataset statistics. The code is publicly available 1 .  To see the capabilities of DropGNN in practice we test on existing synthetic datasets, which are known to require expressiveness beyond the WL-test. We use the datasets from Sato et al. <ref type="bibr" target="#b28">[29]</ref> that are based on 3?regular graphs. Nodes have to predict whether they are part of a triangle (TRIANGLES) or have to predict their local clustering coefficient (LCC). We test on the two counterexamples LIMITS 1 <ref type="figure" target="#fig_1">(Figure 2a</ref>) and LIMITS 2 from Garg et al. <ref type="bibr" target="#b10">[11]</ref> where we compare two smaller structures versus one larger structure. We employ the dataset by Loukas <ref type="bibr" target="#b19">[20]</ref> to classify graphs on containing a cycle of length 4 (4-CYCLES). We increase the regularity in this dataset by ensuring that each node has a degree of 2. Finally we experiment on circular graphs with skip links (SKIP-CIRCLES) by Chen et al. <ref type="bibr" target="#b5">[6]</ref>, where the model needs to classify if a given circular graph has skip links of length {2, 3, 4, 5, 6, 9, 11, 12, 13, 16}.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Datasets beyond WL</head><p>For comparison, we try several other GNN modifications which increase expressiveness. For control, we run a vanilla GNN on these datasets. We then extend this base GNN with (i) ports <ref type="bibr" target="#b27">[28]</ref> (randomly assigned), (ii) node IDs <ref type="bibr" target="#b19">[20]</ref> (randomly permuted), and (iii) a random feature from the standard normal distribution <ref type="bibr" target="#b28">[29]</ref>. The architecture for all GNNs is a 4-layer GIN with sum as aggregation and ? = 0. For DropGNN r = 50 runs are performed. For the SKIP-CIRCLES dataset we use a 9-layer GIN instead, as the skip links can form cycles of up to 17 hops.</p><p>We train all methods for 1, 000 epochs and then evaluate the accuracy on the training set. We then test on a new graph (with new features). We report training and testing averaged across 10 initializations in <ref type="table" target="#tab_1">Table 1</ref>. We can see that DropGNN outperforms the competition.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Sensitivity analysis</head><p>We investigate the impact of the number of independent runs on the overall accuracy. Generally, we expect an increasing number of runs to more reliably produce informative dropouts. We train with a sufficiently high number of runs (50) with the same setting as before. Now, we reevaluate DropGNN but limit the runs to a smaller number. We measure the average accuracy over 10 seeds with 10 tests each and plot this average in <ref type="figure">Figure 4</ref> on three datasets: LIMITS 1 <ref type="figure">(Figure 4a</ref>), 4-CYCLES ( <ref type="figure">Figure 4b</ref>), and TRIANGLES <ref type="figure">(Figure 4c</ref>). In all three datasets, more runs directly translate to higher accuracy.</p><p>Next, we investigate the impact of the dropout probability p. We use the same setting as before, but instead of varying the number of runs in the reevaluation, we train and test with different probabilities  <ref type="figure">Figure 4</ref>: Investigating the impact of the number of runs (x?axis) versus the classification accuracy (y ?axis). In all three plots, having more runs allows for more stable dropout observations, increasing accuracy. The tradeoff is higher runtime since the model computes more runs. p on an exponential scale from 0.01 to 0.64. We also try 0 (no dropout) and 0.95 (almost everything is dropped). <ref type="figure" target="#fig_3">Figure 5</ref> shows the accuracy for each dropout probability, again averaged over 10 seeds with 10 tests each. Generally, DropGNN is robust to different values of p until p becomes very large.   <ref type="bibr" target="#b37">[38]</ref>. Following <ref type="bibr" target="#b36">[37]</ref> node degree is used as the sole input feature for the IMDB datasets, while for the bioinformatics datasets the original categorical node features are used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Graph classification</head><p>We follow the evaluation and model selection protocol described in <ref type="bibr" target="#b36">[37]</ref> and report the 10-fold cross-validation accuracies <ref type="bibr" target="#b37">[38]</ref>. We extend the original 4-layer GIN model described in <ref type="bibr" target="#b36">[37]</ref> and use the same hyper-parameter selection as <ref type="bibr" target="#b36">[37]</ref>. From <ref type="figure" target="#fig_3">Figure 5</ref> we can see that it is usually safer to use a slightly larger p than a slightly smaller one. Due to this, we set the node dropout probability to p = 2 m , where m is the mean number of nodes in the graphs in the dataset.</p><p>Our method successfully improves the results achieved by the original GIN model on the bioinformatics datasets <ref type="table" target="#tab_3">(Table 2)</ref> and is, in general, competitive with the more complex and computationally expensive expressive GNNs. Namely, the 1-2-3 GNN <ref type="bibr" target="#b21">[22]</ref> which has expressive power close to that of 3-WL and O(n 4 ) time complexity, and the Provably Powerful Graph Network (PPGN) <ref type="bibr" target="#b20">[21]</ref> which has 3-WL expressive power and O(n 3 ) time complexity. Compared to that, our method has only O(rn) time complexity. However, we do observe, that our approach slightly underperforms the original GIN model on the IMDB-M dataset. Since the other expressive GNNs also underperform when compared to the original GIN model, it is possible that classifying graphs in this dataset rarely requires higher expressiveness. In such cases, our model can lose accuracy compared to the base GNN as many runs are required to achieve a fully stable dropout distribution.  <ref type="table">Table 3</ref>: Mean absolute errors on QM9 dataset <ref type="bibr" target="#b24">[25]</ref>. Best performing model is in bold and DropGNN versions that improve over the corresponding base GNN are marked with a *.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Graph property regression</head><p>We investigate how our dropout technique performs using different base GNN models on a different, graph regression, task. We use the QM9 dataset <ref type="bibr" target="#b24">[25]</ref>, which consists of 134k organic molecules. The task is to predict 12 real-valued physical quantities for each molecule. In all cases, a separate model is trained to predict each quantity. We choose two GNN models to augment: MPNN <ref type="bibr" target="#b11">[12]</ref> and 1-GNN <ref type="bibr" target="#b21">[22]</ref>. We set the DropGNN run count and node dropout probability the same way as done for graph classification. Following previous work <ref type="bibr">[22; 21]</ref> the data is split into 80% training, 10% validation, and 10% test sets. Both DropGNN model versions are trained for 300 epochs.</p><p>From <ref type="table">Table 3</ref> we can see that Drop-1-GNN improves upon 1-GNN in most of the cases. In some of them, it even outperforms the much more computationally expensive 1-2-3-GNN, which uses higherorder graphs and has three times more parameters <ref type="bibr" target="#b21">[22]</ref>. Meanwhile, DropMPNN always substantially improves on MPNN, often outperforming the Provably Powerful Graph Network (PPGN), which as you may recall scales as O(n 3 ). This highlights the fact that while the DropGNN usually improves upon the base model, the final performance is highly dependent on the base model itself. For example, 1-GNN does not use skip connections, which might make retaining detailed information about the node's extended neighborhood much harder and this information is crucial for our dropout technique.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>We have introduced a theoretically motivated DropGNN framework, which allows us to easily increase the expressive power of existing message passing GNNs, both in theory and practice. DropGNNs are also competitive with more complex GNN architectures which are specially designed to have high expressive power but have high computational complexity. In contrast, our framework allows for an arbitrary trade-off between expressiveness and computational complexity by choosing the number of rounds r accordingly.</p><p>Societal Impact. In summary, we proposed a model-agnostic architecture improvement for GNNs. We do not strive to solve a particular problem but to enhance the GNN toolbox. Therefore, we do not see an immediate impact on society. We found in our experiments that DropGNN works best on graphs with smaller degrees, such as molecular graphs. Therefore, we imagine that using DropGNN in these scenarios is interesting to explore further.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Concrete GNN representations for the examples</head><p>In this section, we revisit the example graphs from Section 3.4, and we provide a concrete GNN implementation for each of them which is able to distinguish the two cases.</p><p>Example 1. Let us assume for simplicity that each node starts with the integer 1 as its single feature. Also, assume that neighborhood aggregation happens with a simple summation, with no non-linearity afterwards, and that this sum is then combined with the node's own feature again through a simple addition.</p><p>Now consider this GNN with d = 2 layers. Note that in this case, a node u in the left-hand graph is able to gather information from the whole cycle, while a node u in the right-hand graph will behave as if it was the middle node in a simple path of 5 nodes. In both cases, if no dropouts happen, then u will have a value of 3 after the first round, and a value of 9 after the second round.</p><p>However, the 1-dropouts are already significantly different: in the left-hand graph, they will produce a result of 5, 5 and 7, while in the right-hand graph, they result in a final value of 5, 5, 8 and 8. One can similarly compute the k-dropouts for k ? 2, which will also produce a range of other values (but at most 7 in any case).</p><p>If we apply a more sophisticated transformation on these embeddings before run aggregation, then it is straightforward to separate these two distributions. For example, we can use an MLP to only obtain a positive value in case if the embedding is 8 (we discuss this technique in more detail at Example 2); this will happen regularly for the right-hand graph, but never for the left-hand graph. After this, a simple sum run aggregation already distinguishes the cases.</p><p>However, if one prefers a simpler transformation, then a choice of ?(x ? 8) also suffices (with ? denoting the Heaviside step function). With this transformation, a run aggregation with sum simply counts the number of cases when the final embedding was a 9. Since the probability of the 0-dropout is different in the two graphs, the expected value of this count will also differ by at least ?(p ? r) after r runs, which makes them straightforward to distinguish.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example 2.</head><p>For an elegant representation of Example 2, the most convenient method is to apply a slightly more complex non-linearity for neighborhood aggregation; this allows a very simple representation for everything else in the GNN.</p><p>In particular, let us again assume that each node simply starts with an integer 1 as a feature (i.e. not even aware of its degree initially). Furthermore, assume that neighborhood aggregation happens with a simple sum operator; however, after this, we use a more sophisticated non-linearity? which ensure? ?(2) = 1, and?(x) = 0 for all other integers x. One can easily implement this function with a 2-layer MLP: we can use x 1 = ?(x ? 1) and x 2 = ?(?x + 3) as two nodes in the first layer, and then combine them with a single node ?(x 1 + x 2 ? 1) as the second layer. Finally, for the UPDATE function which merges the aggregated neighborhood x N (u) with the node's own embedding x u , let us select ?(x N (u) + x u ? 2).</p><p>The resulting GNN can be described rather easily. Each node begins with a feature of 1, and has an embedding of either 0 or 1 in any subsequent round. The update rule for the embedding is also simple: if u's own value is 1 and u has exactly 2 neighbors with a value of 1, then the embedding of u will remain 1; in any other case, u's embedding is set to 0, and it will remain 0 forever.</p><p>In case of dropouts, this GNN will behave differently in the two graphs of Example 2. Note that in both cases, whenever the connected component containing node u is not a cycle after the dropouts, then in at most d = 3 rounds, the embedding of u is set to 0. On the other hand, if the component containing u is a cycle, then the embedding of u will remain 1 after any number of rounds.</p><p>Now let u denote one of the nodes with degree 3 in both graphs. In the left-hand graph, there is a 1-dropout (of the other gray node) that puts u in a cycle, so u will produce a final embedding of 1 relatively frequently. Besides this, there are also 2 distinct 2-dropouts and a 3-dropout that removes the other gray node but keeps the triangle containing u intact; these will all result in a final embedding of 1 for u. On the other hand, in the right-hand graph, there are only 2 distinct 2-dropouts which result in a single cycle containing u.</p><p>This means that the probability of getting a final value of 1 is significantly higher in the left graph. In particular, after r runs, the difference in the expected frequency of getting a 1 is at least ?(p ? r), so we can easily separate the two cases by executing run aggregation with sum or mean.</p><p>Example 3. The base idea of this separation has already been outlined in Section 3.4: assume that the middle node u uses a simple mean aggregation of its neighbors, and the dropout probability is p = 1 4 . Since we are now interested in the behavior of a specific step of mean aggregation, we only study the GNN for d = 1 rounds.</p><p>With p = 1 4 , the left-hand graph provides the following distribution of means in a DropGNN:</p><formula xml:id="formula_4">Pr(0) = 3 4 2 and Pr(1) = Pr(?1) = 1 4 ? 3 4 .</formula><p>As such, the probability of obtaining a 1 is about 0.19. Note that we disregarded the case when all neighbors of u are removed, but we could assume for convenience that e.g. the mean function also returns 0 in this case. Furthermore, we only considered the cases when u is not removed, since these are the only runs when u computes an embedding at all.</p><p>On the other hand, in the right-hand graph, u obtains the following distribution:</p><formula xml:id="formula_5">Pr(0) = 3 4 4 + 4 ? 1 4 2 ? 3 4 2 , Pr 1 3 = Pr ? 1 3 = 2 ? 1 4 ? 3 4 3 and Pr(1) = Pr(?1) = 1 4 2 ? 3 4 2 + 2 ? 1 4 3 ? 3 4 .</formula><p>This gives a probability of about 0.06 for the value 1.</p><p>If we apply e.g. the transformation x ? ?(x ? 0.5) on these values, then the embedding 1 is indeed significantly more frequent in the left-hand graph. Using either mean or sum for run aggregation allows us to separate the two cases: the final embeddings in the two graphs will converge to 0.19 and 0.06 (both multiplied by r in case of sum).</p><p>Alternative dropout methods. Throughout the paper, we consider a natural and straightforward version of the dropout idea: some nodes of the graph (and their incident edges) are removed for an entire run. However, we note that there are also several alternative ways to implement this dropout approach. For example, one could remove edges instead of nodes, or one could remove nodes in an asymmetrical manner (e.g., they still receive, but do not send messages). We point out that all these examples from Section 3.4. could also be distinguished under these alternative models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B Required number of runs</head><p>We now discuss the proofs of Theorems 1 and 2.</p><p>Note that for any specific subset S of size k, the probability of this k-dropout happening in a specific</p><formula xml:id="formula_6">run is p k ? (1 ? p) ?+1?k = 1 1+? k ? ? 1+? ?+1?k</formula><p>. To obtain the expected frequency EX S of this k-dropout after r runs, we simply have to multiply this expression by r. Furthermore, given a constant ? ? [0, 1], a Chernoff bound shows that the probability of significantly deviating from this expected value is</p><formula xml:id="formula_7">Pr ( X S / ? [ (1??) ? EX S , (1+?) ? EX S ] ) ? 2 ? e ? ? 2 ?EX S 3 .</formula><p>Let us consider the case of Theorem 1 first. Since we have ? different 1-dropouts, we can use a union bound over these dropouts to upper bound the probability of the event that any of the nodes v ? ? will have X v / ? [ (1??) ? E 1 , (1+?) ? E 1 ]; the probability of this event is at most</p><formula xml:id="formula_8">2 ? ? ? e ? ? 2 ?E 1 3 .</formula><p>If we ensure that this probability is at most 1 t , then the desired property follows. Note that after taking a (natural) logarithm of both sides, this is equivalent to</p><formula xml:id="formula_9">log(2 ? ?) ? ? 2 ? E 1 3 ? ? log t ,</formula><p>and thus</p><formula xml:id="formula_10">E 1 ? 3 ? 2 ? log(2 ? ? ? t)</formula><p>. Recall that for E 1 we have</p><formula xml:id="formula_11">E 1 = 1 1 + ? ? ? 1 + ? ? ? r ? 1 1 + ? ? 1 e ? r .</formula><p>Due to this lower bound, it is sufficient to ensure</p><formula xml:id="formula_12">1 1 + ? ? 1 e ? r ? 3 ? 2 ? log(2 ? ? ? t) ,</formula><p>that is,</p><formula xml:id="formula_13">r ? 3e ? 2 ? (? + 1) ? log(2 ? ? ? t) = ?(? ? log ?t )</formula><p>. This completes the proof of Theorem 1.</p><p>For Theorem 2, we also need to upper bound the probability of each dropout combination of multiple nodes. Consider k-dropouts for a specific k. In this case, we have</p><formula xml:id="formula_14">EX S = 1 1 + ? k ? ? 1 + ? ?+1?k ? r = 1 ? k?1 ? E 1 .</formula><p>This implies that in order to ensure X S &lt; (1 ? ?) ? E 1 in Theorem 2, it is sufficient to have X S &lt; (1 ? ?) ? ? k?1 ? EX S . If we want to express this as (1 + ) ? EX S for some , then we get = (1 ? ?) ? ? k?1 ? 1, and thus = ? ? k?1 for appropriately chosen constants. Applying a Chernoff bound (in this case, a different variant that also allows &gt; 1) then gives</p><formula xml:id="formula_15">Pr ( X S ? (1+ ) ? EX S ) ? e ? 2 ?EX S 2+ . Since = ? ? k?1 and EX S = ? ?(k?1) ? E 1 , this is in fact e ??(1)?? k?1 ?? ?(k?1) ?E1 = e ??(1)?E1 .</formula><p>Note that the number of different k-dropouts is ? k ? 2 ? , so with a union bound, we can establish this property for each k-dropout simultaneously; for this, we need to multiply this error probability by 2 ? . Finally, since we want to ensure this for all k ? 2, we can take a union bound over k ? {2, 3, ..., ?}, getting another multiplier of ?. Thus to obtain the second condition in Theorem 2 with error probability</p><formula xml:id="formula_16">1 t , we need ? ? 2 ? ? e ??(1)?E1 ? 1 t .</formula><p>After taking a logarithm and reorganization, we get</p><formula xml:id="formula_17">E 1 ? ?(1) ? log(2 ? ? ? ? t) .</formula><p>With our lower bound for E 1 and a reorganization of the right side, we can reduce this to r ? ?(1) ? (? + 1) ? ? ? log(2 ? ? ? t) = ? ? 2 + log ?t .</p><p>Another union bound shows that the two conditions of Theorem 2 also hold simultaneously when r is in this magnitude, thus completing the proof of Theorem 2.</p><p>Note that if we want to ensure this property for the neighborhood of all the n nodes in the graph simultaneously, then we also have to take a union bound over all the n nodes, which results in a factor of n within the logarithm in our final bounds on r.</p><p>Asymptotic analysis. Finally, let us note that from a strictly theoretical perspective, if we consider ? to be a constant, and p to be some function of ?, then the probability of any specific k-dropout is p k ? (1 ? p) ?+1?k , i.e. a constant value. As such, a Chernoff bound shows that if we select r to be a sufficiently large constant, then every possible dropout combination is observed, and their frequencies are reasonable close to the expected values.</p><p>However, this approach is clearly not realistic in practice: e.g. for our choice of p ? ? ?1 , the probability of a specific k-dropout is less than p k ? ? ?k . This means that we need r ? ? k runs even to observe this k-dropout at least once in expectation. While this ? k is, asymptotically speaking, only a constant value, it still induces a very large overhead in practice, even for relatively small k and ? values.</p><p>Different ? and p values. Note that our choice of ? was defined for an arbitrary node of the graph; however, the dropout probability p, chosen as a function of ?, is a global parameter of DropGNNs. As such, our choice of p from the analysis only works well if we assume that the graph is relatively homogeneous, i.e. ? is similar for every node.</p><p>In practice, one can simply apply the average or the maximum of these different ? values; a slightly smaller/larger than optimal p only means that we observe some dropouts with slightly lower probability, or we execute slightly more runs than necessary. The ablation studies in Figures 4 and 5 also show that our approach is generally robust to different number of runs and different dropout probabilities. We note, however, that if e.g. the graph consists of several different but separately homogeneous regions, then a more sophisticated approach could apply a different p value in each of these regions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C Expressiveness with sum aggregation</head><p>We now discuss our claims on DropGNNs with sum neighborhood aggregation. Recall that with this aggregation method, a GNN with injective functions (such as GIN) has the same expressive power as the WL-test.</p><p>Note that in this setting, we understand a d-hop neighborhood around u to refer to the part of the graph that u can observe in d rounds of message passing. In particular, this contains (i) all nodes that are at most d hops away from u, and (ii) all the edges induced by these nodes, except for the edges where both endpoints are exactly at distance d from u.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C.1 Proof of Theorem 3</head><p>To prove Theorem 3, we show two different d-neighborhoods around a node u (for d = 2) that are non-isomorphic, but they generate the exact same distribution of observations for u if we only consider the case of k-dropouts for k ? 2.</p><p>Note that the example graphs on <ref type="figure">Figure 3</ref> already provide an example where the 0-dropout and the 1-dropouts are identical. One can easily check this from the figure: in case of no dropouts, u observes the same tree representation in d = 2 steps, and in case of any of the 6 possible 1-dropouts (in either of the graphs), u observes the tree structure shown on the right side of the figure.</p><p>To also extend this example to the case of 2-dropouts, we need to slightly change it. Note that the example graph is essentially constructed in the following way: we take two independent cycles of length 3 in one case, and a single cycle of length 6 in the other case, and in both graphs, we connect all these nodes to an extra node u. This construction is easy to generalize to larger cycle lengths. In particular, let us consider an integer ? 3, and create the following two graphs: in one of them, we take two independent cycles of length , and connect each node to an extra node u, while in the other one, we take a single cycle of length 2 ? , and connect each node to an extra node u.</p><p>We claim that with a choice of = 5, this construction suffices for Theorem 3. As before, one can easily verify that u observes the same 2-hop neighborhood in case of no dropouts, and also identical 2-hop neighborhoods for any of the 10 possible 1-dropouts in both graphs. The latter essentially has the same structure as the right-hand tree in <ref type="figure">Figure 3</ref>, except for the fact that the number of degree-3 branches (i.e. the ones on the left side of u in the figure) is now 7 instead of 3.</p><p>It only remains to analyze the distribution of 2-dropouts. For this, note that the only information that u can gather in d = 2 rounds is the multiset of degrees of its neighbors. In practice, this will depend on the distance of the two removed nodes in the cycles; in particular, we can have the following cases:</p><p>1. If the two nodes are neighbors in (one of) the cycle(s), then due to the dropouts, u will have two neighbors of degree 2, and six neighbors of degree 3. There are 2 ? = 10 possible cases to have this dropout combination in both graphs.</p><p>2. If the two nodes are at distance 2 in (one of) the cycle(s), then u will have a single neighbor of degree 1, two neighbors of degree 2 and five neighbors of degree 3. This can again happen in 2 ? = 10 different ways in both graphs.</p><p>3. If the nodes have distance at least 3 within the same cycle, or they are in different cycles, then the dropout creates four neighbors of degree 2, and four neighbors of degree 3. In the 2 ? cycle, this can happen in 2? ?(2? ?5) 2 = 2 ? 2 ? 5 ? = 25 different ways. In case of the two distinct -cycles, this cannot happen in a single cycle at all (i.e. for general , it can happen in ?( ?5) 2 ways, but this equals to 0 for = 5); however, it can still happen if the two dropouts happen in different cycles, in ? = 25 different ways.</p><p>Hence the distribution of observed neighborhoods is also identical in case of 2-dropouts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C.2 Proof of Theorem 4</head><p>The setting of Theorem 4 considers GNNs with port numbers (such as CPNGNN) where the neighborhood aggregation function is not permutation invariant, i.e. it can produce a different result for a different ordering of the inputs (neighbors) <ref type="bibr" target="#b27">[28]</ref>. Our proof of the theorem already builds on the fact that one can extend the idea of injective GNNs (such as GIN in <ref type="bibr" target="#b36">[37]</ref>) to this setting with port numbers. To show that port numbers can be combined with the injective property, one can e.g. apply the same proof approach as in <ref type="bibr" target="#b36">[37]</ref>, using the fact that the possible combinations of embeddings and port numbers is still a countable set.</p><p>Given such an injective GNN with port numbers, the expressiveness of this GNN is once again identical to that of a general distributed algorithm in the message passing model with port numbers <ref type="bibr" target="#b27">[28]</ref>. As such, it suffices to show that a distributed algorithm in this model can separate any two different d-hop neighborhoods.</p><p>Let us assume the 1-complete setting of Theorem 1, i.e. that we have sufficiently many runs to ensure that each 1-dropout is observed at least once in the d-hop neighborhood of u. We show that the set of neighborhoods observed this way is sufficient to separate any two neighborhoods, regardless of the frequency of multi-dropout cases.</p><p>The general idea of the proof is that 1-dropouts are already sufficient to recognize when two nodes in the tree representation of u's neighborhood are actually corresponding to the same node. Consider three nodes v 1 , v 2 and v 3 , and assume that edges (v 1 , v 3 ) and (v 2 , v 3 ) are both within the d-hop neighborhood of u. More specifically, assume that v 1 's port number b 1 leads to v 3 , and v 2 's port number b 2 also leads to v 3 ; then we can observe that the nodes at the endpoints of these two edges are always missing from the graph at the same time. That is, since we are guaranteed to observe every 1-dropout at least once, if neighbor b 1 of v 1 and neighbor b 2 of v 2 are distinct nodes, then we must observe at least one neighborhood variant where only one of these two neighbors are missing; in this case, we know that the b 1 th neighbor of v 1 and the b 2 th neighbor of v 2 are not identical. On the other hand, if the two neighbors are always absent simultaneously, then the two edges lead to the same node.</p><p>The proof of the theorem happens in an inductive fashion. Note that from the 0-dropout, we can already identify the degree of u in the graph, and the port leading to each of its neighbors; this is exactly the 1-hop neighborhood of u. Now let us assume that we have already reconstructed the (i ? 1)-hop neighborhood of u; in this case, we can identify each outgoing edge from this neighborhood by a combination of a boundary node (a node at distance (i ? 1) from u) and a port number at this node. We can then extend our graph into the i-hop neighborhood of u (for i ? d) with the following two steps:</p><p>1. First, we reconstruct the edges going from distance (i ? 1) nodes to distance i nodes. Let us refer to nodes at distance i as outer nodes. Note that all the outer neighbors of the boundary nodes can be identified by the specific outgoing edges from the boundary nodes; we only have to find out which of these outer nodes are actually the same. This can be done with the general idea outlined before: if two boundary nodes v 1 and v 2 have a neighbor at ports b 1 and b 2 , respectively, and we do not observe a graph variant where only one of these neighbors is missing, then the two edges lead to the same outer node.</p><p>2. We also need to reconstruct the adjacencies between the boundary nodes; this is part of the i-hop neighborhood of u by definition, but not part of the (i ? 1)-hop neighborhood. This happens with the same general idea as before: assume that v 2 and v 3 are both nodes at distance (i ? 1), and v 1 is a node at distance (i ? 2) that is adjacent to v 3 . Then we can check whether v 3 disappears simultaneously from the respective ports b 1 and b 2 of nodes v 1 and v 2 ; if it does, then we know that edge b 2 of node v 2 leads to this other boundary node v 3 .</p><p>After d steps, this process allows us to reconstruct the entire d-hop neighborhood of u, thus proving the theorem.</p><p>Let us also briefly comment on the GNN interpretation of this graph algorithm. An injective GNN construction ensures that we map different d-hop neighborhoods to a different real number embedding. Note that the algorithm can separate any two neighborhoods without using the frequency of the specific neighborhoods variants; this implies that the set of real numbers obtained is different for any two neighborhoods, i.e. there must exist a number z ? R that is present in one of the distributions, but not in the other. One can then develop an MLP that essentially acts as an indicator for this value z, only outputting 1 if the input is z; this allows us to separate the two neighborhoods.</p><p>Finally, note that our main objective throughout the paper was to compute a different embedding for two different neighborhoods. However, in this setting of Theorem 4, it is also possible to encounter the opposite problem: if two d-hop neighborhoods are actually isomorphic, but they have a different assignment of port numbers, then they might produce a different embedding in the end.</p><p>We point out that with more sophisticated run aggregation, it is also possible to solve this problem, i.e. to recognize the same neighborhood regardless of the chosen port numbering. In particular, we have seen that in the 1-complete case, the multiset of final embeddings already determines the entire neighborhood around u, and thus also its isomorphism class. This means that there is a well-defined function from the embedding vectors in R r that we can obtain in r runs to the possible isomorphism classes of u's neighborhood (assuming for convenience that the neighborhood size is bounded). Due to the universal approximation theorem, a sufficiently complex MLP can indeed implement this function; as such, determining the isomorphism class of u's neighborhood is indeed within the expressive capabilities of DropGNNs in this setting. However, while such a solution exists in theory, we note that this graph isomorphism problem is known to be rather challenging in practice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C.3 Briefly on the graph reconstruction problem</head><p>The graph reconstruction problem is a well-known open question dating back to the 1940s. Assume that there is a hidden graph G on n ? 3 nodes that we are unaware of; instead, what we receive as an input is n different modified variants of G, each obtained by removing a different node (and its incident edges) from G. This input multiset of graphs is often called the deck of G. Note that the graphs in the deck are only provided up to an isomorphism class, i.e. for a specific node of the deck graph, we do not know which original node of G it corresponds to. The goal is to identify G from its deck; this problem is solvable exactly if there are no two non-isomorphic graphs with the same deck. This assumption is known as the graph reconstruction conjecture <ref type="bibr" target="#b13">[14]</ref>.</p><p>This problem is clearly close to our task of reconstructing a neighborhood from its 1-dropout variants; however, there are also two key differences between the settings. Firstly, in our DropGNNs, we do not observe a graph, but rather a tree-representation of its neighborhood where some nodes may appear multiple times. In this sense, our GNN setting is much more challenging than the reconstruction problem, since it is highly non-trivial to decide whether two nodes in this tree representation correspond to the same original node. On the other hand, the DropGNN setting has the advantage that we can also observe the 0-dropout; this does not happen in the reconstruction problem, since it would correspond to directly receiving the solution besides the deck.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D Dropouts with mean or max aggregation</head><p>In this section, we discuss the expressiveness of the dropout technique with mean and max neighborhood aggregation. In particular, we prove that separation is always possible with mean aggregation when |S 1 | = |S 2 |, we construct a pair of neighborhoods that provide a very similar distribution of mean values, and we briefly discuss the limits of max aggregation in practice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D.1 Proof of Lemma 1</head><p>We begin with the proof of Lemma 1. More specifically, we show that if |S 1 | = |S 2 |, then there always exists a choice of p and integers a, b such that after applying an activation function ?(ax + b) on S 1 and S 2 , a mean neighborhood aggregation allows us to distinguish the two sets.</p><p>In our proof, we assume that S 1 and S 2 are both multisets of integers (instead of vectors), i.e. that node features are only 1-dimensional. With multi-dimensional feature vectors, we can apply the same proof to each dimension of the vectors individually; since S 1 = S 2 , we will always have a dimension that allows us to separate the two multisets with the same method.</p><p>Let s 1 denote the mean of S 1 and s 2 denote the mean of S 2 . We first discuss the simpler case when s 1 = s 2 ; if this holds, we can distinguish any two sets S 1 and S 2 , so we make this proof for the general case, without the assumption that |S 1 | = |S 2 |. After this, we discuss the case when s 1 = s 2 and |S 1 | = |S 2 |; this completes the proof of Lemma 1.</p><p>The main idea of the proofs is to find a threshold ? such that in S 1 , we have mean values larger than ? much more frequently than in S 2 (or vice versa). We can then use an activation function ?(x) := ?(x ? ? ) (with ? denoting the Heaviside step function) to ensure that ?(x) = 1 if x ? ? , and ?(x) = 0 otherwise. This means that a run aggregation with sum will simply count the cases when the mean is larger than ? , and thus with high probability, we get a significantly different sum in case of S 1 and S 2 .</p><p>Note that even though the proof is described with a Heaviside activation function for ease of presentation, one could also use the logistic function (a more popular choice in practice), since the logistic function provides an arbitrary close approximation of the step function with the appropriate parameters.</p><p>When the means are different. First we consider the case when s 1 = s 2 .</p><p>In this setting, finding an appropriate ? is relatively straightforward. Assume w.l.o.g. that s 1 &lt; s 2 , and let us choose an arbitrary ? such that s 1 &lt; ? &lt; s 2 . This implies that whenever no node is removed, then the mean in S 1 will produce a 0, while the mean in S 2 will produce a 1.</p><p>It only remains to ensure that 0-dropouts are frequent enough to distinguish these two cases. For this, let ? = max(|S 1 |, |S 2 |), and let us select p = 1 2? . For both S 1 and S 2 , this gives a probability of at least</p><formula xml:id="formula_18">(1 ? p) ? = 2? ? 1 2?</formula><p>? for 0-dropouts. When ? ? 2, this probability is strictly larger than 0.55.</p><p>With a Chernoff bound, one can also show that the number of 0-dropouts is strictly concentrated around this value: with ? = 0.05 and r runs, the probability of the number of 0-dropouts being below (1 ? ?) ? 0.55 ? 0.52 is upper bounded by e ? 1 3 ?? 2 ?0.55?r . To ensure that this is below 1 t , we only need ?(1) ? r ? log t, and hence r ? ?(log t). This already ensures that in case of S 2 , we have at least 0.52 ? r runs that produce a 1, while in S 1 , we have at least 0.52 ? r runs that produce a 0 (i.e. at most 0.48 ? r runs that produce a 1). Hence with high probability, a sum run aggregation gives a sum below 0.48 ? r and above 0.52 ? r for S 1 and S 2 respectively, so the two cases are indeed separable.</p><p>When the means are the same. Now consider the case when s 1 = s 2 , and we have |S 1 | = |S 2 |.</p><p>In this setting, let ? = |S 1 | = |S 2 |. Since the multisets are not identical, there must be an index i ? {1, ..., ?} such that in the sorted version of the multisets, the i th element of S 1 is different from the i th element of S 2 . Let us consider the smallest such index i, and assume w.l.o.g. that the i th element of S 1 (let us call it x 1,i ) is larger than the i th element of S 2 (denoted by x 2,i ). Furthermore, Let s 1,?i and s 2,?i denote the mean of S 1 and S 2 , respectively, after removing the i th element.</p><p>Note that if we only had 1-dropouts and 0-dropouts in our GNNs, then finding this index i would already allow a separation in a relatively straightforward way. Since x 1,i &gt; x 2,i , we must have s 1,?i &lt; s 2,?i . The idea is again to select a threshold value ? such that s 1,?i &lt; ? &lt; s 2,?i . This ensures that in S 1 , at least i of the 1-dropouts produce a 0, whereas in S 2 , at most i ? 1 of the 1-dropouts produce a 0. If the frequency of all 1-dropouts is concentrated around its expectation, then this shows that the occurrences of 1 will be significantly higher in S 2 .</p><p>What makes this argument slightly more technical is the presence of k-dropouts for k ? 2. In order to reduce the relevance of these cases, we select a smaller p value. In particular, let p = 1 2? 2 . In this case, the probability of a k-dropout is only</p><formula xml:id="formula_19">p k ? (1 ? p) ??k ? p k = 1 2 k ? ? 2k ,</formula><p>and the probability of having any multiple-dropout case in a specific run is at most</p><formula xml:id="formula_20">? k=2 ? k ? 1 2 k ? ? 2k ? ? k=2 ? k 2 ? 1 2 k ? ? 2k ? ? k=2 1 2 k+1 ? 1 ? k ? 1 4 ? ? 2 ,</formula><p>using the fact that ? k ? 1 2 ? ? k for k ? 2 and the fact that 1 8 + 1 16 + ... ? 1 4 . On the other hand, the probability of a 1-dropout is</p><formula xml:id="formula_21">p ? (1 ? p) ??1 = 1 2? 2 ? 2? 2 ? 1 2? 2 ??1 ,</formula><p>where one can observe that the second factor is at least <ref type="bibr">7 8</ref> for any positive integer ?. As such, the probability of a 1-dropout is lower bounded by <ref type="bibr" target="#b6">7</ref> 16 ? 1 ? 2 , i.e. it is notably larger than the cumulative probability of multiple-dropout cases.</p><p>This means that our previous choice of s 1,?i &lt; ? &lt; s 2,?i also suffices for this general case. In particular, even if all the multiple-dropouts in S 1 produce a mean that is larger than ? , and all the multiple-dropouts in S 2 produce a mean that is smaller than ? , we will still end up with a considerably larger probability of obtaining a value of 1 in case of S 2 , due to the 1-dropout of the i th element. More specifically, the difference between the two probabilities will be at least <ref type="bibr" target="#b2">3</ref> 16 ? 1 ? 2 ; using a Chernoff bound in a similar fashion to before, one can conclude that ?(? 4 ? log t) runs are already sufficient to separate the two case with error probability at most 1 t .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D.2 Construction for similar mean distribution</head><p>Let us now comment on the general case when we have s 1 = s 2 but |S 1 | = |S 2 |. We present an example for two different sets S 1 and S 2 where the distribution of mean values obtained from 0and 1-dropouts is essentially identical, thus showing the limits of any general approach that uses mean aggregation, but does not execute a deeper analysis of k-dropouts for k ? 2.</p><p>Consider an even integer , and consider the following two subsets. Let S 1 consist of 2 distinct copies of the number ?( ? 1), and 2 distinct copies of the number ( ? 1). Let S 2 consist of 2 distinct copies of the number ? , and 2 distinct copies of the number , and a single instance of 0. These sets provide |S 1 | = and |S 2 | = + 1, and also s 1 = s 2 = 0. For a concrete example of = 4, we get the multisets S 1 = {?3, ?3, 3, 3} and S 2 = {?4, ?4, 0, 4, 4}.</p><p>The mean values obtained for 1-dropouts is also easy to compute in these examples. In S 1 , we have 2 distinct 1-dropouts with a mean of 1, and 2 distinct 1-dropouts with a mean of ?1. In S 2 , we have (1 ? p) . In S 2 , we have to add up the probability of the 0-dropout and a single 1-dropout: this is</p><formula xml:id="formula_22">(1 ? p) +1 + p ? (1 ? p) = (1 ? p) .</formula><p>The set of means obtained from 1-dropouts is also identical in the two neighborhoods, it is only their probability that is slightly different. In S 1 , both ?1 and 1 are obtained with probability 2 ?p?(1?p) ?1 , while in S 2 , they are both obtained with probability 2 ? p ? (1 ? p) . Hence the difference between the two probabilities is only</p><formula xml:id="formula_23">2 ? p ? (1 ? p) ?1 ? (1 ? p) = 2 ? p 2 ? (1 ? p) ?1 .</formula><p>Recall that we have ?( 2 ) distinct 2-dropouts, each with a probability of p 2 ? (1 ? p) ?1 , so these 2-dropouts are together easily able to bridge this difference of frequency of the 1-dropouts between S 1 and S 2 . This shows that we cannot conveniently ignore multiple-node dropouts as in case of |S 1 | = |S 2 | before: the only possible 1-dropout-based approach to separate the two sets (i.e. to use the slightly different frequency of the values ?1 and 1) is not viable without a deeper analysis of the distributions of 2-dropouts. It is beyond the scope of this paper to analyze this distribution in detail, or to come up with more sophisticated separation methods based on multiple-node dropouts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D.3 Aggregation with max</head><p>Another well-known permutation-invariant function (and thus a natural candidate for neighborhood aggregation) is max; however, this method does not combine well with the dropout approach in practice.</p><p>In particular, if the multisets S 1 and S 2 only differ in their smallest element, then max aggregation can only distinguish them from a specific (? ? 1)-dropout when all other neighbors of u are removed. This dropout combination only has a probability of p ??1 ? (1 ? p) 2 ; thus for a reasonably small p (e.g. for p ? ? ?1 ), we need a very high number of runs to observe this case with a decent probability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E Details of the experimental setup</head><p>In all of our experiments, we use Adam optimizer <ref type="bibr" target="#b16">[17]</ref>. For synthetic benchmarks and graph classification, we use a learning rate of 0.01, for graph property regression we use a learning rate of 0.001. For graph classification benchmarks we decay the learning rate by 0.5 every 50 steps <ref type="bibr" target="#b36">[37]</ref> and for the graph regression benchmark we decay the learning rate by a factor of 0.7 on plateau <ref type="bibr" target="#b21">[22]</ref>. The GIN model always uses 2-layer multilayer perceptrons and batch normalization <ref type="bibr" target="#b15">[16]</ref> after each level <ref type="bibr" target="#b36">[37]</ref>. For our dropout technique, during preliminary experiments we tested three different node dropout implementation options: i) completely removing the dropped nodes and their edges from the graph; ii) replacing dropped node features by 0s before and after each graph convolution; iii) replacing the initial dropped node features by 0s. These preliminary experiments showed that all of these options performed similarly in practice, but the last option resulted in a more stable training. Since it is also the simplest dropout version to implement we chose to use it in all of our experiments. To ensure that the base model is well trained, when our technique is used we apply an auxiliary loss on each run individually. This auxiliary loss comprises 1 3 of the final loss. While our model can have O(n) memory consumption if we execute the runs in sequence, we implement it in a paralleled manner, which reduces the compute time, as all r runs are performed in parallel, but increases memory consumption.</p><p>For the synthetic benchmarks (LIMITS 1, LIMITS 2, 4-CYCLES, LCC, TRIANGLES, SKIP-CIRCLES) we use a GIN model with 4 convolutional layers (+ 1 input layer), sum as aggregation, ? = 0 and for simplicity do not use dropout on the final READOUT layer, while the final layer dropout is treated as a hyper-parameter in the original model. For synthetic node classification tasks (LIMITS 1, LIMITS 2, LCC, and TRIANGLES) we use the same readout head as the original GIN model but skip the graph aggregation step. In all cases, except the SKIPCIRCLES dataset, 16 hidden units are used for synthetic tasks. For the SKIPCIRCLES dataset we use a GIN model with 9 convolutional layers (+ 1 input layer) with 32 hidden units as this dataset has cycles of up to 17 hops and requires long-range information propagation to solve the task. For the DropGIN variant, mean aggregation is used to aggregate node representations from different runs. When the GIN model is augmented with ports, which introduce edge features, we use modified GIN convolutions that include edge features <ref type="bibr" target="#b14">[15]</ref>. In synthetic benchmarks, we always generate the same number of graphs for training and test sets (generate a new copy of the dataset for testing) and for each random seed, we re-generate the datasets. We always feed in the whole dataset as one batch. LIMITS 1, LIMITS 2 and SKIP-CIRCLES datasets are always comprised of graphs with the same structure, just with permuted node IDs for each dataset initialization, the remaining datasets have random graph structure, which changes when the datasets are regenerated. You can see the synthetic dataset structure type and statistics in <ref type="table" target="#tab_6">Table 4</ref>. All nodes in these datasets have the same degree.  For graph classification tasks we use exactly the same GIN model as described originally and apply our dropout technique on top. Namely, with 1 input layer, 4 convolution layers with sum as aggregation and ? = 0 and dropout <ref type="bibr" target="#b31">[32]</ref> on the final READOUT layer. For the DropGIN variant, mean aggregation is used to pool node representations from different runs. Note, that in our setting sum and mean aggregations are equivalent, up to a constant multiplicative factor, as the number of runs is a constant chosen on a per dataset level. We use exactly the same model training and selection procedure as described by <ref type="bibr" target="#b36">[37]</ref>. We decay the learning rate by 0.5 every 50 epochs and tune the number of hidden units ? {16, 32} for bioinformatics datasets while using 64 for the social graphs. The dropout ratio ? {0, 0.5} after the final dense layer the batch size ? {32, 128} are also tuned. The epoch with the best cross-validation accuracy over the 10 folds is selected. You can see the statistics of synthetic datasets in <ref type="table">Table 5</ref>.  <ref type="table">Table 5</ref>: Real-world dataset statistics.</p><p>For the graph property regression task (QM9) we augment two models: 1-GNN <ref type="bibr" target="#b21">[22]</ref> and MPNN <ref type="bibr" target="#b11">[12]</ref>. For 1-GNN we use the code and the training setup as provided by the original authors 2 . For MPNN we use the reference model implementation from PyTorch Geometric 3 . We otherwise follow the training and evaluation procedure used by 1-GNN <ref type="bibr" target="#b21">[22]</ref>. The models are trained for 300 epochs and the epoch with the best validation score is chosen.</p><p>We use PyTorch <ref type="bibr" target="#b23">[24]</ref> and PyTorch Geometric <ref type="bibr" target="#b9">[10]</ref> for the implementation. All models have been trained on Nvidia Titan RTX GPU (24GB RAM).</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Illustration of 4 possible dropout combinations from an example 2-hop neighborhood around u: a 0-dropout, two different 1-dropouts and a 2-dropout.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Several example graphs which show that DropGNNs are more expressive than standard GNNs in various cases. Different node colors correspond to different node features.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Investigating the impact of the dropout probability (x?axis) versus the classification accuracy (y?axis). DropGNN is robust to the choice of p for decently small p. Choosing p ? ? ?1 is a decent default that is shown by vertical black lines.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>?0.00 0.50 ?0.00 0.50 ?0.00 0.50 ?0.00 1.00 ?0.00 0.59 ?0.19 0.66 ?0.19 0.66 ?0.<ref type="bibr" target="#b21">22</ref> 1.00 ?0.00 1.00 ?0.00 LIMITS 2<ref type="bibr" target="#b10">[11]</ref> 0.50 ?0.00 0.50 ?0.00 0.50 ?0.00 0.50 ?0.00 1.00 ?0.00 0.61?0.26 0.72 ?0.17 0.64 ?0.19 1.00 ?0.00 1.00 ?0.00 4-CYCLES [20] 0.50 ?0.00 0.50 ?0.00 1.00 ?0.01 0.84 ?0.07 1.00 ?0.00 0.58 ?0.07 0.75 ?0.05 0.77 ?0.05 0.99 ?0.03 1.00 ?0.01 LCC [29] 0.41 ?0.09 0.38 ?0.08 1.0 ?0.00 0.39 ?0.09 1.00 ?0.00 0.42 ?0.08 0.45 ?0.16 0.46 ?0.08 1.00 ?0.00 0.99 ?0.02 TRIANGLES [29] 0.53 ?0.15 0.52 ?0.15 1.0 ?0.00 0.54 ?0.11 1.00 ?0.00 0.63 ?0.08 0.57 ?0.08 0.67 ?0.05 0.93 ?0.12 0.93 ?0.13 SKIP-CIRCLES [6] 0.10 ?0.00 0.10 ?0.00 1.00 ?0.00 0.14 ?0.08 1.00 ?0.00 0.10 ?0.09 0.16 ?0.11 0.16 ?0.05 0.81 ?0.28 0.82 ?0.28</figDesc><table><row><cell></cell><cell>GIN</cell><cell></cell><cell>+Ports</cell><cell></cell><cell>+IDs</cell><cell></cell><cell cols="2">+Random feat.</cell><cell>+Dropout</cell><cell></cell></row><row><cell>Dataset</cell><cell>Train</cell><cell>Test</cell><cell>Train</cell><cell>Test</cell><cell>Train</cell><cell>Test</cell><cell>Train</cell><cell>Test</cell><cell>Train</cell><cell>Test</cell></row><row><cell>LIMITS 1 [11]</cell><cell>0.50</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc>Evaluation of techniques that increase GNN expressiveness on challenging synthetic datasets. We highlight the best test scores in bold. Compared to other augmentation techniques DropGNN (GIN +Dropout) achieves high training accuracy but also generalizes well to the test set.</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>?5.7 59.9 ?4.3 75.0 ?3.1 73.8 ?3.9 50.9 ?3.8 ?4.4 62.3 ?5.7 75.0 ?2.5 71.0 ?2.3 45.2 ?2.8 ?1.7 58.6 ?2.5 75.5 ?0.9 70.0 ?0.9 47.8 ?0.9 ?5.6 64.6 ?7.0 76.2 ?2.8 75.1 ?5.1 52.3 ?2.8 DropGIN (ours) O(rn), r ? 20 90.4 ?7.0 66.3 ?8.6 76.3 ?6.1 75.7 ?4.2 51.4 ?2.8 ?8.7 66.2 ?6.5 77.2 ?4.7 73 ?5.8 50.5 ?3.6</figDesc><table><row><cell>Model</cell><cell>Complexity</cell><cell>MUTAG</cell><cell>PTC</cell><cell cols="2">PROTEINS IMDB-B IMDB-M</cell></row><row><cell cols="3">WL subtree [37; 31] O(n) 90.4 DCNN [2] O(n) -</cell><cell>-</cell><cell>61.3 ?1.6</cell><cell>49.1 ?1.4 33.5 ?1.4</cell></row><row><cell cols="3">PatchySan [23] 89.0 DGCNN [39] O(n) O(n) 85.8 GIN [37] O(n) 89.4 1-2-3 GNN [22] O(n 4 ) 86.1</cell><cell>60.9</cell><cell>75.5</cell><cell>74.2</cell><cell>49.5</cell></row><row><cell>PPGN [21]*</cell><cell>O(n 3 )</cell><cell>90.6</cell><cell></cell><cell></cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 :</head><label>2</label><figDesc>Graph classification accuracy (%). The best performing model in each complexity class is highlighted in bold. *We report the best result achieved by either of the three versions of their model. We evaluate and compare our modified GIN model (DropGIN) with the original GIN model and other GNN models of various expressiveness levels on real-world graph classification datasets. We use three bioinformatics datasets (MUTAG, PTC, PROTEINS) and two social networks (IMDB-BINARY and IMDB-MULTI)</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 4 :</head><label>4</label><figDesc>Synthetic dataset statistics and properties.</figDesc><table /><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">https://github.com/KarolisMart/DropGNN</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2">distinct 1-dropouts with a mean of 1, and 2 distinct 1-dropouts with a mean of ?1, and a single 1-dropout with a mean of 0.Note that if we only consider these 0 and 1-dropouts, then the probability of getting a 0 is exactly the same in both settings. In S 1 , this comes from the probability of the 0-dropout only, so it is</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2">https://github.com/chrsmrrs/k-gnn 3 https://github.com/rusty1s/pytorch_geometric/blob/master/examples/qm9_nn_conv.py</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Abboud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">?</forename><forename type="middle">?</forename><surname>Ceylan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Grohe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Lukasiewicz</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2010.01179</idno>
		<title level="m">The surprising power of graph neural networks with random node initialization</title>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Diffusion-convolutional neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Atwood</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Towsley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">W</forename><surname>Battaglia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename><surname>Hamrick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Bapst</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sanchez-Gonzalez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Zambaldi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Malinowski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tacchetti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Raposo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Santoro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Faulkner</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1806.01261</idno>
		<title level="m">Relational inductive biases, deep learning, and graph networks</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Efficient robustness certificates for discrete data: Sparsity-aware randomized smoothing for graphs, images and more</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bojchevski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Klicpera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>G?nnemann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 37th International Conference on Machine Learning</title>
		<meeting>the 37th International Conference on Machine Learning</meeting>
		<imprint>
			<publisher>PMLR</publisher>
			<date type="published" when="2020" />
			<biblScope unit="page" from="1003" to="1013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Spectral networks and locally connected networks on graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bruna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zaremba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Szlam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Lecun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2nd International Conference on Learning Representations</title>
		<meeting><address><addrLine>Banff, AB, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014-04-14" />
		</imprint>
	</monogr>
	<note>Conference Track Proceedings</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">On the equivalence between graph isomorphism testing and function approximation with gnns</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Villar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bruna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Certified adversarial robustness via randomized smoothing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Rosenfeld</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Kolter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 36th International Conference on Machine Learning</title>
		<meeting>the 36th International Conference on Machine Learning</meeting>
		<imprint>
			<publisher>PMLR</publisher>
			<date type="published" when="2019" />
			<biblScope unit="page" from="1310" to="1320" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Convolutional neural networks on graphs with fast localized spectral filtering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Defferrard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Bresson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Vandergheynst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Graph random neural networks for semi-supervised learning on graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Luan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Kharlamov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in Neural Information Processing Systems</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Fast graph representation learning with pytorch geometric</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Fey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Lenssen</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1903.02428</idno>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Generalization and representational limits of graph neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Garg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jegelka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Jaakkola</surname></persName>
		</author>
		<idno>PMLR</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 37th International Conference on Machine Learning</title>
		<meeting>the 37th International Conference on Machine Learning</meeting>
		<imprint>
			<date type="published" when="2020-07" />
			<biblScope unit="volume">119</biblScope>
			<biblScope unit="page" from="13" to="18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Neural message passing for quantum chemistry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gilmer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">S</forename><surname>Schoenholz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">F</forename><surname>Riley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Vinyals</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">E</forename><surname>Dahl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning (ICML)</title>
		<meeting><address><addrLine>Sydney, Australia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Inductive representation learning on large graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hamilton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Ying</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Leskovec</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A survey of the reconstruction conjecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Harary</surname></persName>
		</author>
		<idno>978-3-540-37809-9</idno>
	</analytic>
	<monogr>
		<title level="m">Graphs and Combinatorics</title>
		<editor>R. A. Bari and F. Harary</editor>
		<meeting><address><addrLine>Berlin, Heidelberg; Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1974" />
			<biblScope unit="page" from="18" to="28" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gomes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zitnik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pande</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Leskovec</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1905.12265</idno>
		<title level="m">Strategies for pre-training graph neural networks</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Batch normalization: Accelerating deep network training by reducing internal covariate shift</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ioffe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Szegedy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International conference on machine learning</title>
		<imprint>
			<publisher>PMLR</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="448" to="456" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Adam: A method for stochastic optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">P</forename><surname>Kingma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ba</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICLR (Poster)</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Semi-supervised classification with graph convolutional networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">N</forename><surname>Kipf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Welling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Learning Representations ICLR</title>
		<meeting><address><addrLine>Toulon, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Directional message passing for molecular graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Klicpera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gro?</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>G?nnemann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Learning Representations</title>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">What graph neural networks cannot learn: depth vs width</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Loukas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">8th International Conference on Learning Representations</title>
		<meeting><address><addrLine>Addis Ababa, Ethiopia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2020" />
			<biblScope unit="volume">2020</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Maron</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Ben-Hamu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Serviansky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Lipman</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1905.11136</idno>
		<title level="m">Provably powerful graph networks</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Weisfeiler and leman go neural: Higher-order graph neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ritzert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Fey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">L</forename><surname>Hamilton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Lenssen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Rattan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Grohe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the AAAI Conference on Artificial Intelligence</title>
		<meeting>the AAAI Conference on Artificial Intelligence</meeting>
		<imprint>
			<date type="published" when="2019" />
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="4602" to="4609" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Learning convolutional neural networks for graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Niepert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ahmed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kutzkov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International conference on machine learning</title>
		<imprint>
			<publisher>PMLR</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="2014" to="2023" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Paszke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gross</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Massa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lerer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bradbury</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Chanan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Killeen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Gimelshein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Antiga</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1912.01703</idno>
		<title level="m">An imperative style, high-performance deep learning library</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Quantum chemistry structures and properties of 134 kilo molecules</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ramakrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">O</forename><surname>Dral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rupp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><forename type="middle">A</forename><surname>Von Lilienfeld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Scientific data</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="7" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Dropedge: Towards deep graph convolutional networks on node classification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Rong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Huang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">8th International Conference on Learning Representations</title>
		<meeting><address><addrLine>Addis Ababa, Ethiopia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2020" />
			<biblScope unit="volume">2020</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Learning to simulate complex physics with graph networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sanchez-Gonzalez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Godwin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Pfaff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ying</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Leskovec</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Battaglia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning</title>
		<imprint>
			<publisher>PMLR</publisher>
			<date type="published" when="2020" />
			<biblScope unit="page" from="8459" to="8468" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Approximation ratios of graph neural networks for combinatorial problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sato</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Yamada</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Kashima</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Neural Information Processing Systems (NeurIPS)</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Random features strengthen graph neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sato</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Yamada</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Kashima</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2021 SIAM International Conference on Data Mining (SDM)</title>
		<meeting>the 2021 SIAM International Conference on Data Mining (SDM)</meeting>
		<imprint>
			<publisher>SIAM</publisher>
			<date type="published" when="2021" />
			<biblScope unit="page" from="333" to="341" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">The graph neural network model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Scarselli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gori</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Tsoi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hagenbuchner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Monfardini</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Neural Networks</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Weisfeiler-lehman graph kernels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Shervashidze</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Schweitzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">J</forename><surname>Van Leeuwen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mehlhorn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">M</forename><surname>Borgwardt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">9</biblScope>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Dropout: a simple way to prevent neural networks from overfitting. The journal of machine learning research</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Krizhevsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Salakhutdinov</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="1929" to="1958" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Graph attention networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Velickovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Cucurull</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Casanova</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Romero</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Li?</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Learning Representations (ICLR)</title>
		<meeting><address><addrLine>Vancouver, BC, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2018-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Moleculenet: a benchmark for molecular machine learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Ramsundar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">N</forename><surname>Feinberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gomes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Geniesse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">S</forename><surname>Pappu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leswing</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pande</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Chemical science</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="513" to="530" />
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">A comprehensive survey on graph neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Long</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">Y</forename><surname>Philip</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Neural Networks and Learning Systems</title>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Representation learning on graphs with jumping knowledge networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Tian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Sonobe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kawarabayashi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jegelka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning (ICML)</title>
		<meeting><address><addrLine>Stockholm, Sweden</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2018-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">How powerful are graph neural networks?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Leskovec</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jegelka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Learning Representations</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Deep graph kernels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Yanardag</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Vishwanathan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 21th ACM SIGKDD international conference on knowledge discovery and data mining</title>
		<meeting>the 21th ACM SIGKDD international conference on knowledge discovery and data mining</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="1365" to="1374" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">An end-to-end deep learning architecture for graph classification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Neumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the AAAI Conference on Artificial Intelligence</title>
		<meeting>the AAAI Conference on Artificial Intelligence</meeting>
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="volume">32</biblScope>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
