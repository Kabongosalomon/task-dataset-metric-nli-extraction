<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /nfs/home/kabenamualus/Research/task-dataset-metric-extraction/../grobid-0.6.0/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Skip-gram Language Modeling Using Sparse Non-negative Matrix Probability Estimation</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2015-06-26">26 Jun 2015</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Noam</forename><surname>Shazeer</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Google, Inc</orgName>
								<address>
									<addrLine>1600 Amphitheatre Parkway Mountain View</addrLine>
									<postCode>94043</postCode>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joris</forename><surname>Pelemans</surname></persName>
							<email>jpeleman@google.com</email>
							<affiliation key="aff0">
								<orgName type="institution">Google, Inc</orgName>
								<address>
									<addrLine>1600 Amphitheatre Parkway Mountain View</addrLine>
									<postCode>94043</postCode>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ciprian</forename><surname>Chelba</surname></persName>
							<email>ciprianchelba@google.com</email>
							<affiliation key="aff0">
								<orgName type="institution">Google, Inc</orgName>
								<address>
									<addrLine>1600 Amphitheatre Parkway Mountain View</addrLine>
									<postCode>94043</postCode>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Skip-gram Language Modeling Using Sparse Non-negative Matrix Probability Estimation</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2015-06-26">26 Jun 2015</date>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.6.0" ident="GROBID-SDO" when="2022-11-11T19:38+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid-sdo"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We present a novel family of language model (LM) estimation techniques named Sparse Non-negative Matrix (SNM) estimation.</p><p>A first set of experiments empirically evaluating it on the One Billion Word Benchmark <ref type="bibr" target="#b4">[Chelba et al., 2013]</ref> shows that SNM n-gram LMs perform almost as well as the well-established Kneser-Ney (KN) models. When using skip-gram features the models are able to match the state-of-the-art recurrent neural network (RNN) LMs; combining the two modeling techniques yields the best known result on the benchmark.</p><p>The computational advantages of SNM over both maximum entropy and RNN LM estimation are probably its main strength, promising an approach that has the same flexibility in combining arbitrary features effectively and yet should scale to very large amounts of data as gracefully as n-gram LMs do.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>A statistical language model estimates probability values P (W ) for strings of words W in a vocabulary V whose size is in the tens, hundreds of thousands and sometimes even millions. Typically the string W is broken into sentences, or other segments such as utterances in automatic speech recognition, which are often assumed to be conditionally independent; we will assume that W is such a segment, or sentence.</p><p>Estimating full sentence language models is computationally hard if one seeks a properly normalized probability model 1 over strings of words of finite length in <ref type="bibr">1</ref> We note that in some practical systems the constraint on using a properly normalized language V * . A simple and sufficient way to ensure proper normalization of the model is to decompose the sentence probability according to the chain rule and make sure that the end-of-sentence symbol &lt;/s&gt; is predicted with non-zero probability in any context. With W = w 1 , w 2 , . . . , w n we get:</p><formula xml:id="formula_0">P (W ) = n i=1 P (w i |w 1 , w 2 , . . . , w i?1 )<label>(1)</label></formula><p>Since the parameter space of P (w k |w 1 , w 2 , . . . , w k?1 ) is too large, the language model is forced to put the context W k?1 = w 1 , w 2 , . . . , w k?1 into an equivalence class determined by a function ?(W k?1 ). As a result,</p><formula xml:id="formula_1">P (W ) ? = n k=1 P (w k |?(W k?1 ))<label>(2)</label></formula><p>Research in language modeling consists of finding appropriate equivalence classifiers ? and methods to estimate P (w k |?(W k?1 )). The most successful paradigm in language modeling uses the (n ? 1)-gram equivalence classification, that is, defines ?(W k?1 ) . = w k?n+1 , w k?n+2 , . . . , w k?1</p><p>Once the form ?(W k?1 ) is specified, only the problem of estimating P (w k |?(W k?1 )) from training data remains.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Perplexity as a Measure of Language Model Quality</head><p>A statistical language model can be evaluated by how well it predicts a string of symbols W t -commonly referred to as test data-generated by the source to be modeled.</p><p>A commonly used quality measure for a given model M is related to the entropy of the underlying source and was introduced under the name of perplexity (PPL):</p><formula xml:id="formula_2">P P L(M ) = exp(? 1 N N k=1 ln [P M (w k |W k?1 )])<label>(3)</label></formula><p>For an excellent discussion on the use of perplexity in statistical language modeling, as well as various estimates for the entropy of English the reader is referred to <ref type="bibr" target="#b8">[Jelinek, 1997]</ref>, Section 8.4, pages 141-142 and the additional reading suggested in Section 8.5 of the same book. model is side-stepped at a gain in modeling power and simplicity.</p><p>Very likely, not all words in the test string W t are part of the language model vocabulary. It is common practice to map all words that are out-of-vocabulary to a distinguished unknown word symbol, and report the out-of-vocabulary (OOV) rate on test data-the rate at which one encounters OOV words in the test string W tas yet another language model performance metric besides perplexity. Usually the unknown word is assumed to be part of the language model vocabulary-open vocabulary language models-and its occurrences are counted in the language model perplexity calculation, Eq. (3). A situation less common in practice is that of closed vocabulary language models where all words in the test data will always be part of the vocabulary V.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Skip-gram Language Modeling</head><p>Recently, neural network (NN) smoothing <ref type="bibr" target="#b1">[Bengio et al., 2003]</ref>, <ref type="bibr">[Emami, 2006]</ref>, <ref type="bibr">[Schwenk, 2007]</ref>, and in particular recurrent neural networks <ref type="bibr" target="#b12">[Mikolov, 2012]</ref> (RNN) have shown excellent performance in language modeling <ref type="bibr" target="#b4">[Chelba et al., 2013]</ref>. Their excellent performance is attributed to a combination of leveraging long-distance context, and training a vector representation for words.</p><p>Another simple way of leveraging long distance context is to use skip-grams. In our approach, a skip-gram feature extracted from the context W k?1 is characterized by the tuple (r, s, a) where:</p><p>? r denotes number of remote context words ? s denotes the number of skipped words ? a denotes the number of adjacent context words relative to the target word w k being predicted. For example, in the sentence, &lt;S&gt; The quick brown fox jumps over the lazy dog &lt;/S&gt; a (1, 2, 3) skip-gram feature for the target word dog is: [brown skip-2 over the lazy]</p><p>For performance reasons, it is recommended to limit s and to limit either (r+a) or limit both r and s; not setting any limits will result in events containing a set of skip-gram features whose total representation size is quintic in the length of the sentence.</p><p>We configure the skip-gram feature extractor to produce all features f , defined by the equivalence class ?(W k?1 ), that meet constraints on the minimum and maximum values for:</p><p>? the number of context words used r + a;</p><p>? the number of remote words r;</p><p>? the number of adjacent words a;</p><p>? the skip length s.</p><p>We also allow the option of not including the exact value of s in the feature representation; this may help with smoothing by sharing counts for various skip features. Tied skip-gram features will look like: [curiousity skip-* the cat]</p><p>In order to build a good probability estimate for the target word w k in a context W k?1 we need a way of combining an arbitrary number of skip-gram features f k?1 , which do not fall into a simple hierarchy like regular n-gram features. The following section describes a simple, yet novel approach for combining such predictors in a way that is computationally easy, scales up gracefully to large amounts of data and as it turns out is also very effective from a modeling point of view.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Sparse Non-negative Matrix Modeling</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Model definition</head><p>In the Sparse Non-negative Matrix (SNM) paradigm, we represent the training data as a sequence of events E = e 1 , e 2 , ... where each event e ? E consists of a sparse non-negative feature vector f and a sparse non-negative target word vector t. Both vectors are binary-valued, indicating the presence or absence of a feature or target words, respectively. Hence, the training data consists of |E||P os(f )| positive and |E||P os(f )|(|V| ? 1) negative training examples, where P os(f ) denotes the number of positive elements in the vector f .</p><p>A language model is represented by a non-negative matrix M that, when applied to a given feature vector f , produces a dense prediction vector y:</p><formula xml:id="formula_3">y = Mf ? t<label>(4)</label></formula><p>Upon evaluation, we normalize y such that we end up with a conditional probability distribution P M (t|f ) for a model M. For each word w ? V that corresponds to index j in t, and its feature vector f that is defined by the equivalence class ? applied to the history h(w) of that word in a text, the conditional probability P M (w|?(h(w))) then becomes:</p><formula xml:id="formula_4">P M (w|?(h(w))) = P M (t j |f ) = y j |V| u=1 y u = i?P os(f ) M ij i?P os(f ) |V| u=1 M iu<label>(5)</label></formula><p>For convenience, we will write P (t j |f ) instead of P M (t j |f ) in the rest of the paper. As required by the denominator in Eq. (5), this computation involves summing over all of the present features for the entire vocabulary. However, if we precompute the row sums |V| u=1 M iu and store them together with the model, the evaluation can be done very efficiently in only |P os(f )| time. Moreover, only the positive entries in M i need to be considered, making the range of the sum sparse.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Adjustment function and metafeatures</head><p>We let the entries of M be a slightly modified version of the relative frequencies:</p><formula xml:id="formula_5">M ij = e A(i,j) C ij C i * (6)</formula><p>where C is a feature-target count matrix, computed over the entire training corpus and A(i, j) is a real-valued function, dubbed adjustment function. For each featuretarget pair (f i , t j ), the adjustment function extracts k new features ? k , called metafeatures, which are hashed as keys to store corresponding weights ?(hash(? k )) in a huge hash table. To limit memory usage, we use a flat hash table and allow collisions, although this has the potentially undesirable effect of tying together the weights of different metafeatures. Computing the adjustment function for any (f i , t j ) then amounts to summing the weights that correspond to its metafeatures:</p><formula xml:id="formula_6">A(i, j) = k ?(hash[? k (i, j)])<label>(7)</label></formula><p>From the given input features, such as regular n-grams and skip n-grams, we construct our metafeatures as conjunctions of any or all of the following elementary metafeatures:</p><p>? feature identity, e.g. [brown skip-2 over the lazy]</p><p>? feature type, e.g.</p><p>(1, 2, 3) skip-grams</p><formula xml:id="formula_7">? feature count C i * ? target identity, e.g. dog ? feature-target count C ij</formula><p>where we reused the example from Section 2. Note that the seemingly absent feature-target identity is represented by the conjunction of the feature identity and the target identity. Since the metafeatures may involve the feature count and feature-target count, in the rest of the paper we will write ? k (i, j, C i * , C ij ). This will become important later when we discuss leave-one-out training. Each elementary metafeature is joined with the others to form more complex metafeatures which in turn are joined with all the other elementary and complex metafeatures, ultimately ending up with all 2 5 ? 1 possible combinations of metafeatures.</p><p>Before they are joined, count metafeatures are bucketed together according to their (floored) log 2 value. As this effectively puts the lowest count values, of which there are many, into a different bucket, we optionally introduce a second (ceiled) bucket to assure smoother transitions. Both buckets are then weighted according to the log 2 fraction lost by the corresponding rounding operation. Note that if we apply double bucketing to both the feature and feature-target count, the amount of metafeatures per input feature becomes 2 7 ? 1.</p><p>We will come back to these metafeatures in Section 4.4 where we examine their individual effect on the model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Loss function</head><p>Estimating a model M corresponds to finding optimal weights ? k for all the metafeatures for all events in such a way that the average loss over all events between the target vector t and the prediction vector y is minimized, according to some loss function L. The most natural choice of loss function is one that is based on the multinomial distribution. That is, we consider t to be multinomially distributed with |V| possible outcomes. The loss function L multi then is:</p><formula xml:id="formula_8">L multi (y, t) = ?log(P multi (t|f )) = ?log( y j |V| u=1 y u ) = log( |V| u=1 y u ) ? log(y j )<label>(8)</label></formula><p>Another possibility is the loss function based on the Poisson distribution 2 : we consider each t j in t to be Poisson distributed with parameter y j . The conditional probability of P P oisson (t|f ) then is:</p><formula xml:id="formula_9">P P oisson (t|f ) = j?t y t j j e ?y j t j !<label>(9)</label></formula><p>and the corresponding Poisson loss function is:</p><formula xml:id="formula_10">L P oisson (y, t) = ?log(P P oisson (t|f )) = ? j?t [t j log(y j ) ? y j ? log(t j !)] = j?t y j ? j?t t j log(y j )<label>(10)</label></formula><p>where we dropped the last term, since t j is binary-valued 3 . Although this choice is not obvious in the context of language modeling, it is well suited to gradient-based optimization and, as we will see, the experimental results are in fact excellent.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Model Estimation</head><p>The adjustment function is learned by applying stochastic gradient descent on the loss function. That is, for each feature-target pair (f i , t j ) in each event we need to update the parameters of the metafeatures by calculating the gradient with respect to the adjustment function.</p><p>For the multinomial loss, this gradient is:</p><formula xml:id="formula_11">?(L multi (Mf , t)) ?(A(i, j)) = ?(log( |V| u=1 (Mf ) u ) ? log(Mf ) j ) ?(M ij ) ?(M ij ) ?(A ij ) = [ ?(log( |V| u=1 (Mf ) u )) ?(M ij ) ? ?(log(Mf ) j ) ?(M ij ) ]M ij = [ ?( |V| u=1 (Mf ) u ) |V| u=1 (Mf ) u ?(M ij ) ? ?(Mf ) j (Mf ) j ?(M ij ) ]M ij = ( f i |V| u=1 (Mf ) u ? f i ? t j y j )M ij = f i M ij ( 1 |V| u=1 y u ? t j y j )<label>(11)</label></formula><p>The problem with this update rule is that we need to sum over the entire vocabulary V in the denominator. For most features f i , this is not a big deal as C iu = 0, but some features occur with many if not all targets e.g. the empty feature for unigrams. Although we might be able to get away with this by re-using these sums and applying them to many/all events in a mini batch, we chose to work with the Poisson loss in our first implementation.</p><p>If we calculate the gradient of the Poisson loss, we get the following:</p><formula xml:id="formula_12">?(L P oisson (Mf , t)) ?(A(i, j)) = ?( |V| u=1 (Mf ) u ? |V| u=1 t u log(Mf ) u ) ?(M ij ) ?(M ij ) ?(A(i, j)) = [ ?( |V| u=1 (Mf ) u ) ?(M ij ) ? ?( |V| u=1 t u log(Mf ) u ) ?(M ij ) ]M ij = [f i ? t j (Mf ) j ?(Mf ) j ?(M ij ) ]M ij = [f i ? t j f i (Mf ) j ]M ij = f i M ij (1 ? t j y j )<label>(12)</label></formula><p>If we were to apply this gradient to each (positive and negative) training example, it would be computationally too expensive, because even though the second term is zero for all the negative training examples, the first term needs to be computed for all |E||P os(f )||V| training examples.</p><p>However, since the first term does not depend on y j , we are able to distribute the updates for the negative examples over the positive ones by adding in gradients for a fraction of the events where f i = 1, but t j = 0. In particular, instead of adding the term f i M ij , we add f i t j</p><formula xml:id="formula_13">C i * C ij M ij : C i * C ij M ij e=(f i ,t j )?E f i t j = C i * C ij M ij C ij = M ij e=(f i ,t j )?E f i<label>(13)</label></formula><p>which lets us update the gradient only on positive examples. We note that this update is only strictly correct for batch training, and not for online training since M ij changes after each update. Nonetheless, we found this to yield good results as well as seriously reducing the computational cost. The online gradient applied to each training example then becomes:</p><formula xml:id="formula_14">?(L P oisson (Mf , t)) ?(A(i, j)) = f i t j M ij ( C i * C ij ? 1 y j )<label>(14)</label></formula><p>which is non-zero only for positive training examples, hence speeding up computation by a factor of |V|. These aggregated gradients however do not allow us to use additional data to train the adjustment function, since they tie the update computation to the relative frequencies C i * C ij . Instead, we have to resort to leave-one-out training to prevent the model from overfitting the training data. We do this by excluding the event, generating the gradients, from the counts used to compute those gradients. So, for each positive example (f i , t j ) of each event e = (f , t), we compute the gradient, excluding f i from C i * and f i t j from C ij . For the gradients of the negative examples on the other hand we only exclude f i from C i * and we leave C ij untouched, since here we did not observe t j . In order to keep the aggregate computation of the gradients for the negative examples, we distribute them uniformly over all the positive examples with the same feature; each of the C ij positive examples will then compute the gradient of</p><formula xml:id="formula_15">C i * ?C ij C ij</formula><p>negative examples. To summarize, when we do leave-one-out training we apply the following gradient update rule on all positive training examples:</p><formula xml:id="formula_16">?(L P oisson (Mf , t)) ?(A(i, j)) = f i t j C i * ? C ij C ij C ij C i * ? 1 e k ?(hash[? k (i,j,C i * ?1,C ij )]) + f i t j C ij ? 1 C i * ? 1 y ? j ? 1 y ? j e k ?(hash[? k (i,j,C i * ?1,C ij ?1)]) (15)</formula><p>where y ? j is the product of leaving one out for all the relevant features i.e.</p><formula xml:id="formula_17">y ? j = (M ? f ) j and M ? ij = e k ?(hash[? k (i,j,C i * ?1,C ij ?1)]) C ij ?1 C i * ?1 .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Experiments</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Corpus: One Billion Benchmark</head><p>Our experimental setup used the One Billion Word Benchmark corpus 4 made available by <ref type="bibr" target="#b4">[Chelba et al., 2013]</ref>. For completeness, here is a short description of the corpus, containing only monolingual English data:</p><p>? Total number of training tokens is about 0.8 billion ? The vocabulary provided consists of 793471 words including sentence boundary markers &lt;S&gt;, &lt;\S&gt;, and was constructed by discarding all words with count below 3</p><p>? Words outside of the vocabulary were mapped to &lt;UNK&gt; token, also part of the vocabulary ? The test data consisted of 159658 words (without counting the sentence beginning marker &lt;S&gt; which is never predicted by the language model)</p><p>? The out-of-vocabulary (OoV) rate on the test set was 0.28%.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">SNM for n-gram LMs</head><p>When trained using solely n-gram features, SNM comes very close to the stateof-the-art Kneser-Ney <ref type="bibr" target="#b11">[Kneser and Ney, 1995]</ref> (KN) models. <ref type="table">Table 1</ref> shows that Katz <ref type="bibr" target="#b10">[Katz, 1995]</ref> performs considerably worse than both SNM and KN which only differ by about 5%. When we interpolate these two models linearly, the added gain is only about 1%, suggesting that they are approximately modeling the same things. The difference between KN and SNM becomes smaller when we increase the size of the context, going from 5% for 5-grams to 3% for 8-grams, which indicates that SNM is better suited to a large number of features.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Sparse Non-negative Modeling for Skip n-grams</head><p>When we incorporate skip-gram features, we can either build a 'pure' skip-gram SNM that contains no regular n-gram features, except for unigrams, and interpolate this model with KN, or we can build a single SNM that has both the regular ngram features and the skip-gram features. We compared the two approaches by choosing skip-gram features that can be considered the skip-equivalent of 5-grams i.e. they contain at most 4 words. In particular, we used skip-gram features where the remote span is limited to at most 3 words for skips of length between 1 and 3 ( We then built a model that uses both these features and regular 5-grams (SNM5-skip), as well as one that only uses the skip-gram features (SNM5skip (no n-grams)).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Model</head><p>Num. Params PPL SNM5-skip (no n-grams) 61 B 69.8 SNM5-skip 62 B 54.2 KN5+SNM5-skip (no n-grams) 56.5 KN5+SNM5-skip 53.6 <ref type="table">Table 2</ref>: Number of parameters (in billions) and perplexity results for SNM5-skip models with and without n-grams, as well as perplexity results for the interpolation with KN5.</p><p>As it turns out and as can be seen from <ref type="table">Table 2</ref>, it is better to incorporate all the features into one single SNM model than to interpolate with a KN 5-gram model (KN5). Interpolating the all-in-one SNM5-skip with KN5 yields almost no additional gain.</p><p>The best SNM results so far (SNM10-skip) were achieved using 10-grams, together with untied skip features of at most 5 words with a skip of exactly 1 word (s = 1, r + a = [1..5]) as well as tied skip features of at most 4 words where only 1 word is remote, but up to 10 words can be skipped (r = 1, s = [1..10], r + a = [1..4]).</p><p>This mixture of rich short-distance and shallow long-distance features enables the model to achieve state-of-the-art results, as can be seen in <ref type="table" target="#tab_2">Table 3</ref>. When we compare the perplexity of this model with the state-of-the art RNN results in <ref type="bibr" target="#b4">[Chelba et al., 2013]</ref>, the difference is only 3%. Moreover, although our model has more parameters than the RNN (33 vs 20 billion), training takes about a tenth of the time (24 hours vs 240 hours). Interestingly, when we interpolate the two models, we have an additional gain of 20%, and as far as we know, the perplexity of 41.3 is already the best ever reported on this database, beating the previous best by 6% <ref type="bibr" target="#b4">[Chelba et al., 2013]</ref>.</p><p>Finally, when we optimize interpolation weights over all models in <ref type="bibr" target="#b4">[Chelba et al., 2013]</ref>, including SNM5-skip and SNM10-skip, the contribution of the other models as well as the perplexity reduction is negligible, as can be seen in <ref type="table" target="#tab_2">Table 3</ref>, which also summarizes the perplexity results for each of the individual models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Ablation Experiments</head><p>To find out how much, if anything at all, each metafeature contributes to the adjustment function, we ran a series of ablation experiments in which we ablated one metafeature at a time. When we experimented on SNM5, we found, unsurprisingly, that the most important metafeature is the feature-target count. At first glance, it does not seem to matter much whether the counts are stored in 1 or 2 buckets, but   the second bucket really starts to pay off for models with a large number of singleton features e.g. SNM10-skip 5 . This is not the case for the feature counts, where having a single bucket is always better, although in general the feature counts do not contribute much. In any case, feature counts are definitely the least important for the model. The remaining metafeatures all contribute more or less equally, all of which can be seen in <ref type="table" target="#tab_3">Table 4</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Related Work</head><p>SNM estimation is closely related to all n-gram LM smoothing techniques that rely on mixing relative frequencies at various orders. Unlike most of those, it combines the predictors at various orders without relying on a hierarchical nesting of the contexts, setting it closer to the family of maximum entropy (ME) <ref type="bibr" target="#b14">[Rosenfeld, 1994]</ref>, or exponential models. We are not the first ones to highlight the effectiveness of skip n-grams at capturing dependencies across longer contexts, similar to RNN LMs; previous such results were reported in <ref type="bibr" target="#b15">[Singh and Klakow, 2013]</ref>. <ref type="bibr" target="#b3">[Chelba and Jelinek, 2000]</ref> attempts to capture long range dependencies in language where the skip n-grams are identified using a left-to-right syntactic parser. Approaches such as <ref type="bibr" target="#b0">[Bellegarda, 2000]</ref> leverage latent semantic information, whereas <ref type="bibr" target="#b17">[Tan et al., 2012]</ref> integrates both syntactic and topic-based modeling in a unified approach.</p><p>The speed-ups to ME, and RNN LM training provided by hierarchically predicting words at the output layer <ref type="bibr" target="#b7">[Goodman, 2001b]</ref>, and subsampling <ref type="bibr" target="#b20">[Xu et al., 2011]</ref> still require updates that are linear in the vocabulary size times the number of words in the training data, whereas the SNM updates in Eq. (15) for the much smaller adjustment function eliminate the dependency on the vocabulary size. Scaling up RNN LM training is described in <ref type="bibr" target="#b4">[Chelba et al., 2013]</ref> and <ref type="bibr">[Williams et. al.]</ref>.</p><p>The computational advantages of SNM over both Maximum Entropy and RNN LM estimation are probably its main strength, promising an approach that has the same flexibility in combining arbitrary features effectively and yet should scale to very large amounts of data as gracefully as n-gram LMs do.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusions and Future Work</head><p>We have presented SNM, a new family of LM estimation techniques. A first empirical evaluation on the One Billion Word Benchmark <ref type="bibr" target="#b4">[Chelba et al., 2013]</ref> shows that SNM n-gram LMs perform almost as well as the well-established KN models.</p><p>When using skip-gram features the models are able to match the stat-of-the-art RNN LMs; combining the two modeling techniques yields the best known result on the benchmark.</p><p>Future work items include model pruning, exploring richer features similar to <ref type="bibr" target="#b6">[Goodman, 2001a]</ref>, as well as richer metafeatures in the adjustment model, mixing SNM models trained on various data sources such that they perform best on a given development set, and estimation techniques that are more flexible in this respect.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>?</head><label></label><figDesc>Sentence Perplexity results for Kneser-Ney, Katz and SNM, as well as for the linear interpolation of Kneser-Ney and SNM. Optimal interpolation weights are always around 0.6 ? 0.7 (KN) and 0.3 ? 0.4 (SNM).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 3 :</head><label>3</label><figDesc>Number of parameters (in billions) and perplexity results for each of the models in<ref type="bibr" target="#b4">[Chelba et al., 2013]</ref>, and SNM5-skip and SNM10-skip, as well as interpolation results and weights.</figDesc><table><row><cell>Ablated feature</cell><cell>PPL</cell></row><row><cell>No ablation</cell><cell>70.8</cell></row><row><cell>Feature</cell><cell>71.9</cell></row><row><cell>Feature type</cell><cell>71.4</cell></row><row><cell>Feature count</cell><cell>70.6</cell></row><row><cell cols="2">Feature count: second bucket 70.3</cell></row><row><cell>Link count</cell><cell>73.2</cell></row><row><cell>Link count: second bucket</cell><cell>70.6</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 4 :</head><label>4</label><figDesc>Metafeature ablation experiments on SNM5</figDesc><table /><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2">Although we do not use it at this point, the Poisson loss also lends itself nicely for multiple target prediction which might be useful in e.g. subword modeling.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3">In fact, even in the general case where t k can take any non-negative value, this term will disappear in the gradient, as it is independent of M.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4">http://www.statmt.org/lm-benchmark</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5">Ideally we want to have the SNM10-skip ablation results as well, but this takes up a lot of time, during which other development is hindered.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Exploiting Latent Semantic Information in Statistical Language Modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><forename type="middle">J</forename><surname>Bellegarda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bellegarda</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of the IEEE</title>
		<imprint>
			<biblScope unit="volume">88</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="1279" to="1296" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A neural probabilistic language model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Bengio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="1137" to="1155" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Class-Based N-gram Models of Natural Language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Linguistics</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="467" to="479" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Structured language modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Chelba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Jelinek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Speech and Language</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="283" to="332" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">One Billion Word Benchmark for Measuring Progress in Statistical Language Modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Chelba</surname></persName>
		</author>
		<idno>41880</idno>
		<editor>Ciprian Chelba and Tomas Mikolov and Mike Schuster and Qi Ge and Thorsten Brants and Phillipp Koehn and Tony Robinson</editor>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
	<note type="report_type">Google Tech Report</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">A Neural Syntactic Language Model</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
		<respStmt>
			<orgName>Johns Hopkins University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. thesis</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">A bit of progress in language modeling, extended version</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Goodman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">]</forename><forename type="middle">J T</forename><surname>Goodman</surname></persName>
		</author>
		<idno>MSR-TR-2001-72</idno>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Classes for fast maximum entropy training</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Goodman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">]</forename><forename type="middle">J T</forename><surname>Goodman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICASSP</title>
		<meeting>ICASSP</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Statistical Methods for Speech Recognition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Jelinek</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997" />
			<publisher>MIT Press</publisher>
			<pubPlace>Cambridge, MA, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Interpolated estimation of Markov source parameters from sparse data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mercer ; Frederick</forename><surname>Jelinek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Jelinek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mercer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Pattern Recognition in Practice</title>
		<editor>Gelsema and Kanal</editor>
		<imprint>
			<date type="published" when="1980" />
			<biblScope unit="page" from="381" to="397" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Estimation of probabilities from sparse data for the language model component of a speech recognizer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><forename type="middle">S</forename><surname>Katz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Katz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Transactions on Acoustics, Speech and Signal Processing</title>
		<imprint>
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Improved Backing-Off For M-Gram Language Modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ney ; R</forename><surname>Kneser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Kneser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICASSP</title>
		<meeting>ICASSP</meeting>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Statistical Language Models based on Neural Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><forename type="middle">T</forename><surname>Mikolov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mikolov</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
		<respStmt>
			<orgName>Brno University of Technology</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. thesis</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Hierarchical Probabilistic Neural Network Language Model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bengio ; F</forename><surname>Morin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Morin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bengio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of AISTATS</title>
		<meeting>AISTATS</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Adaptive Statistical Language Modeling: A Maximum Entropy Approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rosenfeld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Speech and Language</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<date type="published" when="1994" />
		</imprint>
		<respStmt>
			<orgName>Carnegie Mellon University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. thesis</note>
	<note>Continuous space language models</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Comparing RNNs and log-linear interpolation of improved skip-model on four Babel languages: Cantonese, Pashto, Tagalog, Turkish</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Klakow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICASSP</title>
		<meeting>ICASSP</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
	<note>Singh and Klakow, 2013</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">LSTM Neural Networks for Language Modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Sundermeyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Interspeech</title>
		<meeting>Interspeech</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A Scalable Distributed Syntactic, Semantic, and Lexical Language Model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Tan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computational Linguistics</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="page" from="631" to="671" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A hierarchical Bayesian language model based on PitmanYor processes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">W</forename><surname>Teh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Coling/ACL</title>
		<meeting>Coling/ACL</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Scaling Recurrent Neural Network Language Models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Williams</surname></persName>
		</author>
		<idno>abs/1502.00512</idno>
	</analytic>
	<monogr>
		<title level="m">CoRR</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Efficient Subsampling for Training Complex Language Models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of EMNLP</title>
		<meeting>EMNLP</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
