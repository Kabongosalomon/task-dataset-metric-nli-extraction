<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /nfs/home/kabenamualus/Research/task-dataset-metric-extraction/../grobid-0.6.0/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Evaluating Large Language Models Trained on Code</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Chen</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jerry</forename><surname>Tworek</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Heewoo</forename><surname>Jun</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qiming</forename><surname>Yuan</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Henrique</forename><surname>Ponde</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oliveira</forename><surname>Pinto</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jared</forename><surname>Kaplan</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Anthropic AI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harri</forename><surname>Edwards</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuri</forename><surname>Burda</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicholas</forename><surname>Joseph</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Anthropic AI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Greg</forename><surname>Brockman</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Ray</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raul</forename><surname>Puri</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gretchen</forename><surname>Krueger</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Petrov</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Heidy</forename><surname>Khlaaf</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Girish</forename><surname>Sastry</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pamela</forename><surname>Mishkin</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brooke</forename><surname>Chan</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Gray</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nick</forename><surname>Ryder</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mikhail</forename><surname>Pavlov</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alethea</forename><surname>Power</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lukasz</forename><surname>Kaiser</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mohammad</forename><surname>Bavarian</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Clemens</forename><surname>Winter</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philippe</forename><surname>Tillet</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Felipe</forename><forename type="middle">Petroski</forename><surname>Such</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dave</forename><surname>Cummings</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthias</forename><surname>Plappert</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fotios</forename><surname>Chantzis</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elizabeth</forename><surname>Barnes</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ariel</forename><surname>Herbert-Voss</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">Hebgen</forename><surname>Guss</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Nichol</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Paino</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nikolas</forename><surname>Tezak</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jie</forename><surname>Tang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Igor</forename><surname>Babuschkin</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Suchir</forename><surname>Balaji</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shantanu</forename><surname>Jain</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>Saunders</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Hesse</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><forename type="middle">N</forename><surname>Carr</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan</forename><surname>Leike</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Josh</forename><surname>Achiam</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vedant</forename><surname>Misra</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Evan</forename><surname>Morikawa</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alec</forename><surname>Radford</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><surname>Knight</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Miles</forename><surname>Brundage</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mira</forename><surname>Murati</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Katie</forename><surname>Mayer</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Welinder</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bob</forename><surname>Mcgrew</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dario</forename><surname>Amodei</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Anthropic AI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sam</forename><surname>Mccandlish</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Anthropic AI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wojciech</forename><surname>Zaremba</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">OpenAI</orgName>
								<address>
									<addrLine>San Francisco</addrLine>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Chen</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">&amp;lt;mark@openai</forename><surname>Com&amp;gt;</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jerry</forename><surname>Tworek</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Heewoo</roleName><forename type="first">Jun &amp;lt;hee-Woo@openai</forename><surname>Com&amp;gt;</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Qiming Yuan &amp;lt;qiming@openai.com&amp;gt;.</roleName><surname>Com&amp;gt;</surname></persName>
						</author>
						<title level="a" type="main">Evaluating Large Language Models Trained on Code</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note>* Equal contribution. Work per-formed while at OpenAI. 3 Zipline, South San Francisco, California, USA. Work per-formed while at OpenAI. Correspondence to:</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.6.0" ident="GROBID-SDO" when="2022-11-12T05:41+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid-sdo"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We introduce Codex, a GPT language model finetuned on publicly available code from GitHub, and study its Python code-writing capabilities. A distinct production version of Codex powers GitHub Copilot. On HumanEval, a new evaluation set we release to measure functional correctness for synthesizing programs from docstrings, our model solves 28.8% of the problems, while GPT-3 solves 0% and GPT-J solves 11.4%. Furthermore, we find that repeated sampling from the model is a surprisingly effective strategy for producing working solutions to difficult prompts. Using this method, we solve 70.2% of our problems with 100 samples per problem. Careful investigation of our model reveals its limitations, including difficulty with docstrings describing long chains of operations and with binding operations to variables. Finally, we discuss the potential broader impacts of deploying powerful code generation technologies, covering safety, security, and economics.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Abstract</head><p>We introduce Codex, a GPT language model finetuned on publicly available code from GitHub, and study its Python code-writing capabilities. A distinct production version of Codex powers GitHub Copilot. On HumanEval, a new evaluation set we release to measure functional correctness for synthesizing programs from docstrings, our model solves 28.8% of the problems, while GPT-3 solves 0% and GPT-J solves 11.4%. Furthermore, we find that repeated sampling from the model is a surprisingly effective strategy for producing working solutions to difficult prompts. Using this method, we solve 70.2% of our problems with 100 samples per problem. Careful investigation of our model reveals its limitations, including difficulty with docstrings describing long chains of operations and with binding operations to variables. Finally, we discuss the potential broader impacts of deploying powerful code generation technologies, covering safety, security, and economics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Scalable sequence prediction models <ref type="bibr" target="#b44">(Graves, 2014;</ref><ref type="bibr">Vaswani et al., 2017;</ref><ref type="bibr" target="#b24">Child et al., 2019)</ref> have become a general-purpose method for generation and representation learning in many domains, including natural language processing <ref type="bibr" target="#b78">(Mikolov et al., 2013;</ref><ref type="bibr">Sutskever et al., 2014;</ref><ref type="bibr" target="#b30">Dai &amp; Le, 2015;</ref><ref type="bibr" target="#b87">Peters et al., 2018;</ref><ref type="bibr" target="#b92">Radford et al., 2018;</ref><ref type="bibr" target="#b35">Devlin et al., 2018)</ref>, computer vision ( <ref type="bibr">Van Oord et al., 2016;</ref><ref type="bibr" target="#b77">Menick &amp; Kalchbrenner, 2018;</ref><ref type="bibr" target="#b23">Chen et al., 2020;</ref><ref type="bibr" target="#b13">Bao et al., 2021)</ref>, audio and speech processing <ref type="bibr" target="#b82">(Oord et al., 2016;</ref><ref type="bibr" target="#b36">Dhariwal et al., 2020;</ref><ref type="bibr" target="#b11">Baevski et al., 2020)</ref>, biology <ref type="bibr" target="#b8">(Alley et al., 2019;</ref><ref type="bibr">Rives et al., 2021)</ref>, and even across multiple modalities <ref type="bibr" target="#b31">(Das et al., 2017;</ref><ref type="bibr" target="#b71">Lu et al., 2019;</ref><ref type="bibr" target="#b96">Ramesh et al., 2021;</ref><ref type="bibr">Zellers et al., 2021)</ref>. More recently, language models have also fueled progress towards the longstanding challenge of program synthesis <ref type="bibr" target="#b104">(Simon, 1963;</ref><ref type="bibr" target="#b74">Manna &amp; Waldinger, 1971)</ref>, spurred by the presence of code in large datasets <ref type="bibr" target="#b54">(Husain et al., 2019;</ref><ref type="bibr" target="#b41">Gao et al., 2020)</ref> and the resulting programming capabilities of language models trained on these datasets <ref type="bibr">(Wang &amp; Komatsuzaki, 2021)</ref>. Popular language modeling objectives like masked language modeling <ref type="bibr" target="#b35">(Devlin et al., 2018)</ref> and span prediction <ref type="bibr" target="#b95">(Raffel et al., 2020)</ref> have also been adapted to train their programming counterparts CodeBERT <ref type="bibr" target="#b39">(Feng et al., 2020)</ref> and PyMT5 <ref type="bibr" target="#b27">(Clement et al., 2020)</ref>.</p><p>Similarly, our early investigation of GPT-3 <ref type="bibr" target="#b59">(Brown et al., 2020)</ref> revealed that it could generate simple programs from Python docstrings. While rudimentary, this capability was exciting because GPT-3 was not explicitly trained for code generation. Given the considerable success of large language models in other modalities and the abundance of publicly available code, we hypothesized that a specialized GPT model, called Codex, could excel at a variety of coding tasks. This paper describes several early Codex models, whose descendants power GitHub Copilot and the Codex models in the OpenAI API. arXiv:2107.03374v2 <ref type="bibr">[cs.</ref>LG] 14 Jul 2021 <ref type="figure">Figure 1</ref>. Pass rates of our models on the HumanEval dataset as a function of model size. When a single sample is generated for each problem, GPT-12B solves no problems, but Codex (fine-tuned on code) solves 28.8% of the problems, and Codex-S (further fine-tuned on correctly implemented standalone functions) solves 37.7% of the problems. From here, further gains can be realized by generating 100 samples per problem and selecting the sample with the highest mean log-probability (44.5% solved) or by selecting the sample that passes the unit tests (77.5% solved). All samples are generated with temperature 0.8.</p><p>In this work, we focus on the task of generating standalone Python functions from docstrings, and evaluate the correctness of code samples automatically through unit tests. This is in contrast to natural language generation, where samples are typically evaluated by heuristics or by human evaluators. To accurately benchmark our model, we create a dataset of 164 original programming problems with unit tests. These problems assess language comprehension, algorithms, and simple mathematics, with some comparable to simple software interview questions. We release this data along with an evaluation framework at https://www.github.com/openai/human-eval.</p><p>To solve a problem in our test set, we generate multiple samples from the models, and check if any of them pass the unit tests. With just a single sample, a 12B parameter Codex solves 28.8% of these problems, and a 300M parameter Codex solves 13.2% of these problems. In contrast, the 6B parameter GPT-J (Wang &amp; Komatsuzaki, 2021) achieves 11.4% on the same dataset, while all GPT models achieve near 0%. To improve our model's performance at the task of function synthesis from docstrings, we fine-tune Codex on standalone, correctly implemented functions. The resulting model, Codex-S, solves 37.7% of problems with a single sample. <ref type="figure">Figure 2</ref> showcases problems of varying difficulty in our dataset, along with correct model generated solutions.</p><p>Real-world programming tasks often involve iterations of approaches and bug fixes, which is approximated by generating many samples from our models and selecting one that passes all unit tests. Within 100 samples, Codex-S is able to generate at least one correct function for 77.5% of the problems. This result suggests that accurate code samples can be selected via heuristic ranking instead of fully evaluating each sample, the latter of which may not be possible or practical in deployment. Indeed, we find that the sample with highest mean log-probability passes unit tests for 44.5% of the problems.</p><p>We conclude by discussing the limitations and potential broader impacts of these Codex models and of increasingly powerful code generating models more generally.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Evaluation Framework</head><p>In this section, we discuss the details of our evaluation framework. We begin by defining the pass@k metric, and explain its advantages over standard match-based metrics. Next, we describe the dataset of hand-written problems, called "HumanEval," which we created in order to benchmark our models. Finally, we discuss the sandbox environment we used to safely execute model-generated code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">Functional Correctness</head><p>Generative models for code are predominantly benchmarked by matching samples against a reference solution, where the match can be exact or fuzzy (as in BLEU score). However, recent work has surfaced deficiencies in match-based metrics for code. For instance, <ref type="bibr" target="#b98">Ren et al. (2020)</ref> finds that BLEU has problems capturing semantic features specific to code, and suggests several semantic modifications to the score.</p><p>More fundamentally, match-based metrics are unable to account for the large and complex space of programs functionally equivalent to a reference solution. As a consequence, recent works in unsupervised code translation <ref type="bibr" target="#b66">(Lachaux et al., 2020)</ref> and pseudocode-to-code translation <ref type="bibr" target="#b64">(Kulal et al., 2019)</ref> have turned to functional correctness instead, where a sample is considered correct if it passes a set of unit tests. We argue that this metric should be applied to docstringconditional code generation as well.</p><p>Perhaps the most convincing reason to evaluate functional correctness is that it is used by human developers to judge code. A framework known as test-driven development dictates that software requirements be converted into test cases before any implementation begins, and success is defined by a program that passes these tests. While few organizations employ full test-driven development, integration of new code is usually dependent on creating and passing unit tests. <ref type="bibr" target="#b64">Kulal et al. (2019)</ref> evaluate functional correctness using the pass@k metric, where k code samples are generated per problem, a problem is considered solved if any sample Evaluating Large Language Models Trained on Code <ref type="figure">Figure 2</ref>. Three example problems from the HumanEval dataset, where the probabilities that a single sample from Codex-12B passes unit tests are 0.9, 0.17, and 0.005. The prompt provided to the model is shown with a white background, and a successful model-generated completion is shown in a yellow background. Though not a guarantee for problem novelty, all problems were hand-written and not programmatically copied from existing sources. Random problems and samples can be found in Appendix B.</p><p>passes the unit tests, and the total fraction of problems solved is reported. However, computing pass@k in this way can have high variance. Instead, to evaluate pass@k, we generate n ? k samples per task (in this paper, we use n = 200 and k ? 100), count the number of correct samples c ? n which pass unit tests, and calculate the unbiased estimator pass@k := E Problems 1 ? n?c k n k</p><p>(1)</p><p>Calculating this estimator directly results in very large numbers and numerical instability. In <ref type="figure">Figure 3</ref>, we include a numerically stable numpy implementation that simplifies the expression and evaluates the product term-by-term. One may be tempted to estimate pass@k with 1?(1?p) k wher? p is the empirical estimate of pass@1, but we show that it is biased in Appendix A.</p><p>def pass_at_k(n, c, k): """ :param n: total number of samples :param c: number of correct samples :param k: k in pass@$k$ """ if n -c &lt; k: return 1.0 return 1.0 -np.prod(1.0 -k / np.arange(n -c + 1, n + 1)) <ref type="figure">Figure 3</ref>. A numerically stable script for calculating an unbiased estimate of pass@k.</p><p>Later, we provide evidence that BLEU score may not be a reliable indicator of functional correctness by showing that functionally inequivalent programs generated by our model (which are guaranteed to disagree with the reference solution on some input) often have higher BLEU scores than functionally equivalent ones.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">HumanEval: Hand-Written Evaluation Set</head><p>We evaluate functional correctness on a set of 164 handwritten programming problems, which we call the Hu-manEval dataset. Each problem includes a function signature, docstring, body, and several unit tests, with an average of 7.7 tests per problem. It is important for these tasks to be hand-written, since our models are trained on a large fraction of GitHub, which already contains solutions to problems from a variety of sources. For example, there are more than ten public repositories containing solutions to Codeforces problems, which make up part of the recently proposed APPS dataset <ref type="bibr" target="#b51">(Hendrycks et al., 2021)</ref>.</p><p>Programming tasks in the HumanEval dataset assess language comprehension, reasoning, algorithms, and simple mathematics. We release the HumanEval dataset so that others can evaluate functional correctness and measure the problem-solving capabilities of their models. The dataset can be found at https://www.github.com/openai/human-eval.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.">Sandbox for Executing Generated Programs</head><p>Since publicly available programs have unknown intent and generated programs are often incorrect, executing these programs poses a security risk. Indeed, GitHub is known to contain malicious programs that alter or change their environments <ref type="bibr" target="#b100">(Rokon et al., 2020)</ref>.</p><p>Therefore, we developed a sandbox environment to safely run untrusted programs against unit tests. Our goals were to prevent these programs from modifying, gaining persistence on, accessing sensitive resources on, or exfiltrating data from a host or network. Since OpenAI's training infrastructure is built on Kubernetes and cloud services, we designed our sandbox to address the limitations of these environments while remaining idiomatic with their patterns of use.</p><p>We selected the gVisor container runtime <ref type="bibr" target="#b65">(Lacasse, 2018)</ref> as the main host protection component. Since container runtimes like Docker can share host resources with containers, a malicious container could potentially compromise a host. gVisor protects the host by emulating its resources to introduce a security boundary between the host and its containers. Network-adjacent hosts and services are protected by eBPF-based firewall rules that prevent inbound and outbound connections except for those required for experiment control.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Code Fine-Tuning</head><p>We fine-tune GPT models containing up to 12B parameters on code to produce Codex. In contrast with GPT, Codex displays non-trivial performance on the HumanEval dataset. In fact, Codex is able to solve the majority of the problems in HumanEval if we generate and evaluate 100 samples per problem, and pick one that passes unit tests. When limited to a budget of one evaluation per problem, producing multiple samples with Codex and choosing the one with the highest mean log-probability provides significant gains.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Data Collection</head><p>Our training dataset was collected in May 2020 from 54 million public software repositories hosted on GitHub, containing 179 GB of unique Python files under 1 MB. We filtered out files which were likely auto-generated, had average line length greater than 100, had maximum line length greater than 1000, or contained a small percentage of alphanumeric characters. After filtering, our final dataset totaled 159 GB.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Methods</head><p>Since Codex is evaluated on natural language prompts, we hypothesized that it would be beneficial to fine-tune from the GPT-3 <ref type="bibr" target="#b59">(Brown et al., 2020)</ref> model family, which already contains strong natural language representations. Surprisingly, we did not observe improvements when starting from a pre-trained language model, possibly because the finetuning dataset is so large. Nevertheless, models fine-tuned from GPT converge more quickly, so we apply this strategy for all subsequent experiments.</p><p>We train Codex using the same learning rate as the corresponding GPT model, with a 175 step linear warmup and cosine learning rate decay. We train for a total of 100 billion tokens, using the Adam optimizer with ? 1 = 0.9, ? 2 = 0.95, = 10 ?8 , and a weight decay coefficient of 0.1.</p><p>In order to maximally leverage text representations from GPT, we base our code lexer on the GPT-3 text tokenizer. Since the distribution of words in GitHub code differs from that of natural text, this tokenizer is not very effective for representing code. The largest source of inefficiency arises from encoding whitespace, so we add an additional set of tokens for representing whitespace runs of different lengths. This allows us to represent code using approximately 30% fewer tokens.</p><p>To compute pass@k, we assemble each HumanEval problem into a prompt consisting of a header, a signature, and a docstring, which is illustrated in <ref type="figure">Figure 2</ref>. We sample tokens from Codex until we encounter one of the following stop sequences: '\nclass', '\ndef', '\n#', '\nif', or '\nprint', since the model will continue generating additional functions or statements otherwise. We use nucleus sampling <ref type="bibr" target="#b53">(Holtzman et al., 2020)</ref> with top p = 0.95 for all sampling evaluation in this work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Results</head><p>In <ref type="figure" target="#fig_0">Figure 4</ref>, we plot test loss on a held-out validation set against Codex model size. We find that just as language model test loss follows a power law in model size <ref type="bibr" target="#b59">(Kaplan et al., 2020)</ref>, test loss after code fine-tuning follows a similar power law with functional form ( N 5.92?10 7 ) ?0.13 where N is the number of non-embedding parameters in the model. When evaluating pass@k, it is important to optimize sampling temperature for the particular value of k. In <ref type="figure" target="#fig_1">Figure 5</ref>, we plot pass@k against the number of samples k and the sampling temperature. We find that higher temperatures are optimal for larger k, because the resulting set of samples has higher diversity, and the metric rewards only whether the model generates any correct solution.</p><p>In particular, for a 679M parameter model, the optimal temperature for pass@1 is T * = 0.2 and the optimal temperature for pass@100 is T * = 0.8. With these temperatures, we find that pass@1 and pass@100 scale smoothly as a function of model size ( <ref type="figure" target="#fig_2">Figure 6</ref>).</p><p>Pass@k can also be interpreted as the result of evaluating the best out of k samples, where the best sample is picked by an oracle with prior knowledge of the unit tests. From a practical perspective, we are also interested in the setting where we must select a single sample from k samples without having access to an oracle. For instance, when the model is used as an autocomplete tool where a user provides a prompt, we do not have unit tests, but would like to return only a single completion to the user for evaluation so as to not overwhelm them.</p><p>Inspired by similar work in language modeling, we find that choosing the sample with the highest mean token log probability outperforms evaluating a random sample, while choosing the sample based on sum log probability can perform slightly worse than picking randomly. <ref type="figure">Figure 7</ref> demonstrates the benefits of applying these heuristics to samples (at temperature 0.8) from Codex-12B.  . Using the optimal temperatures 0.2 and 0.8 for pass@1 and pass@100, we plot these two metrics as a function of model size. Performance appears to scale smoothly as a sigmoid in logparameters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 7.</head><p>Model performance in the setting where we can generate multiple samples, but only evaluate one. We can do better than randomly selecting a sample by choosing the solution with the highest mean log-probability (red) or with the highest back-translation score (orange) described in Sec. 5. The blue line represents the theoretical best performance obtained using an oracle with prior knowledge of the unit tests.</p><p>Finally, we compute BLEU scores for all Codex-12B Hu-manEval samples (at temperature 0.8) against their reference solutions. For each problem, when we plot the distributions of BLEU scores for correct and incorrect solutions, we notice significant overlap ( <ref type="figure">Figure 8</ref>). Since an incorrect solution is guaranteed to be functionally inequivalent to the reference solution, we conclude that improvements in BLEU score may not indicate improved rates of functional correctness in practice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.">Comparative Analysis of Related Models and Systems</head><p>Two recent works similar in spirit to Codex are GPT-Neo <ref type="bibr" target="#b17">(Black et al., 2021)</ref> and <ref type="bibr">GPT-J (Wang &amp; Komatsuzaki, 2021)</ref>, which are trained on The Pile , a dataset containing text from a variety of sources as well as 8% GitHub code. The broader research community has found that these models outperform existing GPT systems in qualitative programming evaluations <ref type="bibr">(Woolf, 2021)</ref>.</p><p>We confirm these findings using the HumanEval dataset, showing that GPT-Neo achieves 6.4% pass@1 and 21.3% pass@100, while GPT models of comparable sizes achieve near 0% on both metrics. We see a remarkable progression in capabilities, with GPT-Neo-2.7B roughly equivalent to Codex-85M (30? fewer parameters). Similarly, GPT-J-6B achieves 11.6% pass@1 and 27.7% pass@100, which is roughly equivalent to Codex-300M (20? fewer parameters). Pass rates are obtained by taking the best result from eval- <ref type="figure">Figure 8</ref>. BLEU score probability densities for correct (blue) and wrong (green) solutions from Codex-12B for 4 random tasks from HumanEval. Note that the distributions are not cleanly separable, suggesting that optimizing for BLEU score is not equivalent to optimizing for functional correctness.</p><p>uating at temperatures 0.2, 0.4, and 0.8 for GPT-Neo, and from temperatures 0.2 and 0.8 for GPT-J. Detailed results across multiple model sizes can be found in <ref type="table" target="#tab_0">Table 1</ref>.</p><p>Finally, we benchmark Codex against the largest free model from Tabnine, a leading code autocomplete system, which achieves 2.6% pass@1 (at T = 0.4) and 7.6% pass@100 (at T = 0.8). This is roughly equivalent to Codex-12M, one of the smallest models in our suite.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.">Results on the APPS Dataset</head><p>Recently, <ref type="bibr" target="#b51">Hendrycks et al. (2021)</ref> introduced the APPS dataset to measure the coding challenge competence of language models. The APPS dataset consists of 5000 training and 5000 test examples of coding problems, each with a set of unit tests and, for the training data, a set of correct solutions. Most of the APPS tests problems are not formulated as single-function synthesis tasks, but rather as full-program synthesis, reading input from stdin and printing output to stdout, in contrast to the main Codex training data.</p><p>In the paper that introduces APPS, the authors benchmark a few language models and report two metrics: the percentage of problems where the model finds a correct solution (called the "strict accuracy") and the percentage of unit tests passed, even if the solution is incorrect. The latter measure is reported only so as to reduce variance of the measurements, because the results on the first metric were so low. We avoid this metric and only focus on "strict accuracy", and -as in the previous sections -we report pass@k numbers for various k ( <ref type="table" target="#tab_1">Table 2</ref>). There are 2 additional factors, well-known from coding competitions, that we take into account:</p><p>? In coding competitions and in the APPS datasets, tasks are provided with 3 input/output examples included in the task description. We utilize this by sampling 1000 solutions from the model and filtering out only those that pass these 3 unit tests (if such solutions exist). We then calculate pass rates in this filtered set, and call it filtered pass@k. Results without filtering are presented as raw pass@k.</p><p>? It is often the case both in coding competitions and in the results from Codex that a correct solution is found, but it is not algorithmically efficient enough to be considered passing. While this is not acceptable in the competitions, we also report the number of solutions that Codex produces that do not fail on any unit test, but that do time-out on some of them. We use a timeout of 3 seconds in our evaluation.</p><p>To compensate for the fact the Codex is not fine-tuned on APPS, we append a single input/output example from the task description to the docstring as a formatting hint. We denote this setting as "1-shot" in <ref type="table" target="#tab_1">Table 2</ref>, and find that Codex-12B evaluated 1-shot achieves comparable performance to a GPT-Neo model fine-tuned on APPS. Consistent with our earlier findings, there are large benefits from generating and evaluating as many as 1000 samples per task, though for more difficult problems, solutions are often not efficient enough to pass the time limits. Finally, evaluating the first sample which passes the 3 public unit tests for each problem yields higher performance than raw pass@100 samples.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Supervised Fine-Tuning</head><p>In addition to standalone functions, Python code found on GitHub contains class implementations, configuration files, scripts, and even files used to store data. This code is seemingly unrelated to synthesizing functions from docstrings, and we hypothesize that the distribution mismatch reduces HumanEval performance.</p><p>In order to adapt Codex to the distribution of the task of interest, we construct a set of training problems from correctly implemented standalone functions, and use them for additional supervised fine-tuning. We describe two approaches for collecting these examples: from competitive programming websites and from repositories with continuous integration. We call the supervised fine-tuned models Codex-S, and show that they produce consistent gains across model size.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Problems from Competitive Programming</head><p>Programming contest and interview preparation websites use hidden unit tests to automatically judge the functional correctness of submissions. These problems are selfcontained, come with well-written problem statements, and generally have excellent test coverage. Additionally, these problems test algorithmic reasoning over a broad range of core skills and difficulties.</p><p>We collected problem statements, function signatures, and solutions from several popular programming contest and interview preparation websites. We then assembled these into programming tasks similar to HumanEval, using the problem description as the docstring. Since complete test suites are often hidden, we created unit tests from examples found in the problem statements, or extracted additional test cases through submitting incorrect solutions. In total, we curated 10,000 problems in this way.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Problems from Continuous Integration</head><p>Next, we curated programming problems from open source projects. Taking advantage of sys.setprofile, we were able to trace and collect inputs and outputs for all functions called during integration tests. This data could then be used to create unit tests for the functions.</p><p>Projects that employ continuous integration (CI) are ideal candidates for tracing. We follow the commands in the CI configuration files, which contain build and test commands, to set up the virtual environments, install dependencies, and run integration tests.</p><p>We considered GitHub repos using travis and tox as their CI frameworks, as they are two of the most popular CI tools. We additionally used publicly available source code from pip packages found in the python package index (PyPI). Because these projects contained untrusted code, it was important to run integration tests in the sandboxed environment described above.</p><p>While there are millions of potential functions to curate problems from, we only collected about 40,000 because not all functions accept inputs and return outputs. Even when they do, most objects captured at runtime cannot be pickled and restored outside the sandbox unless the project was installed.</p><p>Since our tracing methodology produced inputs and outputs for all invoked functions, even builtin and library calls imported by the project were turned into problems. For this reason, functions from tracing tended to be the building blocks of command-line utilities. To excel at these tasks, the model does not need to know advanced algorithms and data structures. Rather, it needs to be able to follow instructions to implement the functionality specified in the docstring. Thus, tracing complements the puzzle nature of coding competition problems and broadens the distribution of tasks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">Filtering Problems</head><p>In the previous sections, we presented two methods we used to automatically create training problems. However, it is unclear how to control for quality. Some prompts underspecify the function that is implemented, in which case a perfectly valid solution may be wrongly penalized by the unit test. Some problems are stateful, and subsequent executions can result in different outcomes.</p><p>To address these issues, we use Codex-12B to generate 100 samples per curated problem. If no samples pass the unit tests, we consider the task to be either ambiguous or too difficult, and filter it out. We reran this verification several times to remove stateful or non-deterministic problems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.">Methods</head><p>We fine-tune Codex on these training problems to produce a set of "supervised fine-tuned" models, which we call Codex-S. To produce examples from training problems, we assemble the problems into the format shown in <ref type="figure">Figure 2</ref>. If there are prompts of varying length in a batch, we left-pad shorter prompts to the length of the longest prompt, so that the first tokens in the reference solutions line up in context.</p><p>We train to minimize negative log-likelihood of the reference solution, and mask out loss for any tokens in the prompt. We train using a learning rate 1/10 as large as used for fine-tuning Codex, but adhere to the same learning rate schedule, and train until validation loss plateaus (less than 10B tokens).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.">Results</head><p>As with Codex, we first compute the optimal temperature for evaluating pass@k for 1 ? k ? 100. We find that Codex-S prefers slightly higher temperatures for all k &gt; 1, which possibly reflects the fact that Codex-S captures a narrower distribution than Codex. We use T * = 0 for computing pass@1 and T * = 1 for computing pass@100.</p><p>Next, we compare Codex-S against Codex on pass@1 and pass@100. Codex-S outperforms the corresponding Codex by an average margin of 6.5 percentage points on pass@1 and by a larger average margin of 15.1 percentage points on pass@100 across model size.</p><p>We also plot the performance of different sample selection heuristics for Codex-S-12B against the same heuristics for Codex-12B. When ranking between 1 and 100 samples by mean log probability, the average benefit over random ranking is 11.6 percentage points, which is over 2 percentage points higher than the corresponding benefit for Codex. <ref type="figure">Figure 9</ref>. Optimal sampling temperatures as a function of the number of samples generated for both Codex and Codex-S. Codex-S generally requires a higher temperature for any particular value of k, possibly to compensate for the fact that it models a narrower distribution. <ref type="figure">Figure 10</ref>. Comparing Codex-S against Codex on the metrics proposed in Section 3. Codex-S is one or two orders of magnitude more parameter efficient on pass@1 and pass@100, and log-prob sample ranking with Codex-S yields similar benefits over random sampling that Codex does.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Docstring Generation</head><p>Generating code from docstrings is possible with Codex because code typically follows after a docstring, but it is not easy to induce Codex to generate docstrings from code. Nevertheless, we are motivated to produce a docstring writing model for safety reasons, as such a model can be used to describe the intent behind generated code. Using the training problems described in the previous section, we can easily create a training dataset for code-conditional docstring generation.</p><p>Specifically, for each training problem, we assemble a training example by concatenating the function signature, the reference solution, and then the docstring. Just as we train Codex-S by minimizing negative log-likelihood of the reference solution, we train the docstring generating models Codex-D by minimizing negative log-likelihood of the docstring.</p><p>When we benchmark our code generation models, we measure pass@k on the HumanEval dataset, where correctness is defined by passing a set of unit tests. However, there is no similar way to evaluate docstring samples automatically. Therefore, we grade sample docstrings by hand, considering a docstring correct if it uniquely and accurately specifies the code body. Due to the time consuming nature of this process, we only grade 10 samples per problem, for a total of 1640 problems, from Codex-D-12B at temperature 0.8.</p><p>Codex-D often generates incorrect unit tests along with a docstring, but we ignore these during grading. However, we do not consider the docstring correct when the model simply copies the code body into the docstring. The most common failure modes we observe are when the docstring model leaves out an important detail (such as "an answer must be to two decimal places") or when it over-conditions on the function name and invents a problem unrelated to the function body.</p><p>As shown in <ref type="table">Table 3</ref>, pass rates for Codex-D are lower but comparable to the corresponding pass rates for Codex-S at the same temperature. We do not have a strong hypothesis for which direction should yield higher pass rates. While generating docstrings may be more forgiving because natural language syntax is less strict than code syntax, docstrings in our dataset may be lower quality because developers tend to devote less time to writing docstrings. Indeed, our model produces docstrings like "I just found this function online" and "This test is not correctly written and it's not my solution."</p><p>Finally, with a docstring model, we have yet another way to choose a single sample from a set of k samples. Instead of picking the sample with the best mean log probability as investigated in the previous two sections, we can choose the sample that maximizes the back-translation ob- <ref type="table">Table 3</ref>. Pass rates for our docstring generating model Codex-D, which is evaluated by hand-grading 10 samples per task due to the lack of a ground-truth automatic evaluation. We find similar but lower pass-rates compared to Codex-S.</p><formula xml:id="formula_0">MODEL PASS@1 PASS@10 CODEX-S-12B 32.2% 59.5% CODEX-D-12B</formula><p>20.3% 46.5% jective P (ground truth docstring|generated sample) where P is evaluated using Codex-D. Unfortunately, in <ref type="figure">Figure 7</ref>, we show that ranking samples via back-translation underperforms mean log-probability ranking, though it outperforms random ranking. This heuristic also appears to overfit quickly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Limitations</head><p>While Codex is able to sample correct solutions for the majority of HumanEval problems, we find that it has a number of limitations.</p><p>First, Codex is not sample efficient to train. Our training dataset comprises a significant fraction of publicly available Python code on GitHub, totaling hundreds of millions of lines of code. Even seasoned developers do not encounter anywhere near this amount of code over their careers. Indeed, a strong student who completes an introductory computer science course is expected to be able to solve a larger fraction of problems than Codex-12B.</p><p>Next, we explore prompts on which Codex is likely to fail or display counter-intuitive behavior. While evaluating code generation is well-studied <ref type="bibr">(Xu et al., 2021;</ref><ref type="bibr" target="#b50">Helmuth &amp; Spector, 2015;</ref><ref type="bibr">Pantridge et al., 2017)</ref>, many existing metrics measure performance in tightly specified, constrained problem instances (e.g., string manipulation in FlashFill (Gulwani, 2011)). Therefore, we developed a set of qualitative metrics for measuring the capabilities of code generating models while controlling for the complexity and abstraction level of the specifications (Appendix D). Applying this framework, we find that Codex can recommend syntactically incorrect or undefined code, and can invoke functions, variables, and attributes that are undefined or outside the scope of the codebase. Moreover, Codex struggles to parse through increasingly long and higher-level or system-level specifications.</p><p>To concretely illustrate model performance degradation as docstring length increases, we create a dataset of synthetic problems assembled from 13 basic building blocks, each of which modifies an input string in a deterministic way. Example building blocks are "convert the string to lowercase" or "remove every third character from the string" (the full list is described in Appendix C). We find that as the number of chained building blocks in the docstring increases, model performance decreases exponentially. This behavior is uncharacteristic of a human programmer, who should be able to correctly implement a program for a chain of arbitrary length if they can do so for a chain of length two. <ref type="figure">Figure 11</ref>. Pass rates of Codex-12B samples against the number of chained components in the synthetically generated docstring. With each additional component, pass rate drops by roughly a factor of 2-3.</p><p>Further, just as text-conditional generative models in other modalities  have difficulty with binding attributes to objects, Codex can make mistakes binding operations to variables, especially when the number of operations and variables in the docstring is large. For instance, in the following prompt, Codex-12B does not decrement the variable w and also fails to return the product of all numbers.</p><p>def do_work(x, y, z, w): """ Add 3 to y, then subtract 4 from both x and w. Return the product of the four numbers. """</p><formula xml:id="formula_1">t = y + 3 u = x -4 v = z * w return v</formula><p>This understanding of Codex's limited system-level synthesis capabilities helps inform our assessment of the potential hazards of using it in a generative capacity, as well as the broader societal impacts that such systems could have.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Broader Impacts and Hazard Analysis</head><p>Codex has the potential to be useful in a range of ways. For example, it could help onboard users to new codebases, reduce context switching for experienced coders, enable non-programmers to write specifications and have Codex draft implementations, and aid in education and exploration. However, Codex also raises significant safety challenges, does not always produce code that is aligned with user intent, and has the potential to be misused.</p><p>To better understand some of the hazards of using Codex in a generative capacity, we conducted a hazard analysis focused on identifying risk factors <ref type="bibr" target="#b67">(Leveson, 2019)</ref> with the potential to cause harm. <ref type="bibr">1</ref> We outline some of our key findings across several risk areas below.</p><p>While some of our findings about the potential societal impacts of code generation systems were informed by work towards responsible deployment of the production-oriented Codex models (which descended from the research-oriented Codex models described in this paper), this section is not intended to provide a full account of any particular product's safety features. Unless otherwise specified, we anchor our analysis in the specific properties of the models described in this paper. We share this analysis in the belief that some of it generalizes to the broader class of code generation systems, and to encourage a norm of performing detailed impact analysis as part of major machine learning research projects.</p><p>Note that by focusing largely on risks in this section, we do not mean to imply that we expect the impact of this class of technologies to be net-negative; rather, risks merit particular attention here because they may be subtle or require deliberate effort to address, whereas we expect the benefits to be more obvious and "automatic" from the perspective of most users and affected stakeholders.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1.">Over-reliance</head><p>One of the key risks associated with using code generation models in practice is over-reliance on generated outputs. Due to the limitations described above as well as alignment issues described below, Codex may suggest solutions that superficially appear correct but do not actually perform the task the user intended. This could particularly affect novice programmers, and could have significant safety implications depending on the context. We discuss a related issue in Appendix G, namely that code generation models can suggest insecure code. For these reasons, human oversight and vigilance is required for safe use of code generation systems like Codex.</p><p>We note several immediate ways to improve safety in the subsection on risk mitigation below, though over-reliance in particular is one that we believe merits further inquiry in industry and academia. While it is conceptually straight- <ref type="figure">Figure 12</ref>. When the prompt includes subtle bugs, Codex tends to produce worse code than it is capable of. This persists when the prompt also includes instructions to write correct code. This gap increases with model size.</p><p>forward to provide documentation to users reminding them about model limitations, empirical investigation is necessary in order to identify how to reliably ensure vigilance in practice across a range of user experience levels, UI designs, and tasks. One challenge researchers should consider is that as capabilities improve, it may become increasingly difficult to guard against "automation bias."</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2.">Misalignment</head><p>As with other large language models trained on a next-token prediction objective, Codex will generate code that is as similar as possible to its training distribution. One consequence of this is that such models may do things that are unhelpful for the user, despite having the capability to be more helpful (see <ref type="figure">Figure 12</ref>). For example, if the user has some subtle mistakes in their code, Codex may "deliberately" suggest code that superficially appears good but is incorrect. This is an alignment failure -the model is not aligned with the user's intentions. Informally, a system is misaligned if there's some task X that we want it to do, and it is "capable" of doing X but "chooses" not to. In contrast, if a system fails to do X because it does not have the ability to do so, then this system is not misaligned; it is just incompetent. See Appendix E for more detail, including a more precise definition of alignment.</p><p>It is important to study misalignment because it is a problem that is likely to become worse, not better, as the capabilities of our systems increase. For example, the model size scaling trend for the example in <ref type="figure">Figure 12</ref> indicates that misalignment would likely persist and even get worse if data, parameters, and training time were scaled up.</p><p>While we expect that misaligned behaviour like this is unlikely to cause significant harm in current models, it is likely to become more dangerous and harder to eliminate as model capabilities increase. A highly capable but sufficiently misaligned model trained on user approval might produce obfuscated code that looks good to the user even on careful inspection, but in fact does something undesirable or even harmful.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3.">Bias and representation</head><p>Mirroring what has been found in the case of other language models trained on Internet data <ref type="bibr" target="#b16">(Bender et al., 2021;</ref><ref type="bibr" target="#b18">Blodgett et al., 2020;</ref><ref type="bibr" target="#b3">Abid et al., 2021;</ref><ref type="bibr" target="#b59">Brown et al., 2020)</ref>, we found that Codex can be prompted in ways that generate racist, denigratory, and otherwise harmful outputs as code comments, meriting interventions such as those discussed in the subsection on risk mitigation below. We also found that code generation models raise further bias and representation issues beyond problematic natural language: Codex can generate code with structure that reflects stereotypes about gender, race, emotion, class, the structure of names, and other characteristics. Particularly in the context of users who might over-rely on Codex or use it without first thinking through project design, this issue could have significant safety implications, giving further motivation to discourage over-reliance. We discuss bias and representation issues further in Appendix F. Filtration or modulation of generated outputs, documentation, and other interventions may help to mitigate these risks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.4.">Economic and labor market impacts</head><p>Code generation and associated capabilities have several possible economic and labor market impacts. While Codex at its current capability level may somewhat reduce the cost of producing software by increasing programmer productivity, the size of this effect may be limited by the fact that engineers don't spend their full day writing code (O*NET, 2021). Other important tasks include conferring with colleagues, writing design specifications, and upgrading existing software stacks. <ref type="bibr">2</ref> We also found that Codex imports packages at different rates, which could advantage some package authors over others, particularly if programmers and engineers come to rely on Codex's suggestions. Over a longer time horizon, the effects of this class of technologies on software-related labor markets and on the economy more generally could be more substantial as capabilities improve.</p><p>More study is needed both on the effects of code generation capabilities and on appropriate responses. We discuss economic and labor market implications in more detail in Appendix H.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.5.">Security implications</head><p>Codex could have various effects on the security landscape. Because Codex can produce vulnerable or misaligned code, 3 qualified operators should review its generations before executing or trusting them, absent appropriate precautions. Future code generation models may be able to be trained to produce more secure code than the average developer, though that is far from certain.</p><p>Codex could also be misused to aid cybercrime. Although this is worthy of concern, based on our testing, we believe that at their current level of capability, Codex models do not materially lower the barrier to entry for malware development. <ref type="bibr">4</ref> We expect that more powerful code generation models will lead to future advancements, and therefore further research into mitigations and continued study of model capabilities are necessary.</p><p>The non-deterministic nature of systems like Codex could enable more advanced malware. This non-determinism makes it easier to create diverse software that accomplish the same tasks. While software diversity can sometimes aid defenders, 5 it presents unique challenges for traditional malware detection and antivirus systems that rely on fingerprinting and signature-matching against previously sampled binaries. For example, a more capable code generation model could conceivably advance techniques for generating polymorphic malware. <ref type="bibr">6</ref> We believe that application security and model deployment strategies including rate-limiting access and abuse monitoring can manage this threat in the near term; however, the efficacy of these mitigations may scale sublinearly as more capable models are developed.</p><p>Similar to large language models, Codex models can learn patterns present in their training data <ref type="bibr" target="#b22">(Carlini et al., 2021)</ref>. Sensitive data present in source code are liable to be predicted by the model. Because Codex is trained on public repositories, we consider any sensitive data present in the training data to have already been compromised. Similarly, the public data should generally be treated as untrusted, as previous work <ref type="bibr" target="#b42">(Goldblum et al., 2021;</ref><ref type="bibr" target="#b101">Schuster et al., 2020)</ref> has found that attackers may be able to corrupt training data to trigger specific model behaviors at runtime. We further discuss security implications in Appendix G.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.6.">Environmental impacts</head><p>Codex, like other large generative models, has an energy footprint from both training and inference <ref type="bibr" target="#b102">(Schwartz et al., 2019;</ref><ref type="bibr" target="#b16">Bender et al., 2021;</ref><ref type="bibr" target="#b86">Patterson et al., 2021)</ref>. The original training of GPT-3-12B consumed hundreds of petaflop/sdays of compute, while fine-tuning it to create Codex-12B consumed a similar amount of compute. This training was performed on a platform (Azure) that purchases carbon credits and sources significant amounts of renewable energy, reducing its carbon footprint. 7 Compute consumption also has costs in the wider supply chain that can be quite concentrated on certain regions. 8 Looking more globally and long-term, the compute demands of code generation could grow to be much larger than Codex's training if significant inference is used to tackle challenging problems. 9</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.7.">Legal implications</head><p>There are several legal considerations related to generated code. To begin with, the training of AI systems on Internet data, such as public GitHub repositories, has previously been identified as an instance of "fair use" <ref type="bibr" target="#b80">(O'Keefe et al., 2019)</ref>.</p><p>Our preliminary research also finds that Codex models rarely generate code that is identical to the contents of training data. Such occurrences were &lt; 0.1% in a study examining the frequency of code generations that appear to match code snippets in the training data <ref type="bibr">(Ziegler, 2021)</ref>. In these rare instances, the generated code consisted of common expressions or conventions within the programming language that appeared over and over again in the training data. We find that, to the extent the generated code appears identical to the training data, it is due to the predictive weightings in the model rather than retention and copying of specific code.</p><p>Generated code is also responsive and customized to the user's input, and the user retains complete control over editing and acceptance of the generated code. This can make code generation similar to auto-suggest or auto-completion 7 Microsoft made a commitment in 2020 to shift to 100 percent renewable energy supply in its buildings and data centers by 2025. https://blogs.microsoft.com/blog/2020/01/16/microsoftwill-be-carbon-negative-by-2030/ A full assessment of the environmental impact of compute use is impossible to conduct without grounding in context and making comparison to the counterfactual impacts of competing products or services. Such analysis is out of scope for this paper. <ref type="bibr">8</ref> While data center energy usage has become much more efficient in recent years <ref type="bibr" target="#b75">(Masanet et al., 2020)</ref>, the production, use, and disposal of semiconductors still imposes environmental and human costs. See, e.g., <ref type="bibr" target="#b29">(Crawford, 2021)</ref> 9 Given that code generation (and other forms of AI) might be deployed widely throughout the economy as discussed above, these considerations suggest additional urgency in adopting renewable energy.</p><p>features that exist as features of other tools of authorship (e.g., document editors), in the sense that the finished work is still seen as the author's.</p><p>Our commitment to responsible and safe AI includes continued attention to the broader intellectual property implications of code generation systems. We intend to remain engaged with policymakers and experts on these issues so that the users of such systems can ultimately deploy them with confidence.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.8.">Risk mitigation</head><p>In closing, given the above, models like Codex should be developed, used, and their capabilities explored carefully with an eye towards maximizing their positive social impacts and minimizing intentional or unintentional harms that their use might cause. A contextual approach is critical to effective hazard analysis and mitigation, though a few broad categories of mitigations are important to consider in any deployment of code generation models.</p><p>Careful documentation and user interface design, code review requirements, and/or content controls (e.g., filtering of outputs) may help to reduce harms associated with overreliance as well as offensive content or insecure code generation. In the context of a model made available as a service (e.g., via an API), policies such as user review, use case restrictions, monitoring, and/or rate limiting may also help to reduce harms associated with malicious use or prevent its use in high-stakes domains for which the models are not well suited.</p><p>Appendices E, F, G, and H provide further detail on the risks described in this section and outline additional mitigation and research opportunities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">Related Work</head><p>The deep learning resurgence has led to strong advances in the field of program learning. Two popular approaches to neural program learning are program induction and program synthesis.</p><p>In program induction, a model generates program outputs directly from a latent program representation. Learning to Execute (Zaremba &amp; Sutskever, 2014) demonstrated that models could execute simple tasks like addition and memorization. Later attempts at program induction incorporated inductive biases based on modern computing devices, such as the Neural Turing Machine , memory networks <ref type="bibr">(Weston et al., 2015;</ref><ref type="bibr">Sukhbaatar et al., 2015)</ref>, the Neural GPU <ref type="bibr" target="#b58">(Kaiser &amp; Sutskever, 2015)</ref>, and the differentiable neural computer . More recent approaches like the Neural Program Interpreter <ref type="bibr" target="#b97">(Reed &amp; de Freitas, 2016;</ref><ref type="bibr" target="#b103">Shin et al., 2018;</ref><ref type="bibr" target="#b88">Pierrot et al., 2021)</ref> and</p><p>Universal Transformer <ref type="bibr" target="#b33">(Dehghani et al., 2019)</ref> found recurrence to be a useful component in program induction.</p><p>In program synthesis, a model explicitly generates a program, usually from a natural language specification. One of the most popular classical approaches used a probabilistic context free grammar (PCFG) to generate a program's abstract syntax tree (AST). <ref type="bibr" target="#b73">Maddison &amp; Tarlow (2014)</ref> improved on this setup by learning a state vector used to condition child node expansion. Later, <ref type="bibr" target="#b7">Allamanis et al. (2015)</ref> applied this idea in text-to-code retrieval and Yin &amp; Neubig (2017) utilized it in text-conditional code generation. Code2seq <ref type="bibr" target="#b9">(Alon et al., 2018)</ref> found that ASTs could also be leveraged for code-to-text generation.</p><p>Programs can also be synthesized without passing through an AST representation. <ref type="bibr" target="#b52">Hindle et al. (2012)</ref> investigated n-gram language models of code, finding code to be more predictable than natural language. Latent Predictor Networks <ref type="bibr" target="#b69">(Ling et al., 2016)</ref> showed that character-level language models could generate working code for implementing Magic the Gathering cards in an online arena, when aided with a latent mode that allows card attributes to be copied into code. DeepCoder <ref type="bibr" target="#b12">(Balog et al., 2017)</ref> trained a model to predict the functions appearing in source code, which could be used to guide program search.</p><p>Following the success of large natural language models <ref type="bibr" target="#b35">(Devlin et al., 2018;</ref><ref type="bibr" target="#b93">Radford et al., 2019;</ref><ref type="bibr" target="#b70">Liu et al., 2019;</ref><ref type="bibr" target="#b95">Raffel et al., 2020;</ref><ref type="bibr" target="#b59">Brown et al., 2020)</ref> large scale Transformers have also been applied towards program synthesis. Code-BERT <ref type="bibr" target="#b39">(Feng et al., 2020)</ref> trained the BERT objective on docstrings paired with functions, and obtained strong results on code search. PyMT5 <ref type="bibr" target="#b27">(Clement et al., 2020)</ref> is similar in spirit to our work, and used the T5 objective to train a system which can translate between non-overlapping subsets of {signature, docstring, body}.</p><p>We used functional correctness to benchmark our models, and observed improvements on this metric with more sampling. SPoC <ref type="bibr" target="#b64">(Kulal et al., 2019)</ref> considered the problem of producing functionally correct code from pseudocode with a fixed budget of compilations, which is similar to our pass@k metric. TransCoder <ref type="bibr" target="#b66">(Lachaux et al., 2020)</ref> trained a system to translate between programming languages in an unsupervised manner, and also observed that functional correctness better captured the capabilities of their model than BLEU score. In fact, ContraCode <ref type="bibr" target="#b55">(Jain et al., 2020)</ref> leveraged the large space of functionally correct programs to train a contrastive code model, which improved model performance on tasks like type inference. Finally, Robust-Fill <ref type="bibr" target="#b34">(Devlin et al., 2017)</ref> observed that the best way to find a program consistent with input examples was to synthesize multiple samples through beam search.</p><p>Two early domain-specific datasets used to benchmark neu-ral programming systems were FlashFill <ref type="bibr" target="#b47">(Gulwani, 2011;</ref><ref type="bibr" target="#b48">Gulwani et al., 2012)</ref> and Hearthstone <ref type="bibr" target="#b69">(Ling et al., 2016)</ref>, though the community has trended towards broader and more difficult datasets. <ref type="bibr" target="#b14">Barone &amp; Sennrich (2017)</ref> proposed a large training and evaluation dataset consisting of Python declarations, docstrings, and bodies scraped from GitHub. The CodeSearchNet challenge <ref type="bibr" target="#b54">(Husain et al., 2019)</ref> built an even larger corpus from GitHub with data from multiple popular programming languages. Recently, CodeXGLUE <ref type="bibr" target="#b72">(Lu et al., 2021)</ref> aggregated several programming benchmarks, making use of the recently proposed CodeBLEU metric <ref type="bibr" target="#b98">(Ren et al., 2020)</ref>. Most relevant to our evaluation work is the APPS <ref type="bibr" target="#b51">(Hendrycks et al., 2021)</ref> benchmark for measuring functional correctness based on problems from the competitive programming website Codeforces.</p><p>Finally, we note that coding is a broad activity which involves much more than synthesizing code from docstrings. <ref type="bibr">Tufano et al. (2020)</ref> use Transformers to generate unit tests for code which outperformed commercial offerings. <ref type="bibr" target="#b10">Aye et al. (2021)</ref> built an internal auto-complete tool for Facebook, and found that training on accepted user completions boosted system performance. Development also entails locating and fixing bugs. Early works used static or dynamic code analysis <ref type="bibr" target="#b6">(Agrawal et al., 1995;</ref><ref type="bibr" target="#b62">Korel &amp; Rilling, 1997)</ref>, learned association rules <ref type="bibr" target="#b56">(Jeffrey et al., 2009)</ref>, and genetic programming <ref type="bibr" target="#b43">(Goues et al., 2012)</ref> to debug faulty code. These approaches relied on running against a test suite to not only evaluate the correctness of suggestions but also expose problems in execution trace or search for a solution. More recent works <ref type="bibr">(Tufano et al., 2019;</ref><ref type="bibr" target="#b37">Drain et al., 2021)</ref> considered bug-fixing as neural machine translation from buggy to correct programs. However, these works used an exact match against a reference instead of functional correctness, citing <ref type="bibr" target="#b91">Qi et al. (2015)</ref>'s finding that most of the proposed solutions by genetic search in <ref type="bibr" target="#b43">(Goues et al., 2012)</ref> passed through weak test suites by deleting functionality that failed. Human developers often write test suites with limited but targeted coverage, but this does not always work well against an algorithm, highlighting the challenges of evaluating correctness of programs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">Conclusion</head><p>We investigated whether it was possible to train large language models to produce functionally correct code bodies from natural language docstrings. By fine-tuning GPT on code from GitHub, we found that our models displayed strong performance on a dataset of human-written problems with difficulty level comparable to easy interview problems. Model performance could be improved by training on a distribution more similar to the evaluation set, and also by producing multiple samples from a model. We also found that it was simple to train a model to complete the reverse task of producing docstrings from code bodies, and that the performance profiles of these models were similar. Finally, we expanded on the broader impacts of code generating models, and discussed model limitations, finding significant room for improvement. Stiennon, N., Ouyang, L., Wu, J., Ziegler, D. M., Lowe, R., Voss, C., Radford, A., Amodei, D., and Christiano, P. Learning to summarize from human feedback, 2020. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Estimating pass@k</head><p>While all estimators mentioned previously are consistent, only the empirical estimate used by <ref type="bibr" target="#b64">Kulal et al. (2019)</ref>, and (1) are unbiased. Evaluating pass@k in an unbiased way with any number of samples n is important for fair comparison. For example, estimating pass@k = 1 ? (1 ? pass@1) k with 1 ? (1 ?p) k using the empirical pass@1, results in a consistent underestimate as shown in <ref type="figure">Figure 13</ref>. The gap doesn't fully close even when n &gt; 5k, and results can seem better with more samples. The interpretation of this estimator is that we draw k samples with replacement from a pool of n candidates, but the k samples are not independent.</p><p>(1) is unbiased, because it estimates the fail probability (1?pass@1) k as the probability of drawing k failed samples without replacement. To show this, note that c, the number of correct samples that pass the unit tests, is distributed Binom(n, p), where p is pass@1, and that (1) evaluates to 1 when n ? c &lt; k. Then, <ref type="figure">Figure 13</ref>. Comparing the amount of bias and variance of two estimators of pass@k. While the top expression may look correct, it underestimates the true value by a considerable margin. The unbiased estimator may have a slightly higher variance initially but allows for a fair comparison across different numbers of samples.</p><formula xml:id="formula_2">Ec 1 ? n?c k n k = 1 ? Ec n?c k n k = 1 ? n?k i=0 n?i k n k n i p i (1 ? p) n?i = 1 ? n?k i=0 n ? k i p i (1 ? p) n?i = 1 ? (1 ? p) k n?k i=0 n ? k i p i (1 ? p) n?k?i = 1 ? (1 ? p) k .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Random Problems and Solutions from Codex-12B</head><p>We show 8 random problems from HumanEval along with 8 random samples per problem generated from Codex-12B at temperature 0.8.</p><p>def words_string(s): """ You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return an array of the words.</p><p>For example: words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"] words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"] """ return True if n &lt; 2 or n % 2 == 0:</p><p>return False if n &lt; 9:</p><p>return True if n % 3 == 0:</p><p>return False r = int(n ** 0.5) f = 5 while f &lt;= r:</p><p>if n % f == 0: return False if n % (f+2) == 0:</p><p>return False f += 6 return True def add_elements(arr, k):</p><p>""" Given a non-empty array of integers arr and an integer k, return the sum of the first k element that has at most two digits.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example:</head><p>Input: arr = <ref type="bibr">[111,</ref><ref type="bibr">21,</ref><ref type="bibr">3,</ref><ref type="bibr">4000,</ref><ref type="bibr">5,</ref><ref type="bibr">6,</ref><ref type="bibr">7,</ref><ref type="bibr">8,</ref><ref type="bibr">9]</ref>, k = 4 Output: 24 # sum of 21 + 3 """Write a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Constraints</head><p>Here, 'y' is also a vowel, but only when it is at the end of the given word. total += int(i) return total def even_odd_palindrome(n):</p><p>""" Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n ), inclusive.</p><p>Example 1:</p><p>Input: 3 Output: (1, 2) Explanation: Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example 2:</head><p>Input: 12 Output: (4, 6) Explanation: Integer palindrome are <ref type="bibr">1,</ref><ref type="bibr">2,</ref><ref type="bibr">3,</ref><ref type="bibr">4,</ref><ref type="bibr">5,</ref><ref type="bibr">6,</ref><ref type="bibr">7,</ref><ref type="bibr">8,</ref><ref type="bibr">9,</ref><ref type="bibr">11</ref>. four of them are even, and 6 of them are odd.</p><p>Note: 1. 1 &lt;= n &lt;= 10?3 2. returned tuple has the number of even and odd integer palindromes respectively. """ 11. "add the word apples after every word in the string" s = " ".join(word + " apples" for word in s.split())</p><p>12. "make every other character in the string uppercase" These building blocks can be easily composed by concatenating their one-line descriptions into a docstring and by concatenating their one-line implementations into a code body. An example is shown below:</p><p>def string_manipulation(s: str):</p><p>""" This function takes a string as input, then returns the result of performing the following sequence of manipulations on that string: -make every other character in the string uppercase -replace spaces with triple spaces """ s = "".join(char.upper() if i % 2 == 0 else char for i, char in enumerate(s)) s = s.replace(" ", " ") return s</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Details of Specification-based Evaluation Framework</head><p>Evaluating the capabilities of code synthesis and generation is not a novel problem and has been explored in both the ML (Xu et al., 2021) and synthesis <ref type="bibr" target="#b50">(Helmuth &amp; Spector, 2015;</ref><ref type="bibr">Pantridge et al., 2017)</ref> communities. Previously, researchers have recommended the use of existing metrics such as McCabe Cyclomatic Complexity (CC). That is, synthesis and generation metrics have largely concentrated on analyzing the correctness and complexity of the code output rather than the expressivity and complexity of the specification itself. Yet, evaluating the output of synthesized code is moot if there is no specification that it can be measured against. Indeed, the synthesis and automatic programming community <ref type="bibr" target="#b84">(O'Neill &amp; Spector, 2019)</ref> have recently called for principled benchmarks and grand challenge problems to be made in order to adopt a scientifically rigorous approach to compare synthesis methodologies against.</p><p>If we wish to understand the performance of generation and synthesis models relative to human ability, we should evaluate them against the complexity and expressivity of specification prompts, and assess their capability to understand and execute them. Given the ambiguity of natural language specifications, the challenge arises in how to define an appropriate set of benchmarks with increasingly complex and higher-level specifications to measure the capabilities of advancing code synthesis and generation methodologies (without the use of formal specifications themselves).</p><p>We thus propose adapting attributes used to measure the expressivity and complexity of formal specifications to natural language prompts. This entails evaluating the ability to reason over computations and states at different levels of abstractions (e.g., high-level requirements versus designlevel requirements) as a base metric for complexity and expressivity (e.g., variable dependencies, inter-procedural reasoning, computational interleavings, etc.). Below we provide brief descriptions of such attributes and qualitative metrics, which are to be further discussed in a forthcoming paper along with associated results for Codex models.</p><p>With regard to specification abstractions, higher-level requirements or specifications are often distinct from lowerlevel specifications through the allocation of further structure and behavior within a defined boundary to satisfy one or more higher-level requirements. That is, the lower-level the specification, the more well-defined the architectural and programming constructs become. Indeed, there would be more ambiguity and difficulty in defining higher-level specifications for code synthesis, as the algorithm would need to implicitly derive an internal set of "lower-level" specifications before synthesizing the corresponding code solution. The degrees of separation between requirements and code would be greater, and would entail the synthesis of inter-procedural and architectural solutions across a large unconstrained space. However, if a lower-level specification is provided with well-defined constraints, this not only restricts the possible solutions, but also reduces the degrees of separation between the specification and the code required to be produced (e.g., to one function).</p><p>The current capabilities of synthesis methodologies are only able to tackle tightly specified, constrained problem instances or narrow tasks. However, Codex has demonstrated preliminary capabilities to consistently solve for high-level specifications.</p><p>Beyond the specification abstraction level, languageindependent properties should be considered that would be practiced by developers at various degrees of expertise and thus would implicitly be expressed in natural language prompts and specifications. These include:</p><p>? -Strong Fairness: every process that is infinitely often enabled should be executed infinitely often in a state where it is enabled -Weak Fairness: every process that is almost always enabled should be executed infinitely often -Mutual exclusion, atomicity, and synchronization -Freedom from race conditions and data races ? Hyperproperties <ref type="bibr" target="#b26">(Clarkson et al., 2014)</ref>: Informationflow policies and cryptographic algorithms requiring observational determinism which requires programs to behave as (deterministic) functions from low-security inputs to low-security outputs such as:</p><p>-Noninterference: when the outputs observed by low-security users are the same as they would be in the absence of inputs submitted by highsecurity users.</p><p>? Nondeterminism: In computational theory, a nondeterministic algorithm can provide different outputs for the same input on different executions. Unlike a deterministic algorithm which produces only a single output for the same input even on different runs, a non-deterministic algorithm travels in various routes to arrive at the different outcomes. A very simple and common example of this is a random number generator 10 . A more advanced and extreme example is ML algorithms themselves.</p><p>Additionally, we note to the reader that there are a number of specification-independent coding practices that must be exhibited to achieve the aforementioned computational and state reasoning attributes. Such attributes have long been discussed by the genetic programming community <ref type="bibr" target="#b63">(Koza et al., 1999)</ref>, and we note the relevant properties to modern day synthesis techniques below:</p><p>? Code and parameterized reuse ? Automatic determination of program architecture ? Wide range of programming constructs</p><p>? Well-defined ? Wide applicability 10 A randomized algorithm is actually probabilistic Turing Machine, but for practical intents and purpose it can be approximately considered non-deterministic given the determinism of real-world systems (see <ref type="bibr" target="#b15">(Barrington &amp; Maciel, 2000))</ref> Note that many of the attributes and metrics defined regard implementation level design. Increasingly higher level specifications should not need to specify which programming constructs are required by implementation, and a code generation algorithm should be able to infer this instead. Indeed, such constructs are required by developers when solving for increasingly complex and higher-level specifications. Without them, it is unlikely that a code generation technique can tackle increasingly complex specifications describing and requiring the computational and state reasoning attributes noted.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Analysis of Alignment Problems</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E.1. Why evaluate alignment?</head><p>We were interested in detecting problems with the Codex models that will not improve, or may even get more severe, as model capability improves. These are the problems that are likely to become most serious in the long term even if they currently do not cause significant harm. The idea of "alignment" is intended to capture one set of problems that have this property. In the literature, a model is defined informally as "intent aligned" with a user if (and only if) the model intends to do what the user wants (Christiano, 2018; <ref type="bibr" target="#b60">Kenton et al., 2021)</ref>.</p><p>It is ambiguous how to apply this definition to Transformer models, since it is unclear to what extent they can be described as having "intent", or what that intent would be. However, there is an intuitive notion that, given its training objective, Codex is better described as "trying" to continue the prompt by either matching or generalizing the training distribution, than as "trying" to be helpful to the user. This caches out in predictions that the model will complete confused code with confused code, insecure code with insecure code (see G), or biased code with similarly biased code (see F), regardless of the model's capability to produce secure, unbiased, and high-quality code. In fact, we would expect that the model may "intentionally" introduce each of these types of flaws at some rate even when prompted with fairly good inputs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E.2. How can alignment be defined and evaluated in models like Codex?</head><p>Defining alignment is complex, and there is not yet a satisfactory formalization. Without intending this to be the last word on defining alignment, we attempt to capture the intuitive idea described above in a way that can be measured experimentally. We operationalize sufficient conditions for intent misalignment for a generative model as follows:</p><p>1. We consider a model capable of some task X if it has <ref type="figure" target="#fig_0">Figure 14</ref>. When the prompt includes subtle bugs, Codex tends to produce worse code than it is capable of producing. This gap increases with model size. Including an instruction to write correct code helps a little but does not fix the problem. Even with no examples in the context, Codex produces significantly worse code than it is capable of.</p><p>the (possibly latent) capacity to perform task X. Some sufficient conditions for the model being capable of X would be:</p><p>? It can be made to perform task X by prompt engineering, by fine-tuning on a much smaller quantity of data than used in pre-training, by model surgery, or some other technique which harnesses capabilities latent in the model rather than adding new capabilities; or ? We can construct some other task Y, for which we know the model needs to do X in order to solve Y, and we observe that the model is capable of Y 2. We say a model is intent misaligned if it outputs B, in some case where the user would prefer it outputs A, and where the model is both:</p><p>(a) capable of outputting A instead, and (b) capable of distinguishing between situations where the user wants it to do A and situations where the user wants it to do B 11</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E.3. Results of alignment evaluations</head><p>We conducted several alignment evaluations. In the example evaluation shown in <ref type="figure" target="#fig_0">Figure 14</ref>, we deduce that the model is capable of outputting code with a lower frequency of bugs, based on the rate of bugs when prompted with high-quality code. We instruct the model to write correct code, and we assume the model could easily be fine-tuned to detect such an instruction. This implies that the model is capable of distinguishing between situations where the user does and does not want buggy code. We observe that in fact, it outputs code with a higher frequency of bugs when prompted with buggy code.</p><p>Based on this we conclude that we have identified misalignment in Codex models.</p><p>There are several subtleties here; probably the most important one is distinguishing our observations from a robustness failure. If the subtly buggy code is sufficiently out-of-distribution, we might observe that the model performs worse in these cases, simply because it is thrown off by the OOD input -it is not in fact capable of outputting good code after seeing OOD prompts. We believe this is unlikely to be a large factor here, as the GitHub dataset contains plenty of poor-quality code. The bugs are designed to be of the sort we'd expect to appear commonly in the dataset; code that compiles and often runs without errors but gives an incorrect answer. Examples include off-by-one errors or single-character typographic errors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E.4. Areas for Further Work</head><p>We hope that measuring (and improving) alignment will become standard practice for research on powerful ML models. The datasets used for these evaluations are available at https://github.com/openai/code-align-evals-data.</p><p>There are many promising directions for improving alignment of current code-generation models, which also have the potential to substantially boost models' usefulness <ref type="bibr" target="#b60">(Kenton et al., 2021)</ref>.</p><p>One starting point is to more carefully curate the pre-training dataset to remove buggy or insecure code. Another possibility is to label the pre-training data based on code quality, then condition the model on the 'high quality' label at deployment time <ref type="bibr" target="#b61">(Keskar et al., 2019)</ref>.</p><p>A common approach to adjusting the behavior of Transformers is to fine-tune large pre-trained models with curated or human-generated datasets of the desired behavior (e.g., <ref type="bibr" target="#b95">Raffel et al. (2020)</ref>; <ref type="bibr" target="#b49">He et al. (2020)</ref>). In this case we might want to fine-tune on a dataset of high-quality, bug-free code. However, it is notoriously difficult for most humans to write bug-free code, so rather than acquiring this dataset through labeling it might need to be obtained by filtering input datasets using formal analysis or other metrics of code quality.</p><p>A further possibility is RL from Human Feedback (RLHF), which has been successfully applied to language models to improve alignment and consequently improve performance on downstream tasks <ref type="bibr">(Stiennon et al., 2020)</ref>.</p><p>In the context of code models, this would involve collecting data from human labelers on whether generations were correct and helpful. Assisting human labelers with existing automated testing and formal verification tools, or even tools built with the code-generating models themselves, may be useful for providing a correct reward signal for RL or expert iteration.</p><p>Fully aligning models on tasks that are hard for human labelers, especially if the models are more knowledgeable or capable in some regards than their supervisors, is a challenging open research problem. Determining whether a model is fully aligned is also difficult, and more work is needed on metrics for alignment. Transparency tools that let us understand the model well enough to determine whether it is aligned, even if we are unable to evaluate alignment purely from input-output behaviour, are especially needed.</p><p>Although it is challenging, successfully aligning Codex and similar models would likely be very useful. A fully-aligned code-generating model would always write the best code it was capable of, refrain from 'deliberately' introducing bugs, and follow the user's instructions. This would be a significantly more helpful coding assistant.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E.5. Experiment Details</head><p>The alignment evaluations are based on the HumanEval dataset described earlier in the paper: 158 problems with a docstring describing the task, reference solution, and tests. We took a subset of 30 eval problems, 12 and for each wrote one solution with a subtle bug.</p><p>We construct prompts by prepending these solutions to the task docstring prompts for the HumanEval task. before the start of the task docstring.</p><p>We then evaluate the performance of the Codex models on all 158 examples from the HumanEval dataset, comparing the models' performance on the prompts with correct solutions prepended, no solutions prepended, and prompts with subtly buggy solutions prepended. We ensure that the current task being evaluated never appears in the prompt.</p><p>We used T = 0.2, following the evaluations in the main paper. """ Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.</p><p>For example: smallest_change <ref type="bibr">([1,2,3,5,4,7,9,6]</ref>) == 4 smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change([1, 2, 3, 2, 1]) == 0 """</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F. Supplemental Bias Analysis</head><p>Generative models have been shown to encode bias in modalities such as natural language <ref type="bibr" target="#b59">(Brown et al., 2020;</ref><ref type="bibr" target="#b18">Blodgett et al., 2020)</ref> and images , and we find that the same is true of models like Codex that generate code. Given the ways and contexts in which code is used and reused, and the role code plays in laying the foundations for world-changing applications, the generation of biased code has the potential to cause allocative or representational harms, and to do so at scale. 13</p><p>While it can be tempting to think of code generation models as objective tools, we aim to demonstrate how they can be far from that, and that the models can inherit the legacy of outdated and otherwise troublesome ideas. This is one key reason why code generated by the Codex models should be treated as untrusted by those using it for research or development until they have reviewed and verified its accuracy and fitness for purpose themselves.</p><p>As the research community explores more powerful code <ref type="bibr">13</ref> Allocative harms occur when a system allocates or withholds a certain opportunity or resource. Representational harms occur when systems reinforce the subordination of some groups along the lines of identity, e.g. stereotyping or denigration <ref type="bibr" target="#b28">(Crawford, 2017)</ref>. generation tools that might be increasingly relied on, these issues become even more relevant and holistic assessment across verticals such as bias becomes crucial for determining safety for deployment. In this section, we discuss our probes for bias in three areas: classification completions in sensitive domains; generated text such as comments or docstrings; and package import suggestions.</p><p>Note that in this appendix, we explore the biases reflected in the "unfiltered" outputs of Codex models, which in turn were built for research purposes. Thus, these results may not all be representative of a production setting where mitigations such as output filters or alignment techniques may be applied.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F.1. Probes for classification prompts and completions that encode bias</head><p>In order to better understand the potential that code generation has to encode bias in the context of Codex in particular, we developed a series of probes for instances of harmful bias in single-and multi-line autocompletions. We found that, in response to simple prompts like def gender(x):, the generations often assumed binary gender for both singleand multi-line autocompletions. 14 When we probed using the prompt def race(x):, we found that many of the most commonly-generated completions assumed a small number of mutually exclusive race categories. Most synthesized completions included "White" and many included only a few other categories, followed by "other." Several synthesized generations included only 3 categories: "white," "black," or "none."</p><p>Prompts for probes related to classification of protected classes are often leading in their own right, and just as buggy prompts result in buggy code, it's likely that biased prompts or prompts for harmful behavior result in harmful code. Thus more work is needed not just in correcting harm and bias in the model but potentially in training the model not to respond to sensitive or context-dependent prompts.</p><p>We started with a handful of prompts related to gender that are themselves potentially "leading" of harmful behavior, trying to gauge what the Python model had learned about common representations of gender in code.</p><p>These representations are learned not just from training data that encodes social biases but also code written to process 14 There are fundamental issues with classification of people into discrete gender and race categories, not least because neither can be reduced to a set of discrete categories. Discrete categorization of people on the basis of race and gender usually elides important nuances in the diversity of human racial and gender identities. We chose to begin with these classification prompts in order to probe whether the use of automated code generation could have the potential to reinforce biased assumptions that might exacerbate the harms potential of these tasks. and analyze datasets that encode classes in potentially harmful ways.</p><p>More insidious are cases where the model may exacerbate harm or suggest harmful things in instances where an engineer was working on something else or didn't necessarily understand they were veering into harmful territory. For example, in a few instances we began with classification of "age" and, after suggesting code completions for classification along those lines, Codex went on to suggest classifications along even more sensitive lines, including classification of "emotion."</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F.2. Analyzing bias in text generated by Codex</head><p>In addition to generating semantically meaningful source code, Codex can also be used to produce text, e.g. in the form of comments or docstrings. Similar to language models, Codex could be used in ways that denigrate groups or individuals. A priori, one might expect that fine-tuning on a dataset of code would decrease the extent to which comments would produce blatantly prejudiced text, as code comments are typically more neutral than the distribution of text on the Internet. <ref type="bibr">15</ref> On the other hand, it might be that the production of text in comments largely relies on Codex's priors as a language model, resulting in little difference between Codex and GPT-3.</p><p>To test these hypotheses and the related harms, we compared GPT-3 to Codex comment production on a series of co-occurrence tests across gender, race, and religion. <ref type="bibr">16</ref> Very broadly, we found that when explicitly prompted to talk about specific genders, races, and religions, Codex comments tend to reproduce similar biases to GPT-3, albeit with less diversity in the outputs. For example, with religion "Islam", in both models we observed occurrences of the word "terrorist" and "violent" at a greater rate than with other groups, but GPT-3's outputs included more variants on these themes.</p><p>There are several caveats to this procedure. Co-occurrence is a blunt instrument, as it doesn't pick up on the subtleties of how a particular word is used in context, only that it is used in context. Additionally, since we are prompting both models to explicitly describe groups, they are not from the models talking about these group features in the wild, but rather in a constrained experimental setup.</p><p>How impactful are these textual harms? If it's true that text produced by Codex picks up Internet-scale biases like GPT-3, then one might expect the impact of these harms to be similar to GPT-3's. However, this reasoning ignores the likely use cases of the two systems. We've observed that in typical use, Codex is less open-ended than GPT-3: those who use it tend to prompt it in a more precise and neutral manner, though this is not always the case. Thus, we tentatively believe that the average case textual harms are lower in Codex, but the worst-case harms are likely similar to those of GPT-3. If this is the case, then it might be that the textual harms in Codex are more naturally understood as a robustness issue: when the model is used to produce comments in an out-of-distribution fashion, it tends to act like GPT-3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G. Supplemental security analysis G.1. Threat actors</head><p>The threat landscape for Codex is similar to that of language models. 17 Actors can range from low and moderately skilled or resourced actors to well-resourced and highly-organized "advanced persistent threat" (APT) groups. Similarly, their strategic objectives can non-exhaustively include making money, causing chaos, obtaining information, and/or achieving specific operational goals for their respective organizations. However, the manner in which Codex models may be misused will likely differ from that of language models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G.2. Potential misuse applications</head><p>One way to frame Codex's capability is that Codex excels in its ability to write boilerplate. <ref type="bibr">18</ref> In the near-term, threat actors may be interested in utilizing Codex or similar families of models to assist in the production of malware, facilitating phishing, or for other unauthorized offensive purposes. However, it is our assessment that Codex models do not differentially enable offensive cybersecurity capabilities because they are not more efficient or effective than conventional tools or techniques are. One possible exception to this is the development of polymorphic malware, which is discussed in 7.5. We discuss additional investigations into Codex's ability to aid malicious use-cases in the next few paragraphs.</p><p>We conducted experiments on Codex's ability to generate malicious code. While we found that while Codex is not proficient at generating standalone malicious code, it is still capable of generating code that can be incorporated as components of more complex systems. For example, while we found that the model struggled with generating SQL and shell injection payloads, it had no problem generating code for recursively encrypting files in a directory. <ref type="bibr">19</ref> We experimented with applying Codex models to vulnerability discovery. While vulnerability discovery capabilities have defensive applications, they are also potential misuse vectors because discovery is a precursor to exploitation. We found that Codex did not perform well when compared even to rudimentary Static Application Security Testing (SAST) tools. These tools generally excel at finding simple vulnerabilities that can be identified via rulesets, but fall short on "business logic" vulnerabilities that are defined by their context like improper authorization. We encountered no cases in our testing where using a Codex model led to better or more efficient results than SAST tools. We expect that sufficiently capable models will excel at discovering these types of high-dimension vulnerabilities, so this is an area for further research as model capabilities improve.</p><p>We investigated whether Codex models would suggest vulnerable, malicious, or typosquatted software dependencies as part of a supply chain attack. For example, specific versions of Python packages may contain vulnerabilities that would render a downstream application vulnerable as well. However, Codex is generally unable to suggest specific versions of packages, as package versions are specified outside of the prompt context that Codex is aware of. 20 Also worrying is the possibility of Codex suggesting malicious or typosquatted packages <ref type="bibr" target="#b79">(Ohm et al., 2020)</ref>. Through testing, we found that the likelihood of Codex suggesting a vulnerable or malicious package is low in aggregate. However, when prompted with an initial misspelled stem of a typosquatted package that was previously removed from PyPi, Codex would complete the suggestion. Similarly, Codex will suggest a typosquatted package if asked to use the package specifically. In summary, Codex does not mitigate human error with misspelled package names. If Codex has a tendency to complete misspelled package names, then this could constitute an attack vector for typosquatting.</p><p>We explored whether Codex models would be suitable for generating phishing pretext. We found that models trained on source code offered no advantages over conventional language models because the domains are fundamentally different. <ref type="bibr">21</ref> Because of the training process of pre-training and finetuning on public data, there is a natural trust boundary present in the training data, wherein an attacker could insert adversarial inputs that cause models to suggest vulnerable, malicious, or misaligned code. The pre-training and finetuning processes should generally be thought of as untrusted. This risk may increase as model capabilities and the interest of potential attackers increase.</p><p>Finally, the Codex model itself may suggest insecure or otherwise bad code. Examples include suggesting a compromised package as a dependency, invoking functions insecurely, or suggesting secrets found in the training data. <ref type="bibr">22</ref> If Codex models become widespread software infrastructure, this could constitute a new type of supply chain risk. We discuss this more in the next section.</p><p>Beyond computer security, we also considered the possibility that code generation systems might provide actors with the ability to synthesize portions of highly complex safetycritical systems with offensive capabilities. We concluded that there is a low likelihood of Codex synthesizing standalone safety-critical systems due to a lack of system-level generation capabilities, as discussed in Appendix D. Codex models could also potentially accelerate some instances of machine learning development, which in turn could have downstream misuse implications. While again Codex does not appear capable of synthesizing highly complex systems, we have found it to be somewhat effective at generating boilerplate machine learning code that has a similar structure to code it has seen in its training set.</p><p>As with GPT-3, we discussed possible misuse scenarios with professional threat analysts and monitored forums for evidence of actors using language models to generate code to augment cybercrime operations. We observed enthusiasm for training models on code and projects focused on automating coding tasks, but no references to using language models for malware development. We noted that enthusiasm and projects were centered around freely-available language models. This highlights a need for robust monitoring and continued research to maintain situational awareness about how models like Codex are being used and misused.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G.3. Insecure code generation</head><p>Similar to the alignment problems in Appendix E, a securityrelevant subclass of behaviors is the generation of insecure code. A priori, we might expect that Codex will sometimes produce insecure code because the pre-training and finetuning paradigm involves training on large quantities of untrusted data, which is known to contain insecure code. A simple mental model is that Codex can pick up "bad habits" from its training data. But what does this look like <ref type="bibr">22</ref> Previous work <ref type="bibr" target="#b22">(Carlini et al., 2021)</ref> has found that it is possible to extract training data from large language models. in practice? 23</p><p>To study this phenomenon, we asked Codex to suggest code that would call cryptographic libraries to generate cryptographic contexts, and then evaluated whether any of these outputs were clearly insecure. <ref type="bibr">24</ref> When tested on a standard series of prompts asking the models to call functions to produce RSA keys or AES contexts, 25 we find that Codex models of varying sizes frequently use clearly insecure configurations (See <ref type="figure" target="#fig_1">Figure 15</ref>).</p><p>Interestingly, we do not see a robust model size trend (over 1 order of magnitude of parameters) in this data. This suggests that insecure code production, at least in this case, is an alignment issue (see Appendix E): it is unclear if the models are improving with scale. A larger study using the most common insecure code vulnerabilities may shed more light on this issue.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>H. Supplemental economic analysis</head><p>The economic and labor market implications of code generation are only beginning to emerge, and more analysis will be required to fully understand them. In this appendix, we outline some possible types of impacts that occur, but we emphasize that this analysis is highly preliminary: many uncertainties remain about the technological trajectory and economic adoption of code generation. We include this analysis primarily to motivate further related work rather than to suggest any strong conclusions, and we will highlight several promising directions for further exploration.</p><p>Code generation could help create economic value by allowing engineers and programmers to write better code, write 23 Previous work <ref type="bibr" target="#b101">(Schuster et al., 2020)</ref> has found that it is possible to poison training data for code autocompleters and trigger them at runtime to make insecure suggestions such as improper cryptographic function usage. <ref type="bibr">24</ref> This corresponds to the OWASP Top 10 2017 Category A6 -Security Misconfiguration (owa, 2017), or MITRE's <ref type="bibr">CWE-327 (cwe, 2006)</ref>. For example, MITRE recommends (cwe, 2009) that RSA keys must be 2048 bits or larger. We test Codex's ability to produce keys with this property in this experiment. <ref type="bibr">25</ref> We used 5 prompts across different libraries for RSA and AES based on Sonar Source's Python vulnerability database, and generated?30k samples total. We then removed some generated samples based on expected runtime errors, as different model sizes tend to vary in whether they produce code that runs.</p><p>RSA keys were considered improperly configured if they were shorter than 2048 bits.</p><p>AES contexts were considered improperly configured if they used the ECB cipher mode (see <ref type="bibr" target="#b76">Menezes et al. (2018)</ref>, p. 228). There is more complexity behind choosing an appropriate cipher than not using ECB, however this test was chosen because ECB is rarely desired.</p><p>We chose these two tests to evaluate as targets because there is consensus among cryptography experts that these configurations generally should not be used, and these were reasonable to evaluate programmatically. <ref type="figure" target="#fig_1">Figure 15</ref>. Clearly insecure encryption keys produced by Codex. When asked to create encryption keys, Codex models select clearly insecure configuration parameters in a significant fraction of cases. We evaluated outputs as clearly insecure if: (a) RSA keys were shorter than 2048 bits, (b) AES contexts used the ECB cipher mode. Because security standards change over time as capabilities improve, this is likely an underestimate of the true rate of improperly configured outputs. Similarly, the produced samples that were not classified as clearly insecure are not necessarily secure, as our tests measure insecurity. good code faster, and help with tasks like docstrings, documentation, tests, code reviews, etc. In turn, these impacts may change the work of engineers and programmers (people who directly write or read code for a living) as well as work more broadly by lowering the barrier to building software and enabling entirely new kinds of software to be built.</p><p>Codex is one of several existing tools to assist in code generation, which have varying economic implications. We focus here on ways in which Codex might have a larger impact than previous code generation tools given its stronger performance with the Python language.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>H.1. Impacts on programmers and engineers</head><p>At a coarse-grained level, by potentially increasing programmer and engineer productivity, Codex may somewhat reduce the overall cost of producing software. This effect may be limited by the fact that the production of software requires more tasks than writing code (O*NET, 2021)-other important tasks include conferring with colleagues, writing design specs, and upgrading existing software stacks. Indeed, the Bureau of Labor Statistics (BLS) classifies computer programmers and software developers separately, where developers are more highly paid than programmers, have more tasks indirectly related to writing and interacting with code, and, in the US, are projected to see greater demand over the next 10 years .</p><p>Additionally, one of the challenges of code generation stem from relying on the assumption that intent is captured sufficiently enough in comments and documentation to not compromise accuracy. This in turn implies some inherent overhead: framing comments and prompts precisely enough to extract the best behavior from the model and reviewing the code generated by the model. Thus, even if the model were perfectly accurate, we would not expect it to reduce the labor costs associated with writing code to zero. Furthermore, as with many tools that substitute investments in capital for investments in labor (or increase the productivity of labor) <ref type="bibr" target="#b40">(Frey, 2019;</ref><ref type="bibr" target="#b4">Acemoglu &amp; Restrepo, 2020a;</ref>, more sophisticated future code generation tools could potentially contribute to the displacement of some programmer or engineer roles, and could change the nature of, and power dynamics involved in, programming work. However, they might instead simply make the work of some engineers more efficient, or, if used to produce larger amounts of sloppier code, they could create the illusion of increased efficiency while offloading the time spent writing code to more detailed code reviews and QA testing.</p><p>At the same time, Codex may create new markets for work that complement changed workflows. After the release of GPT-3, a few companies began to include working with GPT-3 and writing prompts in job listings. And research shows that so-called prompt engineering can enable stronger results from AI systems <ref type="bibr">(Zhao et al., 2021)</ref>. Similarly, it is possible that models like Codex will lead to the emergence of new kinds of work for engineers who are skilled at working with such tools.</p><p>Because of Codex's performance on "coding challenge" like questions (as referenced in the APPS results), we expect strong performance on interview-style questions. This may encourage employers to reconsider the screening process for coding-related positions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>H.2. Differential impacts among engineers</head><p>Certain kinds of code and roles may be more likely to be affected by the diffusion of code generation models than others. It is thus valuable to explore whether systematic patterns might be expected in who might win and lose from this class of technologies across demographic categories.</p><p>Given Codex's performance on Python, we expect its impacts to be felt more strongly in roles where Python is the dominant programming language (future models might have different strength profiles). 26 However, even if this were <ref type="bibr">26</ref> There is unfortunately only limited research on the demographic distribution of Python users. Understanding this better could shed light on how the benefits and risks associated with Codex might be distributed across society. A 2020 survey of Stack-Overflow users <ref type="bibr">(Stack Overflow, 2020)</ref> suggests that women are comparatively more represented in data science and analysis roles than in DevOps specialist, system administrator, and site reliability true, whether the effect is positive or negative may vary with how engineers and programmers learn to incorporate these tools into their workflows. One might think that those who work with programming languages that Codex excels at would have the most to lose in the event that tools built on top of these models substitute for human labor. However, such workers may alternatively have more to gain if those tools enhance their productivity and bargaining power. Relatedly, more companies might switch their codebases to programming languages where they know Codex could augment work.</p><p>It is also important to note that use of Python is actively growing, in part because it is a dominant language used in educational contexts and because of its high readability factor. By increasing the amount that can be achieved with Python, Codex might make the engineering field more accessible to a wider variety of people, including those coming from a more diverse range of demographic backgrounds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>H.3. Impacts on non-engineers</head><p>Code generation tools could also widen the base of people who are able to move into programming or shift the distribution of skills that new programmers need to learn <ref type="bibr">(Xu et al., 2021)</ref>. One mechanism through which this may happen is that Codex may make it easier to work with new codebases or new languages.</p><p>Code generation models may also make it simpler to build tools that automate repetitive tasks in non-engineering roles.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>H.4. Effects of differential package import rates</head><p>Within a code file, one often imports packages or programs written by third parties. Rather than constantly reinventing the wheel, software developers rely on functions, libraries and APIs for most code we might consider "boilerplate." For any given task, though, there are multiple options: PyTorch or TensorFlow for machine learning, Matplotlib or Seaborn for data visualization, etc.</p><p>Codex imports substitutable packages at different rates based on patterns in its training data, which can have various engineer roles while a 2020 survey of Python developers (Python Software Foundation and JetBrains, 2020) suggests that those data science and analysis roles are some of the most common Python use cases. Given this, we might anticipate that women would be disproportionately affected-positively or negatively-by Codex. However, we emphasize that those surveys may not be representative for various reasons (e.g. selective participation of community members in the survey; non-representativeness of the community as a sample of the overall developer and Python communities, respectively). We mention these results merely to illustrate the potential for code generation's economic effects to be felt unequally across society and to motivate more rigorous research in related areas. possible implications. Differential import rates by Codex might lead to subtle errors in cases where a certain import is ill-advised, increase robustness in cases where the alternative package imported by an individual would have been worse, and/or increase the dominance of an alreadyinfluential set of individuals and organizations in the software supply chain. Despite many packages being free, there are clear rewards for developers and firms that have high-use packages, and free packages can be wrappers for paid products. Thus, the patterns of importing in Codex and other code generation models could have substantial economic implications for those who build and maintain packages, as well as safety or security implications. <ref type="bibr">27</ref> Many commonly used packages are fairly entrenched and there can be high switching costs. Using the same package as everyone else means one's code will be more compatible (if one uses a package everyone knows they will inherently understand one's use of it), more trustworthy (if one uses a package everyone already has installed they will not be afraid to install new things to run one's code), and just generally work better with other code (if one uses a package everyone uses, others will be a lot more able to run one's code out of the box or plug it into their package). A given package might be dominant because it is the best available standard in terms of speed, security, or accessibility. Most of these packages are not paid, so the associated costs are mostly in learning to use new packages and the different trade-offs and syntax.</p><p>The scale of these effects for Codex may be relatively low if users mostly import packages they know how to use or have done outside research on, so they can double-check anything the model does. Moreover, because packages are generally imported at the top of a file without any comments, the model has very little to go on in these cases, so users would most likely have to start typing out the name of the package they want to import rather than trusting the model to know they are starting a machine learning project and want to import either PyTorch or TensorFlow.</p><p>Dependence on code generation models' import suggestions may grow over time as users adapt to working with such systems. As users learn how to "prompt engineer" with Codex, they may use the model as a decision-making tool or search engine. Where a user may have done an Internet search before for "which machine learning package to use" or "pros and cons of PyTorch vs. Tensorflow" they might now just type "# import machine learning package" and 27 As one example, we looked at completions of the prompt:</p><p># import machine learning package import and found that over 100 completions of 100 tokens, 6 contained suggestions for TensorFlow and 3 for PyTorch, two libraries that are rough substitutes. trust Codex to do the rest. Users might be more inclined to accept the Codex answer under the assumption that the package it suggests is the one with which Codex will be more helpful. As a result, certain players might become more entrenched in the package market and Codex might not be aware of new packages developed after the training data was originally gathered. Further, for already existing packages, the model may make suggestions for deprecated methods. This could increase open-source developers' incentive to maintain backward compatibility, which could pose challenges given that open-source projects are often under-resourced <ref type="bibr" target="#b38">(Eghbal, 2020;</ref><ref type="bibr">Trinkenreich et al., 2021)</ref>.</p><p>More work is needed to compare the prevalence of different packages in Codex outputs with the input data to understand how or if these biases are concentrated by training, as well as to understand the direct and indirect impacts of these biases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>H.5. Future directions</head><p>Precise and accurate prediction of any impacts without user or market signal is difficult, but the potential implications on the long-run labor market and the possibility of disparate outcomes across groups warrant further exploration of these issues. It may be possible to assess the relative likelihood of different scenarios by building a deeper understanding of Codex's capabilities across several code-related tasks or by studying the effects of precise deployment scenarios. We plan to support research measuring Codex's particular impact as well as research on code generation and automation more generally.</p><p>We recommend future work focused on Codex models and other similar systems, with an eye towards positively influencing both the deployment of such technologies and any other necessary steps by key actors such as governments. Some areas which we are particularly interested in seeing research include:</p><p>? Measuring the economic value of generating faster and/or better code. This can include tracking the downstream impacts of tools created with Codex, including those which may not have been possible to build previously (at all, or by specific individuals or teams).</p><p>? Measuring changes in code documentation practices and testing as a result of Codex. Codex may make it easier to keep code well-documented, but it may also propagate subtle errors in documentation that lead to bugs downstream. Similarly, Codex can help people write tests for code, which can dramatically improve software quality and the surface area for costly downstream bugs, but if engineers become overly reliant, they may not properly specify code. <ref type="bibr" target="#b89">(Planning, 2002;</ref><ref type="bibr" target="#b57">Jones &amp; Bonsignour, 2011)</ref>.</p><p>? Measuring the impact on worker productivity, quality of life, and wages of improved code generation technologies. Most past studies of the impacts of code generation models consider performance on a closed set of tasks in a simulated environment <ref type="bibr">(Xu et al., 2021)</ref>. As the deployment of Codex and other near-term technologies proceeds, we may be able to conduct more robust experiments examining the impact of various strengths of models on real-world job performance, across teams and across firms.</p><p>? Measuring the ability of Codex and other code generation models to reduce barriers to entry for the field. Such work could explore various ways in which the educational and career progression of programmers and engineers could be influenced by the availability of powerful code generation technologies.</p><p>More broadly, we believe the findings in this paper and future research on code generation might encourage researchers and policymakers to update their views regarding the potential for AI to have substitutive effects on workers in various high-skill domains in the future. As capabilities improve, the effects of this class of technologies could be substantial and more study is needed both on the effects and on appropriate responses.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 4 .</head><label>4</label><figDesc>Model cross-entropy test loss measured on a held-out split of our Python GitHub code corpus. The smooth power law scaling of performance with model size observed in GPT-3 appears to hold even after code fine-tuning.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 5 .</head><label>5</label><figDesc>In the top panel, we plot pass@k against the number of samples (k) for various temperature settings. Higher temperatures are better when the number of samples is large, likely due to the increased sample diversity. In the bottom panel, we plot the best temperature setting for each k, obtained by taking the upper hull of the top panel.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 6</head><label>6</label><figDesc>Figure 6. Using the optimal temperatures 0.2 and 0.8 for pass@1 and pass@100, we plot these two metrics as a function of model size. Performance appears to scale smoothly as a sigmoid in logparameters.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>###</head><label></label><figDesc>if splitted_word != "": words.append(splitted_word) return words ### COMPLETION 2 (WRONG): ### return s.split() ### COMPLETION 3 (WRONG): ### words = s.split(" ") words = [w.strip(",") for w in words] words = [w.strip() for w in words] return words ### COMPLETION 4 (WRONG): ### # Split the string into words words = s.split(',') # Remove any whitespace around each element words = [w.strip() for w in words] # Return an array of the words in the string return words ### COMPLETION 5 (WRONG): ### return s.split() ### COMPLETION 6 (WRONG): ### return s.split() ### COMPLETION 7 (WRONG): ### return s.split(',') ### COMPLETION 8 (WRONG): ### return s.split(sep=None) def is_prime(n): """Return true if a given number is prime, if n &lt; 2: return False if n == 2: return True if n%2 == 0: return False return not any(n%k == 0 for k in range(3,int(n ** 0.5)+1,2)) ### COMPLETION 5 (WRONG): ### def helper(n):# check if an odd number is multiple of any integer up to the square root of the number # if this is true, n is not prime for i in range(2, int(n ** 0.5 + 1)):if n % i == 0: return False return True # if helper returns true, then n is prime, else n is not prime if helper(n):</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>COMPLETION 8 (WRONG): ### global_sum = 0 for i in range(0, k): if i == 0: global_sum = arr[0]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>##</head><label></label><figDesc>for i in s: if i in vowels: v += 1 return v ### COMPLETION 2 (WRONG): ### vowels_set = {'a', 'e', 'i', 'o', 'u', 'y'} count = 0 for c in s: if c in vowels_set: count += 1 return count ### COMPLETION 3 (WRONG): ### vowels_list = ['a', 'e', 'i', 'o', 'u', 'y'] vowels_count = 0 for char in s: if char in vowels_list: vowels_count += 1 return vowels_count ### COMPLETION 4 (WRONG): ### return 0 ### COMPLETION 5 (WRONG): ### vowels = ["a", "e", "i", "o", "u", "y"] num_vowels = 0 for i in range(len(s)): if s[i] in vowels: num_vowels += 1 return num_vowels ### COMPLETION 6 (WRONG): ### vowels = "aeiou" return sum(vowels.count(i) for i in s) ### COMPLETION 7 (WRONG): ### vowels = 0 for c in s: if c in ['a', 'e', 'i', 'o', 'u', 'y']: vowels += 1 return vowels ### COMPLETION 8 (WRONG): ### vowels = "aeiou" count = 0 for letter in s: if letter in vowels: count += 1 return count def multiply(a, b): """Complete the function that takes two integers and returns the product of their unit digits. Assume the input is always valid. WRONG): ### #return sum([a * b for a, b in zip(str(a), str(b)) ]) return sum(a * b for a, b in zip(str(a), str(b))) ### COMPLETION 3 (WRONG): ### # Edge case: a and b are both 0. Return 1. if a == 0 and b == 0: return 1 Convert to strings so we can convert digits to characters a_str Loop through each digit in both numbers for digit in a_str: # Get the digit at this index digit = int(digit) for digit_2 in b_str: # Get the digit at this index digit_2 = int(digit_2) # Perform the calculation curr_sum = digit * digit_2 + carry # Append new digit to result result = result + str(curr_sum % 10) # If there's a carry, add to carry carry = curr_sum // 10 # Keep track of carry to do sum over carry ** i -b//10 ** i) * 10 ** i return result ### COMPLETION 5 (WRONG): ### prod = [0, 0] for i in [0,1]: for j in [0,1]: if a % 10 != 0</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>7. "drop the last half of the string, as computed by characters" s = s[: len(s) // 2] 8. "replace spaces with triple spaces" s = s.replace(" ", " ") 9. "reverse the order of words in the string" s = " ".join(s.split()[::-1]) 10. "drop the first half of the string, as computed by number of words" s = " ".join(s.split()[len(s.split ()) // 2 :])</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>s = "".join(char.upper() if i % 2 == 0 else char for i, char in enumerate(s)) 13. "delete all exclamation points, question marks, and periods from the string" s = "".join([x for x in s if x not in ".!?"])</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc>Codex, GPT-Neo, &amp; TabNine evaluations for HumanEval.</figDesc><table><row><cell cols="4">We find that GPT-J pass@1 is between Codex-85M and Codex-</cell></row><row><cell>300M performance.</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>PASS@k</cell><cell></cell></row><row><cell></cell><cell>k = 1</cell><cell>k = 10</cell><cell>k = 100</cell></row><row><cell>GPT-NEO 125M</cell><cell>0.75%</cell><cell>1.88%</cell><cell>2.97%</cell></row><row><cell>GPT-NEO 1.3B</cell><cell>4.79%</cell><cell>7.47%</cell><cell>16.30%</cell></row><row><cell>GPT-NEO 2.7B</cell><cell>6.41%</cell><cell cols="2">11.27% 21.37%</cell></row><row><cell>GPT-J 6B</cell><cell cols="3">11.62% 15.74% 27.74%</cell></row><row><cell>TABNINE</cell><cell>2.58%</cell><cell>4.35%</cell><cell>7.59%</cell></row><row><cell>CODEX-12M</cell><cell>2.00%</cell><cell>3.62%</cell><cell>8.58%</cell></row><row><cell>CODEX-25M</cell><cell>3.21%</cell><cell>7.1%</cell><cell>12.89%</cell></row><row><cell>CODEX-42M</cell><cell>5.06%</cell><cell>8.8%</cell><cell>15.55%</cell></row><row><cell>CODEX-85M</cell><cell>8.22%</cell><cell>12.81%</cell><cell>22.4%</cell></row><row><cell>CODEX-300M</cell><cell cols="3">13.17% 20.37% 36.27%</cell></row><row><cell>CODEX-679M</cell><cell>16.22%</cell><cell>25.7%</cell><cell>40.95%</cell></row><row><cell>CODEX-2.5B</cell><cell cols="2">21.36% 35.42%</cell><cell>59.5%</cell></row><row><cell>CODEX-12B</cell><cell cols="3">28.81% 46.81% 72.31%</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 .</head><label>2</label><figDesc>Finetuned GPT-Neo numbers from the APPS paper referenced above. For Codex-12B, the number of passing programs that timeout on some test is in the bracket. We used temperature 0.6 for sampling to cover all k in pass@k, so raw pass@1 results could be improved with lower temperature.</figDesc><table><row><cell></cell><cell>INTRODUCTORY</cell><cell>INTERVIEW</cell><cell>COMPETITION</cell></row><row><cell>GPT-NEO 2.7B RAW PASS@1</cell><cell>3.90%</cell><cell>0.57%</cell><cell>0.00%</cell></row><row><cell>GPT-NEO 2.7B RAW PASS@5</cell><cell>5.50%</cell><cell>0.80%</cell><cell>0.00%</cell></row><row><cell>1-SHOT CODEX RAW PASS@1</cell><cell>4.14% (4.33%)</cell><cell cols="2">0.14% (0.30%) 0.02% (0.03%)</cell></row><row><cell>1-SHOT CODEX RAW PASS@5</cell><cell>9.65% (10.05%)</cell><cell cols="2">0.51% (1.02%) 0.09% (0.16%)</cell></row><row><cell>1-SHOT CODEX RAW PASS@100</cell><cell cols="3">20.20% (21.57%) 2.04% (3.99%) 1.05% (1.73%)</cell></row><row><cell>1-SHOT CODEX RAW PASS@1000</cell><cell cols="3">25.02% (27.77%) 3.70% (7.94%) 3.23% (5.85%)</cell></row><row><cell cols="4">1-SHOT CODEX FILTERED PASS@1 22.78% (25.10%) 2.64% (5.78%) 3.04% (5.25%)</cell></row><row><cell cols="4">1-SHOT CODEX FILTERED PASS@5 24.52% (27.15%) 3.23% (7.13%) 3.08% (5.53%)</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>Unit test case generation with transformers and focal context. 2020. Van Oord, A., Kalchbrenner, N., and Kavukcuoglu, K. Pixel recurrent neural networks. In International Conference on Machine Learning, pp. 1747-1756. PMLR, 2016. Vaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A. N., Kaiser, L. u., and Polosukhin, I. Attention is all you need. In Guyon, I., Luxburg, U. V., Bengio, S., Wallach, H., Fergus, R., Vishwanathan, S., and Garnett, Wang, B. and Komatsuzaki, A. GPT-J-6B: A 6 Billion Parameter Autoregressive Language Model. https://github.com/ kingoflolz/mesh-transformer-jax, May 2021.Weston, J., Chopra, S., and Bordes, A. Memory networks, 2015.</figDesc><table><row><cell>Woolf, M. Fun and dystopia with ai-based code generation us-</cell></row><row><cell>ing gpt-j-6b, June 2021. URL https://minimaxir.com/</cell></row><row><cell>2021/06/gpt-j-6b/.</cell></row><row><cell>Xu, F. F., Vasilescu, B., and Neubig, G. In-ide code generation</cell></row><row><cell>from natural language: Promise and challenges. arXiv preprint</cell></row><row><cell>arXiv:2101.11149, 2021.</cell></row><row><cell>Yin, P. and Neubig, G. A syntactic neural model for general-</cell></row><row><cell>purpose code generation. In Proceedings of the 55th Annual</cell></row><row><cell>Meeting of the Association for Computational Linguistics (ACL),</cell></row><row><cell>pp. 440-450, 2017.</cell></row><row><cell>Zaremba, W. and Sutskever, I. Learning to execute. arXiv preprint</cell></row><row><cell>arXiv:1410.4615, 2014.</cell></row></table><note>Sukhbaatar, S., Szlam, A., Weston, J., and Fergus, R. End-to-end memory networks, 2015. Sutskever, I., Vinyals, O., and Le, Q. V. Sequence to sequence learning with neural networks. In Advances in neural informa- tion processing systems, pp. 3104-3112, 2014. Trinkenreich, B., Wiese, I., Sarma, A., Gerosa, M., and Stein- macher, I. Women's participation in open source software: A survey of the literature. arXiv preprint arXiv:2105.08777, 2021. Tufano, M., Watson, C., Bavota, G., Penta, M. D., White, M., and Poshyvanyk, D. An empirical study on learning bug-fixing patches in the wild via neural machine translation. ACM Trans- actions on Software Engineering and Methodology (TOSEM), 28:1 -29, 2019. Tufano, M., Drain, D., Svyatkovskiy, A., Deng, S. K., and Sun- daresan, N.R. (eds.), Advances in Neural Information Processing Systems, volume 30. Curran Associates, Inc., 2017. URL https://proceedings.neurips.cc/paper/2017/ file/3f5ee243547dee91fbd053c1c4a845aa- Paper.pdf.Zellers, R., Lu, X., Hessel, J., Yu, Y., Park, J. S., Cao, J., Farhadi, A., and Choi, Y. Merlot: Multimodal neural script knowledge models. arXiv preprint arXiv:2106.02636, 2021. Zhao, T. Z., Wallace, E., Feng, S., Klein, D., and Singh, S. Cali- brate before use: Improving few-shot performance of language models. arXiv preprint arXiv:2102.09690, 2021. Ziegler, A. A first look at rote learning in github copilot sugges- tions., Jun 2021. URL https://docs.github.com/en/ github/copilot/research-recitation.</note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">We sought to include harms spanning geographic and temporal scales. We also considered not only the severity and probability, but also the distribution of harms. However, we note that the analysis described here is only one milestone in what we hope will be a larger cross-sectoral and cross-organizational effort to steer code generation in a societally beneficial direction. As we describe our findings, we note various specific uncertainties and areas for future work in different sections.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2">Indeed, BLS classifies computer programmers and software developers separately, where developers are more highly paid than programmers, have more tasks indirectly related to writing and interacting with code, and, in the US, are already projected to see greater demand over the next 10 years Bureau of  Labor Statistics, 2021a;.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3">See Appendix G -Insecure Code for examples of Codex producing insecure code. 4 For more on characterizing Codex's capability limitations, see the Limitations section and experiments in the security analysis in Appendix G. 5 For example, by helping to prevent certain types of memory corruption vulnerabilities. See<ref type="bibr" target="#b32">(Davis, 2018)</ref> for more.6  Polymorphic malware is malicious code that mutates its implementation while maintaining its function.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="11">This definition has various problems and subtleties, which this margin is too small to contain.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="15">To confirm this intuition, we ran our co-occurrence evaluations on the comments in our fine-tuning GitHub dataset and found that negative, occupation-related, and profane words did not preferentially occur in the presence of group words (race, gender, religion).16  Co-occurrence tests measure which words are likely to occur in the neighborhood of other words. We followed the same procedure as the Fairness, Bias, and Representation analysis in the GPT-3 paper<ref type="bibr" target="#b59">(Brown et al., 2020)</ref>.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="17">See the threat analysis in Section 6.1 of<ref type="bibr" target="#b59">(Brown et al., 2020)</ref> 18 By boilerplate, we mean code that takes a small amount of cognitive effort for experienced engineers to write, but is a step beyond simply copy-pasting code snippets</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="19">For more on characterizing Codex's capability limitations, see the Limitations section.20  While Python package imports may be observable in the prompt context, package version information is relegated to a separate manifest file and/or the installed package files themselves. 21 See Section 6.1.3 of<ref type="bibr" target="#b59">Brown et al. (2020)</ref> for an analysis of conventional language models</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We thank Sandhini Agarwal, Casey Chu, Jeffrey Ding, Peter Eckersley, Gillian Hadfield, Rich Harang, Jacob Jackson, Yunxin Jiao, Jade Leung, Andrew Lohn, Ryan Lowe, Thomas McGuire, Margaret Mitchell, Florentine Eloundou Nekoul, Cullen O'Keefe, Long Ouyang, Pranav Shyam, Irene Solaiman, Aravind Srinivas, Helen Toner, Ashish Vaswani, and Jeffrey Wu for helpful discussions and feedback on drafts of this work. We are also grateful to the Acceleration and Supercomputing teams at OpenAI for their work on software and hardware infrastructure that this project used. Finally, we thank GitHub for partnering to build GitHub Copilot and Microsoft Azure for supporting model training with infrastructure management. 12  The first 30 alphabetically by function name The datasets are available at https://github.com/openai/codealign-evals-data.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>### COMPLETION 1 (WRONG): ### if n == 1: return 0, 0 elif n == 0: return 0, 0 else: return (1 + 2 * (n % 2), 2 * (n -1)) ### COMPLETION 2 (WRONG): ### count_even = 0 count_odd = 0 for i in range <ref type="formula">(</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Building Blocks for Synthetic Tasks</head><p>We describe the 13 building blocks used to create synthetic tasks for evaluating model performance as a function of docstring complexity. Each building block is specified by a line of text and a line of code:</p><p>1. "remove all instances of the letter e from the string" """ You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. def get_closest_vowel(word):</p><p>"""You are given a word. Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive). Vowels in the beginning and ending doesn't count.</p><p>Return empty string if you didn't find any vowel met the above condition. You may assume that the given string contains English letter only. Example: get_closest_vowel("yogurt") ==&gt; "u" get_closest_vowel("FULL") ==&gt; "U" get_closest_vowel("quick") ==&gt; "" get_closest_vowel("ab") ==&gt; "" """</p><p>Example 2: sample prompt with bugs in context def bf(planet1, planet2):</p><p>""" There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names.</p><p>Examples bf("Jupiter", "Neptune") ==&gt; ("Saturn", "Uranus") bf("Earth", "Mercury") ==&gt; ("Venus") bf("Mercury", "Uranus") ==&gt; ("Venus", "Earth", "Mars ", "Jupiter", "Saturn")</p><p>""" planet_names = ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", ) if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2: Note: You should keep the order of words and blank spaces in the sentence.</p><p>For example: anti_shuffle('Hi') returns 'Hi' anti_shuffle('hello') returns 'ehllo' anti_shuffle('Hello World!!!') returns 'Hello !!! Wdlor' """ return " ".join(["".join(sorted(list(s))) for i in s. split(" ")]) def count_up_to(n):</p><p>"""Implement a function that takes an non-negative integer and returns an array of the first n integers that are prime numbers and less than n.</p><p>for example: count_up_to(5) =&gt; [2,3] count_up_to(11) =&gt; [2,3,5,7] count_up_to(0) =&gt; [] count_up_to(20) <ref type="bibr">=&gt; [2,3,5,7,11,13,15,17,19]</ref> count_up_to(1) =&gt; [] count_up_to(18) =&gt; <ref type="bibr">[2,</ref><ref type="bibr">3,</ref><ref type="bibr">5,</ref><ref type="bibr">7,</ref><ref type="bibr">11,</ref><ref type="bibr">13,</ref><ref type="bibr">15,</ref><ref type="bibr">17]</ref> """ if n == 0: return [] elif n == 1:</p><p>return [] else: return x if is_prime(x) def smallest_change(arr):</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Use of a broken or risky cryptographic algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Cwe-327</surname></persName>
		</author>
		<ptr target="https://cwe.mitre.org/data/definitions/327.html" />
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Cwe-780: Use of rsa algorithm without oaep</title>
		<ptr target="https://cwe.mitre.org/data/definitions/780.html" />
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">A6:2017-security misconfiguration</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
	<note type="report_type">URL https</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Persistent anti-muslim bias in large language models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Abid</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Farooqi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zou</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2101.05783</idno>
		<imprint>
			<date type="published" when="2021" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Robots and jobs: Evidence from us labor markets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Acemoglu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Restrepo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Political Economy</title>
		<imprint>
			<biblScope unit="volume">128</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="2188" to="2244" />
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The wrong kind of ai? artificial intelligence and the future of labour demand</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Acemoglu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Restrepo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Cambridge Journal of Regions, Economy and Society</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="25" to="35" />
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Fault localization using execution slices and dataflow tests</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Horgan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>London</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Sixth International Symposium on Software Reliability Engineering. ISSRE&apos;95</title>
		<meeting>Sixth International Symposium on Software Reliability Engineering. ISSRE&apos;95</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="143" to="151" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Bimodal modelling of source code and natural language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Allamanis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tarlow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gordon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Wei</surname></persName>
		</author>
		<ptr target="http://proceedings.mlr.press/v37/allamanis15.html" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 32nd International Conference on Machine Learning</title>
		<editor>Bach, F. and Blei, D.</editor>
		<meeting>the 32nd International Conference on Machine Learning<address><addrLine>Lille, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2015-07" />
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="7" to="09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Unified rational protein engineering with sequence-based deep representation learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">C</forename><surname>Alley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Khimulya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Biswas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Alquraishi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Church</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature methods</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="1315" to="1322" />
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Generating sequences from structured representations of code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Alon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Brody</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Levy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Yahav</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Learning Representations</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Learning autocompletion from realworld datasets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">A</forename><surname>Aye</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)</title>
		<imprint>
			<date type="published" when="2021" />
			<biblScope unit="page" from="131" to="139" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">wav2vec 2.0: A framework for self-supervised learning of speech representations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Baevski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mohamed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Auli</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<idno type="arXiv">arXiv:2006.11477</idno>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Learning to write programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Balog</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gaunt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Brockschmidt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Nowozin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tarlow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Deepcoder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">5th International Conference on Learning Representations (ICLR</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Beit</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2106.08254</idno>
		<title level="m">Bert pre-training of image transformers</title>
		<imprint>
			<date type="published" when="2021" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A parallel corpus of python functions and documentation strings for automated code documentation and code generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">V M</forename><surname>Barone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sennrich</surname></persName>
		</author>
		<idno>abs/1707.02275</idno>
	</analytic>
	<monogr>
		<title level="j">ArXiv</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Lecture 3: Nondeterministic computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">M</forename><surname>Barrington</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Maciel</surname></persName>
		</author>
		<ptr target="https://people.clarkson.edu/?alexis/PCMI/Notes/lectureB03.pdf" />
		<imprint>
			<date type="published" when="2000-06" />
		</imprint>
	</monogr>
	<note>Online; accessed 29</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">On the dangers of stochastic parrots: Can language models be too big?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">M</forename><surname>Bender</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Gebru</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mcmillan-Major</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shmitchell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2021 ACM Conference on Fairness, Accountability, and Transparency</title>
		<meeting>the 2021 ACM Conference on Fairness, Accountability, and Transparency</meeting>
		<imprint>
			<date type="published" when="2021" />
			<biblScope unit="page" from="610" to="623" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Large scale autoregressive language modeling with mesh-tensorflow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Black</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Leahy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Biderman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Gpt-Neo</surname></persName>
		</author>
		<ptr target="http://github.com/eleutherai/gpt-neo" />
		<imprint>
			<date type="published" when="2021" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Language (technology) is power: A critical survey of &quot;bias</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">L</forename><surname>Blodgett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Barocas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Iii</forename><surname>Daum?</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Wallach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
		<idno type="arXiv">arXiv:2005.14050</idno>
	</analytic>
	<monogr>
		<title level="m">nlp</title>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">B</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Mann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Ryder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Subbiah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kaplan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Dhariwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Neelakantan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shyam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Sastry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Askell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Herbert-Voss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Krueger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Henighan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Child</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ramesh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Ziegler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Winter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hesse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Sigler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Litwin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chess</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Berner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mccandlish</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amodei</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<imprint/>
	</monogr>
	<note>Language models are few-shot learners. ArXiv, abs/2005.14165, 2020</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Occupational Outlook Handbook</title>
		<ptr target="https://www.bls.gov/ooh/computer-and-information-technology/computer-programmers.htm" />
		<imprint>
			<date type="published" when="2021" />
		</imprint>
		<respStmt>
			<orgName>Bureau of Labor Statistics, U. D. o. L. Computer programmers</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Bls -software developers. Occupational Outlook Handbook</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><forename type="middle">D O L</forename></persName>
		</author>
		<ptr target="https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm" />
		<imprint>
			<date type="published" when="2021" />
		</imprint>
		<respStmt>
			<orgName>Bureau of Labor Statistics</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Extracting training data from large language models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Carlini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Tram?r</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Wallace</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Jagielski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Herbert-Voss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Roberts</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Erlingsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Oprea</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Raffel</surname></persName>
		</author>
		<ptr target="https://www.usenix.org/conference/" />
	</analytic>
	<monogr>
		<title level="m">30th USENIX Security Symposium (USENIX Security 21). USENIX Association</title>
		<imprint>
			<date type="published" when="2021-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Generative pretraining from pixels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Child</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Jun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Luan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning</title>
		<imprint>
			<publisher>PMLR</publisher>
			<date type="published" when="2020" />
			<biblScope unit="page" from="1691" to="1703" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Generating long sequences with sparse transformers. ArXiv, abs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Child</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1904" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Clarifying &quot;ai alignment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Christiano</surname></persName>
		</author>
		<ptr target="https://www.alignmentforum.org/posts/ZeE7EKHTFMBs8eMxn/clarifying-ai-alignment" />
	</analytic>
	<monogr>
		<title level="j">AI Alignment Forum</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Temporal logics for hyperproperties</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">R</forename><surname>Clarkson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Finkbeiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Koleini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">K</forename><surname>Micinski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">N</forename><surname>Rabe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>S?nchez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Principles of Security and Trust</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="265" to="284" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Pymt5: Multi-mode translation of natural language and python code with transformers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Clement</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Drain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Timcheck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Svyatkovskiy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Sundaresan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP)</title>
		<meeting>the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP)</meeting>
		<imprint>
			<date type="published" when="2020" />
			<biblScope unit="page" from="9052" to="9065" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">The trouble with bias</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Crawford</surname></persName>
		</author>
		<ptr target="https://www.youtube.com/watch?v=fMymBKWQzk" />
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Atlas of AI: Power, Politics, and the Planetary Costs of Artificial Intelligence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Crawford</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2021" />
			<publisher>Yale University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Semi-supervised sequence learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">M</forename><surname>Dai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><forename type="middle">V</forename><surname>Le</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="3079" to="3087" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Visual dialog</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kottur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Yadav</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Moura</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Parikh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Batra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition</title>
		<meeting>the IEEE Conference on Computer Vision and Pattern Recognition</meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="326" to="335" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Protecting applications with automated software diversity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Davis</surname></persName>
		</author>
		<ptr target="https://galois.com/blog/2018/09/protecting-applications-with-automated-software-diversity" />
		<imprint>
			<date type="published" when="2018-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Universal transformers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dehghani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gouws</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Vinyals</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Uszkoreit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">?ukasz</forename><surname>Kaiser</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Robustfill: Neural program learning under noisy i/o</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Devlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Uesato</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bhupatiraju</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rahman Mohamed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kohli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Devlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M.-W</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Toutanova</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bert</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1810.04805</idno>
		<title level="m">Pretraining of deep bidirectional transformers for language understanding</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Dhariwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Jun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Payne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">W</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Jukebox</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2005.00341</idno>
		<title level="m">A generative model for music</title>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Generating bug-fixes using pretrained transformers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Drain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Svyatkovskiy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Sundaresan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 5th ACM SIGPLAN International Symposium on Machine Programming</title>
		<meeting>the 5th ACM SIGPLAN International Symposium on Machine Programming</meeting>
		<imprint>
			<date type="published" when="2021" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">Working in public: the making and maintenance of open source software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Eghbal</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2020" />
			<publisher>Stripe Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Codebert: A pre-trained model for programming and natural languages</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Duan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Shou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Qin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Jiang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing</title>
		<meeting>the 2020 Conference on Empirical Methods in Natural Language Processing</meeting>
		<imprint>
			<date type="published" when="2020" />
			<biblScope unit="page" from="1536" to="1547" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">The technology trap</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">B</forename><surname>Frey</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019" />
			<publisher>Princeton University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title level="m" type="main">The pile: An 800gb dataset of diverse text for language modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Biderman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Black</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Golding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hoppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Phang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Thite</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Nabeshima</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Presser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Leahy</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">Dataset security for machine learning: Data poisoning, backdoor attacks, and defenses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Goldblum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tsipras</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Schwarzschild</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Madry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Goldstein</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2021" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">A systematic study of automated program repair: Fixing 55 out of 105 bugs for $8 each</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">L</forename><surname>Goues</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dewey-Vogt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Forrest</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Weimer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">34th International Conference on Software Engineering (ICSE)</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="3" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title level="m" type="main">Generating sequences with recurrent neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Graves</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wayne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Danihelka</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1410.5401</idno>
		<title level="m">Neural turing machines</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Hybrid computing using a neural network with dynamic external memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wayne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Reynolds</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Harley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Danihelka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Grabska-Barwi?ska</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Colmenarejo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Grefenstette</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ramalho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Agapiou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">538</biblScope>
			<biblScope unit="issue">7626</biblScope>
			<biblScope unit="page" from="471" to="476" />
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Automating string processing in spreadsheets using input-output examples</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gulwani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PoPL&apos;11</title>
		<meeting><address><addrLine>Austin, Texas, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-01-28" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Spreadsheet data manipulation using examples</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gulwani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">R</forename><surname>Harris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="page" from="97" to="105" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Deberta</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2006.03654</idno>
		<title level="m">Decodingenhanced bert with disentangled attention</title>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">General program synthesis benchmark suite</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Helmuth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Spector</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation</title>
		<meeting>the 2015 Annual Conference on Genetic and Evolutionary Computation</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="1039" to="1046" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Hendrycks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Basart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kadavath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mazeika</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Arora</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Burns</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Puranik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2105.09938</idno>
		<title level="m">Measuring coding challenge competence with apps</title>
		<imprint>
			<date type="published" when="2021" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">On the naturalness of software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Hindle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">T</forename><surname>Barr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Su</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gabel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Devanbu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2012 34th International Conference on Software Engineering (ICSE)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="837" to="847" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<monogr>
		<title level="m" type="main">The curious case of neural text degeneration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Holtzman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Buys</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Forbes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Choi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<monogr>
		<title level="m" type="main">Codesearchnet challenge: Evaluating the state of semantic code search. ArXiv, abs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Husain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-H</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Gazit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Allamanis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Brockschmidt</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1909" />
		</imprint>
	</monogr>
	<note>Evaluating Large Language Models Trained on Code</note>
</biblStruct>

<biblStruct xml:id="b55">
	<monogr>
		<title level="m" type="main">Contrastive code representation learning. ArXiv, abs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Abbeel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">Bugfix: A learningbased tool to assist developers in fixing bugs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Jeffrey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE 17th International Conference on Program Comprehension</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="70" to="79" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<monogr>
		<title level="m" type="main">The economics of software quality</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Bonsignour</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
			<publisher>Addison-Wesley Professional</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">?</forename><surname>Kaiser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1511.08228</idno>
		<title level="m">Neural gpus learn algorithms</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b59">
	<monogr>
		<title level="m" type="main">Scaling laws for neural language models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kaplan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mccandlish</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Henighan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">B</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chess</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Child</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amodei</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<monogr>
		<title level="m" type="main">Alignment of language agents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Kenton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Everitt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Weidinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Gabriel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Mikulik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Irving</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2103.14659</idno>
		<imprint>
			<date type="published" when="2021" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b61">
	<monogr>
		<title level="m" type="main">Ctrl: A conditional transformer language model for controllable generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">S</forename><surname>Keskar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Mccann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">R</forename><surname>Varshney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Socher</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">Application of dynamic slicing in program debugging</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Korel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rilling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AADEBUG</title>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<monogr>
		<title level="m" type="main">Genetic programming III: Darwinian invention and problem solving</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Koza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Andre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Keane</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Iii</forename><surname>Bennett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">H</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
			<publisher>Morgan Kaufmann</publisher>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<title level="a" type="main">Search-based pseudocode to code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kulal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Pasupat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Chandra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Padon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Aiken</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">S</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Spoc</surname></persName>
		</author>
		<ptr target="https://proceedings.neurips.cc/paper/2019/file/7298332f04ac004a0ca44cc69ecf6f6b-Paper.pdf" />
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<editor>Wallach, H., Larochelle, H., Beygelzimer, A., d&apos;Alch?-Buc, F., Fox, E., and Garnett, R.</editor>
		<imprint>
			<publisher>Curran Associates, Inc</publisher>
			<date type="published" when="2019" />
			<biblScope unit="volume">32</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<monogr>
		<title level="m" type="main">Open-sourcing gvisor, a sandboxed container runtime</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Lacasse</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<monogr>
		<title level="m" type="main">Unsupervised translation of programming languages</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M.-A</forename><surname>Lachaux</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Rozi?re</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Chanussot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Lample</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<pubPlace>ArXiv, abs</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<monogr>
		<title level="m" type="main">Improving the standard risk matrix: Part 1</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Leveson</surname></persName>
		</author>
		<ptr target="http://sunnyday.mit.edu/Risk-Matrix.pdf" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">L</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Ko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Begel</surname></persName>
		</author>
		<title level="m">What distinguishes great software engineers? Empirical Software Engineering</title>
		<imprint>
			<date type="published" when="2020" />
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="322" to="352" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<analytic>
		<title level="a" type="main">Latent predictor networks for code generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Ling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Blunsom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Grefenstette</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">M</forename><surname>Hermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ko?isk?</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Senior</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (ACL)</title>
		<meeting>the 54th Annual Meeting of the Association for Computational Linguistics (ACL)</meeting>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="599" to="609" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Goyal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Joshi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Levy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lewis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zettlemoyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Stoyanov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Roberta</surname></persName>
		</author>
		<title level="m">A robustly optimized bert pretraining approach. ArXiv, abs</title>
		<imprint>
			<date type="published" when="1907" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b71">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Batra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Parikh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Vilbert</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1908.02265</idno>
		<title level="m">Pretraining taskagnostic visiolinguistic representations for vision-and-language tasks</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b72">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Svyatkovskiy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Blanco</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Clement</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Drain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Shou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Tufano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Duan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Sundaresan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Codexglue</surname></persName>
		</author>
		<idno>abs/2102.04664</idno>
		<title level="m">A machine learning benchmark dataset for code understanding and generation</title>
		<imprint>
			<publisher>ArXiv</publisher>
			<date type="published" when="2021" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b73">
	<analytic>
		<title level="a" type="main">Structured generative models of natural source code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Maddison</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tarlow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 31st International Conference on International Conference on Machine Learning (ICML)</title>
		<meeting>the 31st International Conference on International Conference on Machine Learning (ICML)</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page">649</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b74">
	<monogr>
		<title level="m" type="main">Toward automatic program synthesis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Manna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">J</forename><surname>Waldinger</surname></persName>
		</author>
		<idno type="DOI">10.1145/362566.362568</idno>
		<ptr target="https://doi.org/10.1145/362566.362568" />
		<imprint>
			<date type="published" when="1971-03" />
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="151" to="165" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b75">
	<analytic>
		<title level="a" type="main">Recalibrating global data center energy-use estimates</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Masanet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Shehabi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Lei</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Koomey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<biblScope unit="volume">367</biblScope>
			<biblScope unit="issue">6481</biblScope>
			<biblScope unit="page" from="984" to="986" />
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Menezes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Van Oorschot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Vanstone</surname></persName>
		</author>
		<ptr target="https://books.google.com/books?id=YyCyDwAAQBAJ" />
		<title level="m">Handbook of Applied Cryptography. Discrete Mathematics and Its Applications</title>
		<imprint>
			<publisher>CRC Press</publisher>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<monogr>
		<title level="m" type="main">Generating high fidelity images with subscale pixel networks and multidimensional upscaling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Menick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Kalchbrenner</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b78">
	<analytic>
		<title level="a" type="main">Distributed representations of words and phrases and their compositionality</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">S</forename><surname>Corrado</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dean</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="3111" to="3119" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b79">
	<monogr>
		<title level="m" type="main">Backstabber&apos;s knife collection: A review of open source software supply chain attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ohm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Plate</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sykosch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Meier</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b80">
	<monogr>
		<title level="m" type="main">Comment regarding request for comments on intellectual property protection for artificial intelligence innovation. Before the United States Patent and Trademark Office Department of Commerce</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>O&amp;apos;keefe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lansky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Payne</surname></persName>
		</author>
		<ptr target="https://perma.cc/ZS7G-2QWF" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b81">
	<monogr>
		<title level="m" type="main">15-1252.00 -software developers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>O*net</surname></persName>
		</author>
		<ptr target="https://www.onetonline.org/link/summary/15-1252.00" />
		<imprint>
			<date type="published" when="2021" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b82">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Oord</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dieleman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Simonyan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Vinyals</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Kalchbrenner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Senior</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Wavenet</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1609.03499</idno>
		<title level="m">A generative model for raw audio</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b83">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Oord</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Vinyals</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1807.03748</idno>
		<title level="m">Representation learning with contrastive predictive coding</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b84">
	<monogr>
		<title level="m" type="main">Automatic programming: The open issue? Genetic Programming and Evolvable Machines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>O&amp;apos;neill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Spector</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019" />
			<biblScope unit="page" from="1" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b85">
	<analytic>
		<title level="a" type="main">On the difficulty of benchmarking inductive program synthesis methods</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Helmuth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mcphee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">F</forename><surname>Spector</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Genetic and Evolutionary Computation Conference Companion</title>
		<meeting>the Genetic and Evolutionary Computation Conference Companion</meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="1589" to="1596" />
		</imprint>
	</monogr>
	<note>Evaluating Large Language Models Trained on Code Pantridge,</note>
</biblStruct>

<biblStruct xml:id="b86">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Patterson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Le</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L.-M</forename><surname>Munguia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Rothchild</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>So</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Texier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dean</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2104.10350</idno>
		<title level="m">Carbon emissions and large neural network training</title>
		<imprint>
			<date type="published" when="2021" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b87">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">E</forename><surname>Peters</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Neumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Iyyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gardner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zettlemoyer</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1802.05365</idno>
		<title level="m">Deep contextualized word representations</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b88">
	<monogr>
		<title level="m" type="main">Learning compositional neural programs with recursive tree search and planning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Pierrot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Ligner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Reed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Sigaud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Perrin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Laterre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Beguir</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Freitas</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2021" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b89">
	<monogr>
		<title level="m" type="main">The economic impacts of inadequate infrastructure for software testing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Planning</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
		<respStmt>
			<orgName>National Institute of Standards and Technology</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b90">
	<monogr>
		<title level="m" type="main">Python Software Foundation and JetBrains. Python developers survey 2020 results</title>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
	<note>URL https</note>
</biblStruct>

<biblStruct xml:id="b91">
	<analytic>
		<title level="a" type="main">An analysis of patch plausibility and correctness for generate-and-validate patch generation systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Qi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Long</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Achour</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rinard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2015 International Symposium on Software Testing and Analysis</title>
		<meeting>the 2015 International Symposium on Software Testing and Analysis</meeting>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b92">
	<monogr>
		<title level="m" type="main">Improving language understanding by generative pre-training</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Narasimhan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Salimans</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b93">
	<monogr>
		<title level="m" type="main">Language models are unsupervised multitask learners</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Child</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Luan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Amodei</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b94">
	<monogr>
		<title level="m" type="main">Learning transferable visual models from natural language supervision</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">W</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hallacy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ramesh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Goh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Sastry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Askell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Mishkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Clark</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2103.00020</idno>
		<imprint>
			<date type="published" when="2021" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b95">
	<analytic>
		<title level="a" type="main">Exploring the limits of transfer learning with a unified text-to-text transformer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Raffel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">M</forename><surname>Shazeer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Roberts</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Narang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Matena</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Liu</surname></persName>
		</author>
		<idno>abs/1910.10683</idno>
	</analytic>
	<monogr>
		<title level="j">ArXiv</title>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b96">
	<analytic>
		<title level="a" type="main">Zero-shot text-to-image generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ramesh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Pavlov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Goh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Voss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
		<idno>abs/2102.12092</idno>
	</analytic>
	<monogr>
		<title level="j">ArXiv</title>
		<imprint>
			<date type="published" when="2021" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b97">
	<monogr>
		<title level="m" type="main">Neural programmer-interpreters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Reed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>De Freitas</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b98">
	<monogr>
		<title level="m" type="main">Codebleu: a method for automatic evaluation of code synthesis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Sundaresan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Blanco</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ma</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2009.10297</idno>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b99">
	<analytic>
		<title level="a" type="main">Biological structure and function emerge from scaling unsupervised learning to 250 million protein sequences</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rives</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Meier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Sercu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Goyal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">L</forename><surname>Zitnick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of the National Academy of Sciences</title>
		<imprint>
			<biblScope unit="volume">118</biblScope>
			<biblScope unit="issue">15</biblScope>
			<biblScope unit="page">2021</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b100">
	<analytic>
		<title level="a" type="main">Sourcefinder: Finding malware source-code from publicly available repositories in github</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">O F</forename><surname>Rokon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Islam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Darki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">E</forename><surname>Papalexakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Faloutsos</surname></persName>
		</author>
		<idno>978-1-939133- 18-2</idno>
		<ptr target="https://www.usenix.org/conference/raid2020/presentation/omar" />
	</analytic>
	<monogr>
		<title level="m">23rd International Symposium on Research in Attacks, Intrusions and Defenses</title>
		<meeting><address><addrLine>San Sebastian</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2020-10" />
			<biblScope unit="page" from="149" to="163" />
		</imprint>
	</monogr>
	<note>RAID 2020)</note>
</biblStruct>

<biblStruct xml:id="b101">
	<monogr>
		<title level="m" type="main">You autocomplete me: Poisoning vulnerabilities in neural code completion. The Advanced Computing Systems Association</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Schuster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Tromer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Shmatikov</surname></persName>
		</author>
		<ptr target="https://www.usenix.org/system/files/sec21summerschuster.pdf" />
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b102">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Schwartz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dodge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">A</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Etzioni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Green</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ai</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b103">
	<analytic>
		<title level="a" type="main">Improving neural program synthesis with inferred execution traces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">C</forename><surname>Shin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Polosukhin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="page" from="8917" to="8926" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b104">
	<analytic>
		<title level="a" type="main">Experiments with a heuristic compiler</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">A</forename><surname>Simon</surname></persName>
		</author>
		<idno type="DOI">10.1145/321186.321192</idno>
		<ptr target="https://insights.stackoverflow.com/survey/2020#overview" />
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="493" to="506" />
			<date type="published" when="1963-10" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
