<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /nfs/home/kabenamualus/Research/task-dataset-metric-extraction/../grobid-0.6.0/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Loss-Sensitive Generative Adversarial Networks on Lipschitz Densities</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guo-Jun</forename><surname>Qi</surname></persName>
							<email>guojun.qi@ucf.edu</email>
							<affiliation key="aff0">
								<orgName type="laboratory">Laboratory for MAchine Perception and LEarning</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">University of Central Florida</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Loss-Sensitive Generative Adversarial Networks on Lipschitz Densities</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.6.0" ident="GROBID-SDO" when="2022-11-11T14:02+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid-sdo"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Generative Adversarial Nets (GANs)</term>
					<term>Lipschitz regularity</term>
					<term>Minimum Reconstruc- tion Error (MRE)</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>In this paper, we present the Lipschitz regularization theory and algorithms for a novel Loss-Sensitive Generative Adversarial Network (LS-GAN). Specifically, it trains a loss function to distinguish between real and fake samples by designated margins, while learning a generator alternately to produce realistic samples by minimizing their losses. The LS-GAN further regularizes its loss function with a Lipschitz regularity condition on the density of real data, yielding a regularized model that can better generalize to produce new data from a reasonable number of training examples than the classic GAN. We will further present a Generalized LS-GAN (GLS-GAN) and show it contains a large family of regularized GAN models, including both LS-GAN and Wasserstein GAN, as its special cases. Compared with the other GAN models, we will conduct experiments to show both LS-GAN and GLS-GAN exhibit competitive ability in generating new images in terms of the Minimum Reconstruction Error (MRE) assessed on a separate test set. We further extend the LS-GAN to a conditional form for supervised and semi-supervised learning problems, and demonstrate its outstanding performance on image classification tasks.</p><p>We further present a generalized form of LS-GAN (GLS-GAN) and conduct experiment to demonstrate it has the best generalization ability. We will show this is not a surprising result as the GLS-GAN contains a large family of regularized GANs with both LS-GAN and Wasserstein GAN (WGAN) [2] as its special cases. Moreover, we will extend a Conditional LS-GAN (CLS-GAN) that can generate samples from given conditions. In particular, with class labels being conditions, the learned loss function can be used as a classifier for both supervised and semi-supervised learning. The advantage of such a classifier arises from its ability of exploring generated examples to uncover intrinsic variations for different classes. Experiment results demonstrate competitive performance of the CLS-GAN classifier compared with the state-of-the-art models.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>A classic Generative Adversarial Net (GAN) <ref type="bibr" target="#b14">[13]</ref> learns a discriminator and a generator by playing a two-player minimax game to generate samples from a data distribution. The discriminator is trained to distinguish real samples from those generated by the generator, and it in turn guides the generator to produce realistic samples that can fool the discriminator.</p><p>However, from both theoretical and practical perspectives, a critical question is whether the GAN can generate realistic samples from arbitrary data distribution without any prior? If not, what kind of prior ought to be imposed on the data distribution to regularize the GAN? Indeed, the classic GAN <ref type="bibr" target="#b14">[13]</ref> imposes no prior on the data distribution. This represents an ambitious goal to generate samples from any distributions. However, it in turn requires a non-parametric discriminator to prove the distributional consistency between generated and real samples by assuming the model has infinite capacity (see Section 4 of <ref type="bibr" target="#b14">[13]</ref>). This is a too strong assumption to establish the theoretical basis for the GAN. Moreover, with such an assumption, its generalizability becomes susceptible. Specifically, one could argue the learned generator may be overfit by an unregularized discriminator in an non-parametric fashion G.-J. Qi by merely memorizing or interpolating training examples. In other words, it could lack the generalization ability to generate new samples out of existing data. Indeed, Arora et al. <ref type="bibr" target="#b2">[3]</ref> have shown that the GAN minimizing the Jensen-Shannon distance between the distributions of generated and real data could fail to generalize to produce new samples with a reasonable size of training set. Thus, a properly regularized GAN is demanded to establish provable generalizability by focusing on a restricted yet still sufficiently large family of data distributions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Objective: Towards Regularized GANs</head><p>In this paper, we attempt to develop regularization theory and algorithms for a novel Loss-Sensitive GAN (LS-GAN). Specifically, we introduce a loss function to quantify the quality of generated samples. A constraint is imposed so that the loss of a real sample should be smaller than that of a generated counterpart. Specifically, in the learning algorithm, we will define margins to separate the losses between generated and real samples. Then, an optimal generator will be trained to produce realistic samples with minimum losses. The loss function and the generator will be trained in an adversarial fashion until generated samples become indistinguishable from real ones.</p><p>We will also develop new theory to analyze the LS-GAN on the basis of Lipschitz regularity. We note that the reason of making non-parametric assumption of infinite capacity on the discriminator in the classic GAN is due to its ambitious goal to generate data from any arbitrary distribution. However, no free lunch <ref type="bibr" target="#b36">[35]</ref> principle reminds us of the need to impose a suitable prior on the data distribution from which real samples are generated. This inspires us to impose a Lipschitz regularity condition by assuming the data density does not change abruptly. Based on this mild condition, we will show that the density of generated samples by LS-GAN can exactly match that of real data.</p><p>More importantly, the Lipschitz regularity allows us to prove the LS-GAN can well generalize to produce new data from training examples. To this end, we will provide a Probably Approximate Correct (PAC)-style theorem by showing the empirical LS-GAN model trained with a reasonable number of examples can be sufficiently close to the oracle LS-GAN trained with hypothetically known data distribution, thereby proving the generalizability of LS-GAN in generating samples from any Lipschitz data distribution.</p><p>We will also make a non-parametric analysis of the LS-GAN. It does not rely on any parametric form of the loss function to characterize its optimality in the space of Lipschtiz functions. It gives both the upper and lower bounds of the optimal loss, which are cone-shaped with non-vanishing gradient. This suggests that the LS-GAN can provide sufficient gradient to update its LS-GAN generator even if the loss function has been fully optimized, thus avoiding the vanishing gradient problem that could occur in training the GAN <ref type="bibr" target="#b0">[1]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Paper Structure</head><p>The remainder of this paper is organized as follows. Section 2 reviews the related work, and the proposed LS-GAN is presented in Section 3. In Section 4, we will analyze the LS-GAN by proving the distributional consistency between generated and real data with the Lipschitz regularity condition on the data distribution. In Section 5, we will discuss the generalizability problem arising from using sample means to approximate the expectations in the training objectives. We will make a comparison with Wasserstein GAN (WGAN) in Section 6.1, and present a generalized LS-GAN with both WGAN and LS-GAN as its special cases in Section 6.2. A non-parametric analysis of the algorithm is followed in Section 7. Then we will show how the model can be extended to a conditional model for both supervised and semi-supervised learning in Section 8. Experiment results are presented in Section 9, and we conclude in Section 10. Source codes. The source codes for both LS-GAN and GLS-GAN are available at https:// github.com/maple-research-lab, in the frameworks of torch, pytorch and tensorflow. LS-GAN is also supported by Microsoft CNTK at https://www.cntk.ai/pythondocs/CNTK_206C_WGAN_ LSGAN.html.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>Deep generative models, especially the Generative Adversarial Net (GAN) <ref type="bibr" target="#b14">[13]</ref>, have attracted many attentions recently due to their demonstrated abilities of generating real samples following the underlying data densities. In particular, the GAN attempts to learn a pair of discriminator and generator by playing a maximin game to seek an equilibrium, in which the discriminator is trained by distinguishing real samples from generated ones and the generator is optimized to produce samples that can fool the discriminator.</p><p>A family of GAN architectures have been proposed to implement this idea. For example, recent progresses <ref type="bibr" target="#b30">[29,</ref><ref type="bibr" target="#b32">31]</ref> have shown impressive performances on synthesizing photo-realistic images by constructing multiple strided and factional-strided convolutional layers for discriminators and generators. On the contrary, <ref type="bibr" target="#b9">[8]</ref> proposed to use a Laplacian pyramid to produce high-quality images by iteratively adding multiple layers of noises at different resolutions. <ref type="bibr" target="#b18">[17]</ref> presented to train a recurrent generative model by using adversarial training to unroll gradient-based optimizations to create high quality images.</p><p>In addition to designing different GAN networks, research efforts have been made to train the GAN by different criteria. For example, <ref type="bibr" target="#b38">[37]</ref> presented an energy-based GAN by minimizing an energy function to learn an optimal discriminator, and an auto-encoder structured discriminator is presented to compute the energy. The authors also present a theoretical analysis by showing this variant of GAN can generate samples whose density can recover the underlying true data density. However, it still needs to assume the discriminator has infinite modeling capacity to prove the result in a non-parametric fashion, and its generalizability of producing new data out of training examples is unknown without theoretical proof or empirical evidence. In addition, <ref type="bibr" target="#b27">[26]</ref> presented to analyze the GAN from information theoretical perspective, and they seek to minimize the variational estimate of f-divergence, and show that the classic GAN is included as a special case of f-GAN. In contrast, InfoGAN <ref type="bibr" target="#b7">[6]</ref> proposed another information-theoretic GAN to learn disentangled representations capturing various latent concepts and factors in generating samples. Most recently, <ref type="bibr" target="#b1">[2]</ref> propose to minimize the Earth-Mover distance between the density of generated samples and the true data density, and they show the resultant Wasserstein GAN (WGAN) can address the vanishing gradient problem that the classic GAN suffers.</p><p>Besides the class of GANs, there exist other models that also attempt to generate natural images.</p><p>G.-J. Qi For example, <ref type="bibr" target="#b13">[12]</ref> rendered images by matching features in a convolutional network with respect to reference images. <ref type="bibr" target="#b11">[10]</ref> used deconvolutional network to render 3D chair models in various styles and viewpoints. <ref type="bibr" target="#b15">[14]</ref> introduced a deep recurrent neutral network architecture for image generation with a sequence of variational auto-encoders to iteratively construct complex images. Recent efforts have also been made on leveraging the learned representations by deep generative networks to improve the classification accuracy when it is too difficult or expensive to label sufficient training examples. For example, <ref type="bibr" target="#b20">[19]</ref> presented variational auto-encoders <ref type="bibr" target="#b21">[20]</ref> by combining deep generative models and approximate variational inference to explore both labeled and unlabeled data. <ref type="bibr" target="#b32">[31]</ref> treated the samples from the GAN generator as a new class, and explore unlabeled examples by assigning them to a class different from the new one. <ref type="bibr" target="#b31">[30]</ref> proposed to train a ladder network <ref type="bibr" target="#b35">[34]</ref> by minimizing the sum of supervised and unsupervised cost functions through back-propagation, which avoids the conventional layer-wise pre-training approach. <ref type="bibr" target="#b34">[33]</ref> presented an approach to learning a discriminative classifier by trading-off mutual information between observed examples and their predicted classes against an adversarial generative model. <ref type="bibr" target="#b12">[11]</ref> sought to jointly distinguish between not only real and generated samples but also their latent variables in an adversarial process. Recently, <ref type="bibr" target="#b29">[28]</ref> presented a novel paradigm of localized GANs to explore the local consistency of classifiers in local coordinate charts, as well as showed an intrinsic connection with Laplace-Beltrami operator along the manifold. These methods have shown promising results for classification tasks by leveraging deep generative models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Loss-Sensitive GAN</head><p>The classic GAN consists of two players -a generator producing samples from random noises, and a discriminator distinguishing real and fake samples. The generator and discriminator are trained in an adversarial fashion to reach an equilibrium in which generated samples become indistinguishable from their real counterparts.</p><p>On the contrary, in the LS-GAN we seek to learn a loss function L ? (x) parameterized with ? by assuming that a real example ought to have a smaller loss than a generated sample by a desired margin. Then the generator can be trained to generate realistic samples by minimizing their losses.</p><p>Formally, consider a generator function G ? that produces a sample G ? (z) by transforming a noise input z ? P z (z) drawn from a simple distribution P z such as uniform and Gaussian distributions. Then for a real example x and a generated sample G ? (z), the loss function can be trained to distinguish them with the following constraint:</p><formula xml:id="formula_0">L ? (x) ? L ? (G ? (z)) ? ?(x, G ? (z))<label>(1)</label></formula><p>where ?(x, G ? (z)) is the margin measuring the difference between x and G ? (z). This constraint requires a real sample be separated from a generated counterpart in terms of their losses by at least a margin of ?(x, G ? (z)). The above hard constraint can be relaxed by introducing a nonnegative slack variable ? x,z that quantifies the violation of the above constraint. This results in the following minimization problem to learn the loss function L ? given a fixed generator G ? * ,</p><formula xml:id="formula_1">min ?, ?x,z E x?P data L ? (x) + ? E x?P data z?Pz ? x,z<label>(2)</label></formula><formula xml:id="formula_2">s.t., L ? (x) ? ? x,z ? L ? (G ? * (z)) ? ?(x, G ? * (z)) ? x,z ? 0</formula><p>where ? is a positive balancing parameter, and P data (x) is the data distribution of real samples. The first term minimizes the expected loss function over data distribution since a smaller loss is preferred on real samples. The second term is the expected error caused by the violation of the constraint. Without loss of generality, we require the loss function should be nonnegative. Given a fixed loss function L ? * , on the other hand, one can solve the following minimization problem to find an optimal generator G ? * .</p><formula xml:id="formula_3">min ? E z?Pz(z) L ? * (G ? (z))<label>(3)</label></formula><p>We can use P G ? and P G ? * to denote the density of samples generated by G ? (z) and G ? * (z) respectively, with z being drawn from P z (z). However, for the simplicity of notations, we will use P G and P G * to denote P G ? and P G ? * without explicitly mentioning ? and ? * that should be clear in the context.</p><p>Finally, let us summarize the above objectives. The LS-GAN optimizes L ? and G ? alternately by seeking an equilibrium (? * , ? * ) such that ? * minimizes</p><formula xml:id="formula_4">S(?, ? * ) = E x?P data L ? (x) + ? E x?P data z G ?P G * ?(x, z G ) + L ? (x) ? L ? (z G ) +<label>(4)</label></formula><p>which is an equivalent form of (2) with (a) + = max(a, 0), and ? * minimizes</p><formula xml:id="formula_5">T (? * , ?) = E z G ?P G L ? * (z G ).<label>(5)</label></formula><p>In the next section, we will show the consistency between P G * and P data for LS-GAN.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Theoretical Analysis: Distributional Consistency</head><p>Suppose (? * , ? * ) is a Nash equilibrium that jointly solves (4) and <ref type="bibr" target="#b4">(5)</ref>. We will show that as ? ? +?, the density distribution P G * of the samples generated by G ? * will converge to the real data density P data .</p><p>First, we have the following definition. Definition. For any two samples x and z, the loss function F (x) is Lipschitz continuous with respect to a distance metric ? if</p><formula xml:id="formula_6">|F (x) ? F (z)| ? ? ?(x, z)</formula><p>with a bounded Lipschitz constant ?, i.e, ? &lt; +?.</p><p>To prove our main result, we assume the following regularity condition on the data density.</p><p>Assumption 1. The data density P data is supported in a compact set D, and it is Lipschitz continuous wrt ? with a bounded constant ? &lt; +?.</p><p>The set of Lipschitz densities with a compact support contain a large family of distributions that are dense in the space of continuous densities. For example, the density of natural images are defined over a compact set of pixel values, and it can be consider as Lipschitz continuous, since the densities of two similar images are unlikely to change abruptly at an unbounded rate. If real samples are distributed on a manifold (or P data is supported in a manifold), we only require the Lipschitz condition hold on this manifold. This makes the Lipschitz regularity applicable to the data densities on a thin manifold embedded in the ambient space.</p><formula xml:id="formula_7">G.-J. Qi</formula><p>Let us show the existence of Nash equilibrium such that both the loss function L ? * and the density P G * of generated samples are Lipschitz. Let F ? be the class of functions over D with a bounded yet sufficiently large Lipschitz constant ? such that P data belongs to F ? . It is not difficult to show that the space F ? is convex and compact if its member functions are supported in a compact set. In addition, we note both S(?, ?) and T (?, ?) are convex in L ? and in P G . Then, according to the Sion's theorem <ref type="bibr" target="#b33">[32]</ref>, with L ? and P G being optimized over F ? , there exists a Nash equilibrium (? * , ? * ). Thus, we have the following lemma. Lemma 1. Under Assumption 1, there exists a Nash equilibrium (? * , ? * ) such that both L ? * and P G * are Lipschitz. Now we can prove the main lemma of this paper. The Lipschitz regularity relaxes the strong non-parametric assumption on the GAN's discriminator with infinite capacity to the above weaker Lipschitz assumption for the LS-GAN. This allows us to show the following lemma that establishes the distributional consistency between the optimal P G * by Problem (4)- <ref type="bibr" target="#b4">(5)</ref> and the data density P data . Lemma 2. Under Assumption 1, for a Nash equilibrium (? * , ? * ) in Lemma 1, we have</p><formula xml:id="formula_8">x |P data (x) ? P G * (x)|dx ? 2 ? Thus, P G * (x) converges to P data (x) as ? ? +?.</formula><p>The proof of this lemma is given in Appendix A.</p><p>Remark 1. By letting ? go infinitely large, the density P G * (x) of generated samples should exactly match the real data density P data (x). Equivalently, we can simply disregard the first loss minimization term in (4) as it plays no role as ? ? +?.</p><p>Putting the above two lemmas together, we have the following theorem.</p><p>Theorem 1. Under Assumption 1, a Nash equilibrium (? * , ? * ) exists such that (i) L ? * and P G * are Lipschitz.</p><formula xml:id="formula_9">(ii) x |P data (x) ? P G * (x)|dx ? 2 ? ? 0, as ? ? +?.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Learning and Generalizability</head><p>The minimization problems (4) and (5) cannot be solved directly since the expectations over the distributions of true data P data and noises P z are unavailable or intractable. Instead, one can approximate them with empirical means on a set of finite real examples X m = {x 1 , ? ? ? , x m } and noise vectors Z m = {z 1 , ? ? ? , z m } drawn from P data (x) and P z (z) respectively.</p><p>This results in the following two alternative problems.</p><formula xml:id="formula_10">min ? S m (?, ? * ) 1 m m i=1 L ? (x i ) + ? m m i=1 ?(x i , G ? * (z i )) + L ? (x i ) ? L ? (G ? * (z i )) +<label>(6)</label></formula><p>and</p><formula xml:id="formula_11">min ? T k (? * , ?) = 1 k k i=1 L ? * (G ? (z i ))<label>(7)</label></formula><p>where the random vectors Z k = {z i |i = 1, ? ? ? , k} used in <ref type="bibr" target="#b8">(7)</ref> can be different from Z m used in <ref type="bibr" target="#b7">(6)</ref>. The sample mean in the second term of Eq. (6) is computed over pairs (x i , G ? * (z i )) randomly drawn from real and generated samples, which is an approximation to the second expectation term in Eq. (4).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Generalizability</head><p>We have proved the density of generated samples by the LS-GAN is consistent with the real data density in Theorem 1. This consistency is established based on the two oracle objectives (4) and <ref type="bibr" target="#b4">(5)</ref>. However, in practice, the population expectations in these two objectives cannot be computed directly over P data and P G . Instead, they are approximated in (6) and <ref type="bibr" target="#b8">(7)</ref> by sample means on a finite set of real and generated examples.</p><p>This raises the question about the generalizability of the LS-GAN model. We wonder, with more training examples, if the empirical model trained with finitely many examples can generalize to the oracle model. In particular, we wish to estimate the sample complexity of how many examples are required to sufficiently bound the generalization difference between the empirical and oracle objectives.</p><p>Arora et al. <ref type="bibr" target="#b2">[3]</ref> has proposed a neural network distance to analyze the generalization ability for the GAN. However, this neural network distance cannot be directly applied here, as it is not related with the objectives that are used to train the LS-GAN. So the generalization ability in terms of the neural network distance does not imply the LS-GAN could also generalize. Thus, a direct generalization analysis of the LS-GAN is required based on its own objectives.</p><p>First, let us consider the generalization in terms of S(?, ? * ). This objective is used to train the loss function L ? to distinguish between real and generated samples. Consider the oracle objective To this end, we need to define the following notations about the model complexity.</p><p>Assumption 2. We assume that for LS-GAN,</p><formula xml:id="formula_12">I. the loss function L ? (x) is ? L -Lipschitz in its parameter ?, i.e., |L ? (x) ? L ? (x)| ? ? L ? ? ? for any x; II. L ? (x) is ?-Lipschitz in x, i.e., |L ? (x) ? L ? (x )| ? ? x ? x for any ?;</formula><p>III. the distance between two samples is bounded, i.e., |?(x, x )| ? B ? .</p><p>Then we can prove the following generalization theorem in a Probably Approximately Correct (PAC) style. Theorem 2. Under Assumption 2, with at least probability 1 ? ?, we have</p><formula xml:id="formula_13">|S m ? S| ? ? when the number of samples m ? CB 2 ? (? + 1) 2 ? 2 N log ? L N ? + log 1 ? ,</formula><p>where C is a sufficiently large constant, and N is the number of parameters of the loss function such that ? ? R N .</p><p>The proof of this theorem is given in Appendix C. This theorem shows the sample complexity to bound the difference between S and S m is polynomial in the model size N , as well as both Lipschitz constants log ? L and ?.</p><p>Similarly, we can establish the generalizability to train the generator function by considering the empirical objective</p><formula xml:id="formula_14">T k = min ? T k (? * , ?)</formula><p>and the oracle objective</p><formula xml:id="formula_15">T = min ? T (? * , ?)</formula><p>over empirical and real distributions, respectively. We use the following notions to characterize the complexity of the generator.</p><p>Assumption 3. We assume that</p><formula xml:id="formula_16">I. The generator function G ? (x) is ? G -Lipschitz in its parameter ?, i.e., |G ? (z) ? G ? (z)| ? ? G ? ? ? for any z; II. Also, we have G ? (z) is ?-Lipschitz in z, i.e., |G ? (z) ? G ? (z )| ? ? z ? z ;</formula><p>III. The samples z's drawn from P z are bounded, i.e., z ? B z .</p><p>Then we can prove the following theorem to establish the generalizability of the generator in terms of T (?, ?). Theorem 3. Under Assumption 3, with at least probability 1 ? ?, we have</p><formula xml:id="formula_17">|T k ? T | ? ? when the number of samples k ? C B 2 z ? 2 ? 2 ? 2 M log ? L ? G M ? + log 1 ? ,</formula><p>where C is a sufficiently large constant, and M is the number of parameters of the generator function such that ? ? R M .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Bounded Lipschitz Constants for Regularization</head><p>Our generalization theory in Theorem 2 conjectures that the required number of training examples is lower bounded by a polynomial of Lipschitz constants ? L and ? of the loss function wrt ? and x. This suggests us to bound both constants to reduce the sample complexity of the LS-GAN to improve its generalization performance.</p><p>Specifically, bounding the Lipschitz constants ? and ? L can be implemented by adding two gradient penalties (I) <ref type="bibr">1 2</ref>  <ref type="bibr" target="#b1">2</ref> to the objective (4) as the surrogate of the Lipschitz constants. For simplicity, we ignore the second gradient penalty (II) for ? L in experiments, as the sample complexity is only log-linear in it, whose impact on generalization performance is negligible compared with that of ?. Otherwise, penalizing (II) needs to compute its gradient wrt ?, which is E x?P data ? 2 ? L ? (x)? ? L ? (x) with a Hessian matrix ? 2 ? , and this is usually computationally demanding.</p><formula xml:id="formula_18">E x?P data ? x L ? (x) 2 and (II) 1 2 E x?P data ? ? L ? (x)</formula><p>Note that the above gradient penalty differs from that used in <ref type="bibr" target="#b16">[15]</ref> that aims to constrain the Lipschitz constant ? close to one as in the definition of the Wasserstein distance <ref type="bibr" target="#b1">[2]</ref>. However, we are motivated to have lower sample complexity by directly minimizing the Lipschitz constant rather than constraining it to one. Two gradient penalty approaches are thus derived from different theoretical perspectives, and also make practical differences in experiments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Wasserstein GAN and Generalized LS-GAN</head><p>In this section, we discuss two issues about LS-GAN. First, we discuss its connection with the Wasserstein GAN (WGAN), and then show that the WGAN is a special case of a generalized form of LS-GAN.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Comparison with Wasserstein GAN</head><p>We notice that the recently proposed Wasserstein GAN (WGAN) <ref type="bibr" target="#b1">[2]</ref> uses the Earth-Mover (EM) distance to address the vanishing gradient and saturated JS distance problems in the classic GAN by showing the EM distance is continuous and differentiable almost everywhere. While both the LS-GAN and the WGAN address these problems from different perspectives that are independently developed almost simultaneously, both turn out to use the Lipschitz regularity in training their GAN models. This constraint plays vital but different roles in the two models. In the LS-GAN, the Lipschitz regularity naturally arises from the Lipschitz assumption on the data density and the generalization bound. Under this regularity condition, we have proved in Theorem 1 that the density of generated samples matches the underlying data density. On the contrary, the WGAN introduces the Lipschitz constraint from the Kantorovich-Rubinstein duality of the EM distance but it is not proved in <ref type="bibr" target="#b1">[2]</ref> if the density of samples generated by WGAN is consistent with that of real data.</p><p>Here we assert that the WGAN also models an underlying Lipschitz density. To prove this, we restate the WGAN as follows. The WGAN seeks to find a critic f * w and a generator g * ? such that</p><formula xml:id="formula_19">f * w = arg max fw?F 1 U (f w , g * ? ) E x?P data [f w (x)] ? E z?Pz(z) [f w (g * ? (z))]<label>(8)</label></formula><p>and</p><formula xml:id="formula_20">g * ? = arg max V (f * w , g ? ) E z?Pz(z) [f * w (g ? (z))]<label>(9)</label></formula><p>Let P g * ? be the density of samples generated by g * ? . Then, we prove the following lemma about the WGAN in Appendix B. </p><formula xml:id="formula_21">(f * w , g * ? ) to the WGAN such that P g * ? is Lipschitz, we have x |P data (x) ? P g * ? (x)|dx = 0</formula><p>This lemma shows both the LS-GAN and the WGAN are based on the same Lipschitz regularity condition.</p><p>G.-J. Qi</p><p>Although both methods are derived from very different perspectives, it is interesting to make a comparison between their respective forms. Formally, the WGAN seeks to maximize the difference between the first-order moments of f w under the densities of real and generated examples. In this sense, the WGAN can be considered as a kind of first-order moment method. Numerically, as shown in the second term of Eq. (8), f w tends to be minimized to be arbitrarily small over generated samples, which could make U (f w , g * ? ) be unbounded above. This is why the WGAN must be trained by clipping the network weights of f w on a bounded box to prevent U (f w , g * ? ) from becoming unbounded above.</p><p>On the contrary, the LS-GAN treats real and generated examples in pairs, and maximizes the difference of their losses up to a data-dependant margin. Specifically, as shown in the second term of Eq. (4), when the loss of a generated sample z G becomes too large wrt that of a paired real example x, the maximization of</p><formula xml:id="formula_22">L ? (z G ) will stop if the difference L ? (z G ) ? L ? (x) exceeds ?(x, z G ).</formula><p>This prevents the minimization problem (4) unbounded below, making it better posed to solve.</p><p>More importantly, paring real and generated samples in (?) + prevents their losses from being decomposed into two separate first-order moments like in the WGAN. The LS-GAN makes pairwise comparison between the losses of real and generated samples, thereby enforcing real and generated samples to coordinate with each other to learn the optimal loss function. Specifically, when a generated sample becomes close to a paired real example, the LS-GAN will stop increasing the difference L ? (z G ) ? L ? (x) between their losses.</p><p>Below we discuss a Generalized LS-GAN (GLS-GAN) model in Section 6.2, and show that both WGAN and LS-GAN are simply two special cases of this GLS-GAN.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">GLS-GAN: Generalized LS-GAN</head><p>In proving Lemma 2, it is noted that we only have used two properties of (a) + in the objective function S ? (?, ? * ) training the loss function L ? : 1) (a) + ? a for any a; 2) (a) + = a for a ? 0. This inspires us to generalize the LS-GAN with any alternative cost function C(a) satisfying these two properties, and this will yield the Generalized LS-GAN (GLS-GAN).</p><p>We will show that both LS-GAN and WGAN can be seen as two extreme cases of this GLS-GAN with two properly defined cost functions.</p><p>Formally, if a cost function C(a) satisfies (I) C(a) ? a for any a ? R and (II) C(a) = a for any a ? R + , given a fixed generator G ? * , we use the following objective</p><formula xml:id="formula_23">S C (?, ? * ) = E x?P data (x) z?Pz(z) C ?(x, G ? * (z)) + L ? (x) ? L ? (G ? * (z))</formula><p>to learn L ? (x), with S C highlighting its dependency on a chosen cost function C.</p><p>For simplicity, we only involve the second term in (4) to define the generalized objective S C . But it does not affect the conclusion as the role of the first term in (4) would vanish with ? being set to +?. Following the proof of Lemma 2, we can prove the following lemma.</p><p>Lemma 4. Under Assumption 1, given a Nash equilibrium (? * , ? * ) jointly minimizing S C (?, ? * ) and T (? * , ?) with a cost function C satisfying the above conditions (I) and (II), we have</p><formula xml:id="formula_24">x |P data (x) ? P G * (x)|dx = 0.</formula><p>In particular, we can choose a leaky rectified linear function for this cost function, i.e., C ? (a) = max(a, ?a) with a slope ?. As long as ? ? (??, 1], it is easy to verify C ? (a) satisfies these two conditions. Now the LS-GAN is a special case of this Generalized LS-GAN (GLS-GAN) when ? = 0, as C 0 (a) = (a) + . We denote this equivalence as</p><formula xml:id="formula_25">LS-GAN = GLS-GAN(C 0 )</formula><p>What is more interesting is the WGAN, an independently developed GAN model with stable training performance, also becomes a special case of this GLS-GAN with ? = 1. Indeed, when ? = 1, C 1 (a) = a, and</p><formula xml:id="formula_26">S C 1 (?, ? * ) = E x?P data (x) z?Pz(z) ?(x, G ? * (z)) + L ? (x) ? L ? (G ? * (z)) = E x?P data (x) L ? (x) ? E z?Pz(z) L ? (G ? * (z)) + E x?P data (x) z?Pz(z) ?(x, G ? * (z))</formula><p>Since the last term Ex?P data ,z?Pz ?(x, G ? * (z)) is a const, irrespective of L ? , it can be discarded without affecting optimization over L ? . Thus, we have</p><formula xml:id="formula_27">S C 1 (?, ? * ) = E x?P data (x) L ? (x) ? E z?Pz(z) L ? (G ? * (z))</formula><p>By comparing this S C 1 with U in <ref type="formula" target="#formula_19">(8)</ref>, it is not hard to see that the WGAN is equivalent to the GLS-GAN with C 1 , with the critic function f w being equivalent to ?L ? 1 . Thus we have</p><formula xml:id="formula_28">WGAN = GLS-GAN(C 1 )</formula><p>Therefore, by varying the slope ? in (??, 1], we will obtain a family of the GLS-GANs with varied C ? beyond the LS-GAN and the WGAN. Of course, it is unnecessary to limit C(a) to a leaky rectified linear function. We can explore more cost functions as long as they satisfy the two conditions (I) and (II).</p><p>In experiments, we will demonstrate the GLS-GAN has competitive generalization performance on generating new images (c.f. Section 9.5).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Non-Parametric Analysis</head><p>Now we can characterize the optimal loss functions learned from the objective <ref type="bibr" target="#b7">(6)</ref>, and this will provide us an insight into the LS-GAN model.</p><p>We generalize the non-parametric maximum likelihood method in <ref type="bibr" target="#b4">[5]</ref> and consider non-parametric solutions to the optimal loss function by minimizing (6) over the whole class of Lipschitz loss functions.</p><p>Let   with the parameters ? * = [l * 1 , ? ? ? , l * 2m ] ? R 2m . They are supported in the convex hull of {x <ref type="bibr" target="#b0">(1)</ref> , ? ? ? , x (2m) }, and we have L ? * (x (i) ) = L ? * (x (i) ) = l * i for i = 1, ? ? ? , 2m, i.e., their values coincide on {x <ref type="bibr" target="#b0">(1)</ref> , x <ref type="bibr" target="#b1">(2)</ref> , ? ? ? , x (2m) }.</p><formula xml:id="formula_29">x (1) = x 1 , x (2) = x 2 , ? ? ? , x (m) = x m , x (m+1) = G ? * (z 1 ), ? ? ? , x (2m) = G ? * (z m ), i.e.,</formula><formula xml:id="formula_30">L ? * both minimize S m (?, ? * ) in F ? : L ? * (x) = max 1?i?2m l * i ? ??(x, x (i) ) + , L ? * (x) = min 1?i?2m l * i + ??(x, x (i) )}<label>(10)</label></formula><p>The proof of this theorem is given in the appendix. From the theorem, it is not hard to show that any convex combination of these two forms attains the same value of S m , and is also a global minimizer. Thus, we have the following corollary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Corollary 1. All the functions in</head><formula xml:id="formula_31">L ? * = {? L ? * + (1 ? ?) L ? * |0 ? ? ? 1} ? F ? minimize S m in F ? .</formula><p>This shows that the global minimizer is not unique. Moreover, through the proof of Theorem 4, one can find that L ? * (x) and L ? * (x) are the upper and lower bound of any optimal loss function solution to the problem <ref type="bibr" target="#b7">(6)</ref>. In particular, we have the following corollary.</p><p>Corollary 2. For any L ? * (x) ? F ? that minimizes S m , the corresponding L ? * (x) and L ? * (x) are the lower and upper bounds of L ? * (x), i.e.,</p><formula xml:id="formula_32">L ? * (x) ? L ? * (x) ? L ? * (x)</formula><p>The proof is given in Appendix D.</p><p>The parameters ? * = [l * 1 , ? ? ? , l * 2m ] in (10) can be sought by minimizing</p><formula xml:id="formula_33">S m (? * , ?) 1 m m i=1 l i + ? m m i=1 ? i,m+i + l i ? l m+i + s.t., |l i ? l i | ? ??(x (i) , x (i ) ) l i ? 0, i, i = 1, ? ? ? , 2m<label>(11)</label></formula><p>where ? i,j is short for ?(x (i) , x (j) ), and the constraints are imposed to ensure the learned loss functions stay in F ? . With a greater value of ?, a larger class of loss function will be sought. Thus, one can control the modeling ability of the loss function by setting a proper value to ?.</p><p>Problem <ref type="formula" target="#formula_0">(11)</ref> is a typical linear programming problem. In principle, one can solve this problem to obtain a non-parametric loss function for the LS-GAN. Unfortunately, it consists of a large number of constraints, whose scale is at an order of 2m 2 . This prevents us from using <ref type="formula" target="#formula_0">(11)</ref> directly to solve an optimal non-parametric LS-GAN model with a very large number of training examples. On the contrary, a more tractable solution is to use a parameterized network to solve the optimization problem (6) constrained in L ? , and iteratively update parameterized L ? and G ? with the gradient descent method.</p><p>Although the non-parametric solution cannot be solved directly, it is valuable in shedding some light on what kind of the loss function would be learned by a deep network. It is well known that the training of the classic GAN generator suffers from vanishing gradient problem as the discriminator can be optimized very quickly. Recent study <ref type="bibr" target="#b1">[2]</ref> has revealed that this is caused by using the Jensen-Shannon (JS) distance that becomes locally saturated and gets vanishing gradient to train the GAN generator if the discriminator is over-trained. Similar problem has also been found in the energy-based GAN (EBGAN) <ref type="bibr" target="#b38">[37]</ref> as it minimizes the total variation that is not continuous or (sub-)differentiable if the corresponding discriminator is fully optimized <ref type="bibr" target="#b1">[2]</ref>.</p><p>On the contrary, as revealed in Theorem 4 and illustrated in <ref type="figure" target="#fig_4">Figure 1</ref>, both the upper and lower bounds of the optimal loss function of the LS-GAN are cone-shaped (in terms of ?(x, x (i) ) that defines the Lipschitz continuity), and have non-vanishing gradient almost everywhere. Moreover, Problem (11) only contains linear objective and constraints; this is contrary to the classic GAN that involves logistic loss terms that are prone to saturation with vanishing gradient. Thus, an optimal loss function that is properly sought in L ? as shown in <ref type="figure" target="#fig_4">Figure 1</ref> is unlikely to saturate between these two bounds, and it should be able to provide sufficient gradient to update the generator by descending <ref type="bibr" target="#b8">(7)</ref> even if it has been trained till optimality. Our experiment also shows that, even if the loss function is quickly trained to optimality, it can still provide sufficient gradient to continuously update the generator in the LS-GAN (see <ref type="figure" target="#fig_10">Figure 5</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conditional LS-GAN</head><p>The LS-GAN can easily be generalized to produce a sample based on a given condition y, yielding a new paradigm of Conditional LS-GAN (CLS-GAN).</p><p>For example, if the condition is an image class, the CLS-GAN seeks to produce images of the given class; otherwise, if a text description is given as a condition, the model attempts to generate images aligned with the given description. This gives us more flexibility in controlling what samples to be generated.</p><p>Formally, the generator of CLS-GAN takes a condition vector y as input along with a noise vector z to produce a sample G ? (z, y). To train the model, we define a loss function L ? (x, y) to measure the degree of the misalignment between a data sample x and a given condition y.</p><p>G.-J. Qi For a real example x aligned with the condition y, its loss function should be smaller than that of a generated sample by a margin of ?(x, G ? (z, y)). This results in the following constraint,</p><formula xml:id="formula_34">L ? (x, y) ? L ? (G ? (z, y), y) ? ?(x, G ? (z, y))<label>(12)</label></formula><p>Like the LS-GAN, this type of constraint yields the following non-zero-sum game to train the CLS-GAN, which seeks a Nash equilibrium (? * , ? * ) so that ? * minimizes</p><formula xml:id="formula_35">S(?, ? * ) = E (x,y)?P data L ? (x, y)<label>(13)</label></formula><formula xml:id="formula_36">+ ? E (x,y)?P data z?Pz ?(x, G ? * (z, y)) + L ? (x, y) ? L ? (G ? * (z, y), y) + and ? * minimizes T (? * , ?) = E y?P data z?Pz L ? * (G ? (z, y), y)<label>(14)</label></formula><p>where P data denotes either the joint data distribution over (x, y) in (13) or its marginal distribution over y in <ref type="bibr" target="#b15">(14)</ref>. Playing the above game will lead to a trained pair of loss function L ? * and generator G ? * . We can show that the learned generator G ? * (z, y) can produce samples whose distribution follows the true data density P data (x|y) for a given condition y.</p><p>To prove this, we say a loss function L ? (x, y) is Lipschitz if it is Lipschitz continuous in its first argument x. We also impose the following regularity condition on the conditional density P data (x|y). Then it is not difficult to prove the following theorem, which shows that the conditional density P G * (x|y) becomes P data (x|y) as ? ? +?. Here P G * (x|y) denotes the density of samples generated by G ? * (z, y) with sampled random noise z. Theorem 5. Under Assumption 4, a Nash equilibrium (? * , ? * ) exists such that (i) L ? * (x, y) is Lipschitz continuous in x for each y; (ii) P G * (x|y) is Lipschitz continuous;</p><formula xml:id="formula_37">(iii) x |P data (x|y) ? P G * (x|y)|dx ? 2 ? .</formula><p>In addition, similar upper and lower bounds can be derived to characterize the learned conditional loss function L ? (x, y) following the same idea for LS-GAN.</p><p>A useful byproduct of the CLS-GAN is one can use the learned loss function L ? * (x, y) to predict the label of an example x by y * = arg min y L ? * (x, y)</p><p>The advantage of such a CLS-GAN classifier is it is trained with both labeled and generated examples, the latter of which can improve the training of the classifier by revealing more potential variations within different classes of samples. It also provides a way to evaluate the model based on its classification performance. This is an objective metric we can use to assess the quality of feature representations learned by the model. For a classification task, a suitable value should be set to ?. Although Theorem 5 shows P G * would converge to the true conditional density P data by increasing ?, it only ensures it is a good generative rather than classification model. However, a too large value of ? tends to ignore the first loss minimization term of (13) that plays an important role in minimizing classification error. Thus, a trade-off should be made to balance between classification and generation objectives.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1">Semi-Supervised LS-GAN</head><p>The above CLS-GAN can be considered as a fully supervised model to classify examples into different classes. It can also be extended to a Semi-Supervised model by incorporating unlabeled examples.</p><p>Suppose we have c classes indexed by {1, 2, ? ? ? , c}. In the CLS-GAN, for each class, we choose a loss function that, for example, can be defined as the negative log-softmax,</p><formula xml:id="formula_39">L ? (x, y = l) = ? log exp(a l (x)) c l=1 exp(a l (x))</formula><p>where a l (x) is the lth activation output from a network layer. Suppose we also have unlabeled examples available, and we can define a new loss function for these unlabeled examples so that they can be involved in training the CLS-GAN. Consider an unlabeled example x, its groundtruth label is unknown. However, the best guess of its label can be made by choosing the one that minimizes L ? (x, y = l) over l, and this inspires us to define the following loss function for the unlabeled example as</p><formula xml:id="formula_40">L ul ? (x) min l L ? (x, y = l)</formula><p>Here we modify L ? (x, y = l) to ? log exp(a l (x)) 1+ c l=1 exp(a l (x)) so 1 1+ c l=1 exp(a l (x)) can be viewed as the probability that x does not belong to any known label.</p><p>Then we have the following loss-sensitive objective that explores unlabeled examples to train the CLS-GAN,</p><formula xml:id="formula_41">S ul (?, ? * ) E x?P data (x) z?Pz(z) ?(x, G ? * (z)) + L ul ? (x) ? L ul ? (G ? * (z)) +</formula><p>This objective is combined with S(?, ? * ) defined in <ref type="bibr" target="#b14">(13)</ref> to train the loss function network by minimizing</p><formula xml:id="formula_42">S(?, ? * ) + ?S ul (?, ? * )</formula><p>where ? is a positive hyperparameter balancing the contributions from labeled and labeled examples. The idea of extending the GAN for semi-supervised learning has been proposed by Odena <ref type="bibr" target="#b28">[27]</ref> and Salimans et al. <ref type="bibr" target="#b32">[31]</ref>, where generated samples are assigned to an artificial class, and unlabeled examples are treated as the negative examples. Our proposed semi-supervised learning differs in creating a new loss function for unlabeled examples from the losses for existing classes, by minimizing which we make the best guess of the classes of unlabeled examples. The guessed labeled will provide additional information to train the CLS-GAN model, and the updated model will in turn improve the guess over the training course. The experiments in the following section will show that this approach can generate very competitive performance especially when the labeled data is very limited. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Experiments</head><p>Objective evaluation of a data generative model is not an easy task as there is no consensus criteria to quantify the quality of generated samples. For this reason, we will make a qualitative analysis of generated images, and use image classification to quantitatively evaluate the resultant LS-GAN model.</p><p>First, we will assess the quality of generated images by the LS-GAN in comparison with the classic GAN model. Then, we will make an objective evaluation on the CLS-GAN to classify images. This task evaluates the quality of feature representations learned by the CLS-GAN in terms of its classification accuracy directly.</p><p>Finally, we will assess the generalizability of various GAN models in generating new images out of training examples by proposing the Minimum Reconstruction Error (MRE) on a separate test set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.1">Architectures</head><p>We adopted the ideas behind the network architecture for the DCGAN <ref type="bibr" target="#b30">[29]</ref> to build the generator and the loss function networks. Compared with the conventional CNNs, maxpooling layers were replaced with strided convolutions in both networks, and fractionally-strided convolutions were used in the generator network to upsample feature maps across layers to finer resolutions. Batch-normalization layers were added in both networks between convolutional layers, and fully connected layers were removed from these networks.</p><p>However, unlike the DCGAN, the LS-GAN model (unconditional version in Section 3) did not use a sigmoid layer as the output for the loss function network. Instead, we removed it and directly . More details about the design of network architectures can be found in literature <ref type="bibr" target="#b30">[29]</ref>. <ref type="table" target="#tab_0">Table 1</ref> shows the network architecture for the CLS-GAN model on CIFAR-10 and SVHN datasets in the experiments. In particular, the architecture of the loss function network was adapted from that used in <ref type="bibr" target="#b34">[33]</ref> with nine hidden layers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.2">Training Details</head><p>The models were trained in a mini-batch of 64 images, and their weights were initialized from a zero-mean Gaussian distribution with a standard deviation of 0.02. The Adam optimizer <ref type="bibr" target="#b19">[18]</ref> was used to train the network with initial learning rate and ? 1 being set to 10 ?3 and 0.5 respectively, while the learning rate was annealed every 25 epochs by a factor of 0.8. The other hyperparameters such as ? and ? were chosen based on an independent validation set held out from training examples.</p><p>We also tested various forms of loss margins ?(?, ?) between real and fake samples. For example, we tried the L p distance between image representations as the margin, and found the best result can be achieved when p = 1. The distance between convolutional features was supposed to capture perceptual dissimilarity between images. But we should avoid a direct use of the convolutional features from the loss function network, since we found they would tend to collapse to a trivial point as the loss margin vanishes. The feature maps from a separate pretrained deep network, such as Inception and VGG-16 networks, could be a better choice to define the loss margin. <ref type="figure">Figure 2</ref> shows the images generated by LS-GAN on CelebA with the inception and VGG-16 margins.</p><p>However, for a fair comparison, we did not use these external deep networks in other experiments on image generation and classification tasks. We simply used the distance between raw images as the loss margin, and it still achieved competitive results. This demonstrates the robustness of the proposed method without having to choose a sophisticated loss margin. This is also consistent with our theoretical analysis where we do not assume any particular form of loss margin to prove the results.</p><p>For the generator network of LS-GAN, it took a 100-dimensional random vector drawn from G.-J. Qi </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.3">Generated Images by LS-GAN</head><p>First we made a qualitative comparison between the images generated by the DCGAN and the LS-GAN on the celebA dataset. <ref type="figure" target="#fig_1">Figure 3</ref> compares the visual quality of images generated by LS-GAN and DCGAN after they were trained for 25 epochs, and there was no perceptible difference between the qualities of their generated images.</p><p>However, the DCGAN architecture has been exhaustively fine-tuned in terms of the classic GAN training criterion to maximize the image generation performance. It was susceptible that its architecture could be fragile if we make some change to it. Here we tested if the LS-GAN can be more robust than the DCGAN when a structure change was made.</p><p>For example, one of the most key components in the DCGAN is the batch normalization inserted between the fractional convolution layers in the generator network. It has been reported in literature <ref type="bibr" target="#b32">[31]</ref> that the batch normalization not only plays a key role in training the DCGAN model, but also prevents the mode collapse of the generator into few data points.</p><p>The results were illustrated in <ref type="figure" target="#fig_0">Figure 4</ref>. If one removed the batch normalization layers from the generator, the DCGAN would collapse without producing any face images. On the contrary, the LS-GAN still performed very well even if these batch normalization layers were removed, and there was no perceived deterioration or mode collapse of the generated images. This shows that the LS-GAN was more resilient than the DCGAN.</p><p>We also analyzed the magnitude ( 2 norm) of the generator's gradient (in logarithmic scale) in <ref type="figure" target="#fig_10">Figure 5</ref> over iterations. With the loss function being updated every iteration, the generator was only updated every 1, 3, and 5 iterations. From the figure, we note that the magnitude of the generator's gradient, no matter how frequently the loss function was updated, gradually increased until it stopped at the same level. This implies the objective function to update the generator tended to be linear rather than saturated through the training process, which was consistent with our non-parametric analysis of the optimal loss function. Thus, it provided sufficient gradient to continuously update the generator. Furthermore, we compared the images generated with different frequencies of updating the loss function in <ref type="figure" target="#fig_17">Figure 6</ref>, where there was no noticeable difference   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.4">Image Classification</head><p>We conducted experiments on CIFAR-10 and SVHN to compare the classification accuracy of LS-GAN with the other approaches.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.4.1">CIFAR-10</head><p>The CIFAR dataset <ref type="bibr" target="#b22">[21]</ref> consists of 50,000 training images and 10, 000 test images on ten image categories. We tested the proposed CLS-GAN model with class labels as conditions. In the supervised training, all labeled examples were used to train the CLS-GAN.</p><p>We also conducted experiments with 400 labeled examples per class, which was a more chal-G.-J. Qi  <ref type="figure" target="#fig_17">Figure 6</ref>: Images generated by the LS-GAN on CelebA, where its generator is updated every three times (a) and every five times (b) the discriminator is updated. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Methods</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>All 400 per class</head><p>1 Layer K-means <ref type="bibr" target="#b30">[29]</ref> 80.6% 63.7% (? 0.7%) 3 Layer K-means Learned RF <ref type="bibr" target="#b8">[7]</ref> 82.0% 70.7%(? 0.7%) View Invariant K-means <ref type="bibr" target="#b17">[16]</ref> 81.9% 72.6%(? 0.7%) Examplar CNN <ref type="bibr" target="#b10">[9]</ref> 84.3% 77.4%(? 0.2%) Conditional GAN <ref type="bibr" target="#b24">[23]</ref> 83.6% 75.5%(? 0.4%) DCGAN <ref type="bibr" target="#b30">[29]</ref> 82.8% 73.8%(? 0.4%) Ladder Network <ref type="bibr" target="#b31">[30]</ref> -79.6%(? 0.5%) CatGAN <ref type="bibr" target="#b34">[33]</ref> -80.4%(? 0.4%) ALI <ref type="bibr" target="#b12">[11]</ref> -81.7% Improved GAN <ref type="bibr" target="#b32">[31]</ref> -81.4%(? 2.3%) CLS-GAN 91.7% 82.7%(? 0.5%) lenging task as much fewer labeled examples were used for training. In this case, the remaining unlabeled examples were used to train the model in a semi-supervised fashion as discussed in Section 8. In each mini-batch, the same number of labeled and unlabeled examples were used to update the model by stochastic gradient descent. The experiment results on this task were reported by averaging over ten subsets of labeled examples. Both hyperparameters ? and ? were chosen via a five-fold cross-validation on the labeled examples from {0.25, 0.5, 1.0, 2.0} and {0.5, 1.0, 2.0} respectively. Once they were chosen, the model was trained with the chosen hyperparameters on the whole training set, and the performance was reported based on the results on the test set. As in the improved GAN, we also adopted the weight normalization and feature matching mechanisms for the sake of the fair comparison.</p><p>We compared the proposed model with the state-of-the-art methods in literature. In particular, we compared with the conditional GAN <ref type="bibr" target="#b24">[23]</ref> as well as the DCGAN <ref type="bibr" target="#b30">[29]</ref>. For the sake of fair comparison, the conditional GAN shared the same architecture as the CLS-GAN. On the other hand, the DCGAN algorithm <ref type="bibr" target="#b30">[29]</ref> max-pooled the discriminator's convolution features from all </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Methods</head><p>Error rate KNN <ref type="bibr" target="#b30">[29]</ref> 77.93% TSVM <ref type="bibr" target="#b30">[29]</ref> 66.55% M1+KNN <ref type="bibr" target="#b20">[19]</ref> 65.63% M1+TSVM <ref type="bibr" target="#b20">[19]</ref> 54.33% M1+M2 <ref type="bibr" target="#b20">[19]</ref> 36.02% SWWAE w/o dropout <ref type="bibr" target="#b37">[36]</ref> 27.83% SWWAE with dropout <ref type="bibr" target="#b37">[36]</ref> 23.56% DCGAN <ref type="bibr" target="#b30">[29]</ref> 22.48% Conditional GAN <ref type="bibr" target="#b24">[23]</ref> 21.85%?0.38% Supervised CNN <ref type="bibr" target="#b30">[29]</ref> 28.87% DGN <ref type="bibr" target="#b20">[19]</ref> 36.02%?0.10% Virtual Adversarial <ref type="bibr" target="#b25">[24]</ref> 24.63% Auxiliary DGN <ref type="bibr" target="#b23">[22]</ref> 22.86% Skip DGN <ref type="bibr" target="#b23">[22]</ref> 16.61%?0.24% ALI <ref type="bibr" target="#b12">[11]</ref> 7.3% Improved GAN <ref type="bibr" target="#b32">[31]</ref> 8.11%?1.3%</p><p>CLS-GAN 5.98%? 0.27% layers to 4 ? 4 grids as the image features, and a L2-SVM was then trained to classify images. The DCGAN was an unsupervised model which had shown competitive performance on generating photo-realistic images. Its feature representations were believed to reach the state-of-the-art performance in modeling images with no supervision.</p><p>We also compared with the other recently developed supervised and semi-supervised models in literature, including the baseline 1 Layer K-means feature extraction pipeline, a multi-layer extension of the baseline model (3 Layer K-means Learned RF <ref type="bibr" target="#b8">[7]</ref>), View Invariant K-means <ref type="bibr" target="#b17">[16]</ref>, Examplar CNN <ref type="bibr" target="#b10">[9]</ref>, Ladder Network <ref type="bibr" target="#b31">[30]</ref>, as well as CatGAN <ref type="bibr" target="#b34">[33]</ref>. In particular, among the compared semi-supervised algorithms, the improved GAN <ref type="bibr" target="#b32">[31]</ref> had recorded the best performance in literature. Furthermore, we also compared with the ALI <ref type="bibr" target="#b12">[11]</ref> that extended the classic GAN by jointly generating data and inferring their representations, which achieved comparable performance to the Improved GAN. This pointed out an interesting direction to extend the CLS-GAN by directly inferring the data representation, and we will leave it in the future work. <ref type="table" target="#tab_1">Table 2</ref> compares the experiment results, showing the CSL-GAN successfully outperformed the compared algorithms in both fully-supervised and semi-supervised settings.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.4.2">SVHN</head><p>The SVHN (i.e., Street View House Number) dataset <ref type="bibr" target="#b26">[25]</ref> contains 32 ? 32 color images of house numbers collected by Google Street View. They were roughly centered on a digit in a house number, and the objective is to recognize the digit. The training set has 73, 257 digits while the test set consists of <ref type="bibr">26, 032.</ref> To test the model, 1, 000 labeled digits were used to train the model, which are uniformly G.-J. Qi  <ref type="figure">Figure 7</ref>: Images generated by CLS-GAN for MNIST, CIFAR-10 and SVHN. Images in a column are generated for the same class. In particular, the generated images on CIFAR-10 are airplane, automobile, bird, cat, deer, dog, frog, horse, ship and truck from the leftmost to the rightmost column.</p><p>selected from ten digit classes, that is 100 labeled examples per digit class. The remaining unlabeled examples were used as additional data to enhance the generative ability of CLS-GAN in semisupervised fashion. We expect a good generative model could produce additional examples to augment the training set. We used the same experiment setup and network architecture for CIFAR-10 to train the LS-GAN on this dataset. <ref type="table" target="#tab_2">Table 3</ref> reports the result on the SVHN, and it shows that the LS-GAN performed the best among the compared algorithms. <ref type="figure">Figure 7</ref> illustrates the generated images by CLS-GAN for MNIST, CIFAR-10 and SVHN datasets. On each dataset, images in a column were generated for the same class. On the MNIST and the SVHN, both handwritten and street-view digits are quite legible. Both also cover many variants for each digit class. For example, the synthesized MNIST digits have various writing styles, rotations and sizes, and the generated SVHN digits have various lighting conditions, sizes and even different co-occurring digits in the cropped bounding boxes. On the CIFAR-10 dataset, image classes can be recognized from the generated images although some visual details are missing. This is because the images in the CIFAR-10 dataset have very low resolution (32 ? 32 pixels), and most details are even missing from input examples.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.4.3">Analysis of Generated Images by CLS-GAN</head><p>We also observe that if we set a small value to the hyperparameter ?, the generated images would become very similar to each other within each class. As illustrated in <ref type="figure" target="#fig_13">Figure 8</ref>, the images were generated by halving ? used for generating images in <ref type="figure">Figure 7</ref>. A smaller ? means a relatively large weight was placed on the first loss minimization term of <ref type="bibr" target="#b7">(6)</ref>, which tends to collapse generated images to a single mode as it aggressively minimizes their losses to train the generator. This is also consistent with Theorem 5 where the density of generated samples with a smaller ? could have a larger deviation from the underlying density. One should avoid the collapse of trained generator since diversifying generated images can improve the classification performance of the CLS-GAN by revealing more intra-class variations. This will help improve the model's generalization ability as these variations could appear in future images.</p><p>However, one should also avoid setting too large value to ?. Otherwise, the role of the first loss minimization term could be underestimated, which can also adversely affect the classification results without reducing the training loss to a satisfactory level. Therefore, we choose a proper value for ? by cross-validation on the training set in the experiments.</p><p>In brief, the comparison between <ref type="figure">Figure 7</ref> and <ref type="figure" target="#fig_13">Figure 8</ref> reveals a trade-off between image generation quality and classification accuracy through the hyperparameter ?. Such a trade-off is intuitive: while a classification task usually focuses on learning class-invariant representations that do not change within a class, image generation should be able to capture many variant factors (e.g., lighting conditions, viewing angles, and object poses) so that it could diversify generated samples for each class. Although diversified examples can augment training dataset, it comes at a cost of trading class-invariance for modeling variant generation factors. Perhaps, this is an intrinsic dilemma between supervised learning and data generation that is worth more theoretical and empirical studies in future.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.5">Evaluation of Generalization Performances</head><p>Most of existing metrics like Inception Score <ref type="bibr" target="#b32">[31]</ref> for evaluating GAN models focus on comparing the qualities and diversities of their generated images. However, even though a GAN model can produce diverse and high quality images with no collapsed generators, it is still unknown if the model can generate unseen images out of given examples, or simply memorizing existing ones. While one of our main pursuits in this paper is a generalizable LS-GAN, we were motivated to propose the following Minimum Reconstruction Error (MRE) to compare its generalizability with various GANs.</p><p>Specifically, for an unseen test image x, we aim to find an input noise z that can best reconstruct x with the smallest error, i.e., min z x ? G(z) 1 , where G is the GAN generator under evaluation. Obviously, if G is adequate to produce new images, it should have a small reconstruction error on a separate test set that has not been used in training the model.</p><p>We assessed the GAN's generalizability on CIFAR-10 and tiny ImageNet datasets. On CIFAR-10, we split the dataset into 50% training examples, 25% validation examples and 25% test examples; the tiny ImageNet was split into training, validation and test sets in a ratio of 10:1:1. For a fair comparison, all the hyperparameters, including the number of epochs, were chosen based on the average MREs on the validation set, and the test MREs were reported for comparison. The optimal z's were iteratively updated on the validation and test sets by descending the gradient of the reconstruction errors.</p><p>In <ref type="figure" target="#fig_15">Figure 9</ref>, we compare the test MREs over 100 epochs by LS-GAN, GLS-GAN, WGAN <ref type="bibr" target="#b1">[2]</ref>, G.-J. Qi  WGAN-GP <ref type="bibr" target="#b16">[15]</ref> and DCGAN <ref type="bibr" target="#b30">[29]</ref> on CIFAR-10 respectively. For the sake of a fair comparison, all models were trained with the network architecture used in <ref type="bibr" target="#b30">[29]</ref>. The result clearly shows the regularized models, including GLS-GAN, LS-GAN, WGAN-GP and WGAN, have apparently better generalization performances than the unregularized DCGAN based on the classic GAN model. On CIFAR-10, the test MRE was reduced from 0.1506 by DCGAN to as small as 0.1109 and 0.1089 by WGAN and GLS-GAN respectively; on tiny ImageNet, the GLS-GAN reaches the smallest test MRE of 0.2085 among all compared regularized and unregularized GANs. In addition, the DCGAN exhibited fluctuating MREs on the CIFAR-10, while the regularized models steadily decreased the MREs over epochs. This implies regularized GANs have more stable training than the classic GAN.</p><p>We illustrate some examples of reconstructed images by different GANs on the test set along with their test MREs in <ref type="figure" target="#fig_4">Figure 11</ref>. The results show the GLS-GAN achieved the smallest test MRE of 0.1089 and 0.2085 with a LeakyReLU cost function of slope 0.01 and 0.5 on CIFAR-10 and tiny ImageNet, followed by the other regularized GAN models. This is not a surprising result since it has been shown in Section 6.2 that the other regularized GANs such as LS-GAN and WGAN are only special cases of the GLS-GAN model that covers larger family of models. Here we only considered LeakyReLU as the cost function for GLS-GAN. Of course, there exist many more cost functions satisfying the two conditions in Section 6.2 to expand the family of regularized GANs, which should have potentials of yielding even better generalization performances.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10">Conclusions</head><p>In this paper, we present a novel Loss-Sensitive GAN (LS-GAN) approach to generate samples from a data distribution. The LS-GAN learns a loss function to distinguish between generated and real samples, where the loss of a real sample should be smaller by a margin than that of a generated sample. Our theoretical analysis shows the distributional consistency between the real and generated samples based on the Lipschitz regularity. This no longer needs a non-parametric discriminator with infinite modeling ability in the classic GAN, allowing us to search for the optimal loss function in a smaller functional space with a bounded Lipschitz constant. Moreover, we prove the generalizability of LS-GAN by showing its required number of training examples is polynomial in its complexity. This suggests the generalization performance can be improved by penalizing the Lipschitz constants (via their gradient surrogates) of the loss function to reduce the sample complexity. Furthermore, our non-parametric analysis of the optimal loss function shows its lower and upper bounds are cone-shaped with non-vanishing gradient almost everywhere, implying the generator can be continuously updated even if the loss function is over-trained. Finally, we extend the LS-GAN to a Conditional LS-GAN (CLS-GAN) for semi-supervised tasks, and demonstrate it reaches competitive performances on both image generation and classification tasks.</p><p>Then, on one hand, we have</p><formula xml:id="formula_43">S(? * , ? * ) ? E x?P data (x) L ? * (x) + ? E x?P data (x) z G ?P G * (z G ) ?(x, z G ) + L ? * (x) ? L ? * (z G ) = x P data (x)L ? * (x)dx + ? E x?P data (x) z G ?P G * (z G ) ?(x, z G ) + ? x P data (x)L ? * (x)dx ? ? z G P G * (z G )L ? * (z G )dz G = x (1 + ?)P data (x) ? ?P G * (x) L ? * (x)dx + ? E x?P data (x) z G ?P G * (z G ) ?(x, z G )<label>(17)</label></formula><p>where the first inequality follows from (a) + ? a.</p><p>We also have T (? * , ? * ) ? T (? * , ?) for any G ? as ? * minimizes T (? * , ?). In particular, we can replace P G (x) in T (? * , ?) with P data (x), which yields</p><formula xml:id="formula_44">x L ? * (x)P G * (x)dx ? x L ? * (x)P data (x)dx.</formula><p>Applying this inequality into (17) leads to</p><formula xml:id="formula_45">S(? * , ? * ) ? x P data (x)L ? * (x)dx + ? E x?P data (x) z G ?P G * (z G ) ?(x, z G ) ? ? E x?P data (x) z G ?P G * (z G ) ?(x, z G )<label>(18)</label></formula><p>where the last inequality follows as L ? (x) is nonnegative. On the other hand, consider a particular loss function</p><formula xml:id="formula_46">L ? 0 (x) = ? ? (1 + ?)P data (x) + ?P G * (x) +<label>(19)</label></formula><p>When ? is a sufficiently small positive coefficient, L ? 0 (x) is a nonexpansive function (i.e., a function with Lipschitz constant no larger than 1.). This follows from the assumption that P data and P G are Lipschitz. In this case, we have</p><formula xml:id="formula_47">?(x, z G ) + L ? 0 (x) ? L ? 0 (z G ) ? 0<label>(20)</label></formula><p>By placing this L ? 0 (x) into S(?, ? * ), one can show that</p><formula xml:id="formula_48">S(? 0 , ? * ) = x (1 + ?)P data (x) ? ?P G * (x) L ? 0 (x)dx + ? E x?P data (x) z G ?P G * (z G ) ?(x, z G ) = ?? x ? (1 + ?)P data (x) + ?P G * (x) 2 + dx + ? E x?P data (x) z G ?P G * (z G ) ?(x, z G )</formula><p>where the first equality uses Eq. <ref type="bibr" target="#b21">(20)</ref>, and the second equality is obtained by substituting L ? 0 (x) in Eq. <ref type="bibr" target="#b20">(19)</ref> into the equation.</p><p>Assuming that (1 + ?)P data (x) ? ?P G * (x) &lt; 0 on a set of nonzero measure, the above equation would be strictly upper bounded by ? E</p><formula xml:id="formula_49">x?P data (x) z G ?P G * (z G )</formula><p>?(x, z G ) and we have</p><formula xml:id="formula_50">S(? * , ? * ) ? S(? 0 , ? * ) &lt; ? E x?P data (x) z G ?P G * (z G ) ?(x, z G )<label>(21)</label></formula><p>G.-J. Qi</p><p>This results in a contradiction with Eq. <ref type="bibr" target="#b19">(18)</ref>. Therefore, we must have</p><formula xml:id="formula_51">P data (x) ? ? 1 + ? P G * (x)<label>(22)</label></formula><p>for almost everywhere. By Lemma 5, we have</p><formula xml:id="formula_52">x |P data (x) ? P G * (x)|dx ? 2 ?</formula><p>Let ? ? +?, this leads to</p><formula xml:id="formula_53">x |P data (x) ? P G * (x)|dx ? 0</formula><p>This proves that P G * (x) converges to P data (x) as ? ? +?.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B Proof of Lemma 3</head><p>Proof. Suppose a pair of (f * w , g * ? ) jointly solve the WGAN problem. Then, on one hand, we have</p><formula xml:id="formula_54">U (f * w , g * ? ) = x f * w (x)P data (x)dx ? x f * w (x)P g * ? (x)dx ? 0<label>(23)</label></formula><p>where the inequality follows from V (f * w , g * ? ) ? V (f * w , g ? ) by replacing P g ? (x) with P data (x). Consider a particular f w (x) ?(P data (x) ? P g * ? (x)) + . Since P data (x) and P g * ? are Lipschitz by assumption, when ? is sufficiently small, it can be shown that f w (x) ? L 1 .</p><p>Substituting this f w into U (f w , g * ? ), we get</p><formula xml:id="formula_55">U (f w , g * ? ) = ? x (P data (x) ? P g * ? (x)) 2 + dx</formula><p>Let us assume P data (x) &gt; P g * ? (x) on a set of nonzero measure, we would have</p><formula xml:id="formula_56">U (f * w , g * ? ) ? U (f w , g * ? ) &gt; 0</formula><p>This leads to a contradiction with (23), so we must have P data (x) ? P g * ? (x) almost everywhere. Hence, by Lemma 5, we prove the conclusion that</p><p>x |P data (x) ? P g * ? (x)|dx = 0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C Proof of Theorem 2</head><p>For simplicity, throughout this section, we disregard the first loss minimization term in S(?, ? * ) and S m (?, ? * ), since the role of the first term would vanish as ? goes to +?. However, even if it is involved, the following proof still holds with only some minor changes.</p><p>To prove Theorem 2, we need the following lemma. The proof of this lemma needs to apply the McDiarmid's inequality and the fact that (?) + is an 1-Lipschitz to bound the difference |S m (?, ? * ) ? S(?, ? * )| for a loss function. Then, to get the union bound over all loss functions, a standard -net <ref type="bibr" target="#b2">[3]</ref> will be constructed to yield finite points that are dense enough to cover the parameter space of the loss functions. The proof details are given below.</p><p>Proof. For a loss function L ? , we compute S m (?, ? * ) over a set of m samples {(x i , z Gi )|1 ? i ? m} drawn from P data and P G * respectively.</p><p>To apply the McDiarmid's inequality, we need to bound the change of this function when a sample is changed. Denote by S i m (?, ? * ) when the jth sample is replaced with x i and z Gi . Then we have</p><formula xml:id="formula_57">|S m (?, ? * ) ? S i m (?, ? * )| = 1 m | ?(x i , z Gi ) + L ? (x i ) ? L ? (z Gi ) + ? ?(x i , z Gi ) + L ? (x i ) ? L ? (z Gi ) + | ? 1 m |?(x i , z Gi ) ? ?(x i , z Gi )| + 1 m |L ? (x i ) ? L ? (x i )| + 1 m |L ? (z Gi ) ? L ? (z Gi )| ? 1 m 2B ? + ??(x i , x i ) + ??(z Gi , z Gi ) ? 2 m (1 + ?)B ?</formula><p>where the first inequality uses the fact that (?) + is 1-Lipschitz, the second inequality follows from that ?(x, z G ) is bounded by B ? and L ? (x) is ?-Lipschitz in x. Now we can apply the McDiarmid's inequality. Noting that </p><formula xml:id="formula_58">S(?, ? * ) = E x i ?P data z Gi ?P G i=1,</formula><p>The above bound applies to a single loss function L ? . To get the union bound, we consider a ?/8? L -net N , i.e., for any L ? , there is a ? ? N in this net so that ? ? ? ? ?/8? L . This standard net can be constructed to contain finite loss functions such that |N | ? O(N log(? L N/?)), where 1, ? ? ? , T . Thus, a union bound over all generators should be considered in <ref type="bibr" target="#b25">(24)</ref>, and this makes the required number of training examples m become m ? CB 2 ? (? + 1) 2 N log(? L N/?) + log(T /?) ? 2 .</p><p>However, the iteration number T is usually much smaller than the model size N (which is often hundreds of thousands), and thus this factor will not affect the above lower bound of m.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D Proof of Theorem 4 and Corollary 2</head><p>We prove Theorem 4 as follows.</p><p>Proof. First, the existence of a minimizer follows from the fact that the functions in F ? form a compact set, and the objective function is convex.</p><p>To prove the minimizer has the two forms in <ref type="bibr" target="#b11">(10)</ref>, for each L ? ? F ? , let us consider</p><formula xml:id="formula_60">L ? (x) = max 1?i?n+m L ? (x (i) ) ? ??(x, x (i) ) + , L ? (x) = min 1?i?n+m L ? (x (i) ) + ??(x, x (i) )}</formula><p>It is not hard to verify that L ? (x (i) ) = L ? (x (i) ) and L ? (x (i) ) = L ? (x (i) ) for 1 ? i ? n + m. Indeed, by noting that L ? has its Lipschitz constant bounded by ?, we have L ? (x (j) )?L ? (x (i) ) ? ??(x (i) , x (j) ), and thus L ? (x (j) ) ? ??(x (i) , x (j) ) ? L ? (x (i) )</p><p>Because L ? (x (i) ) ? 0 by the assumption (i.e., it is lower bounded by zero), it can be shown that for all j L ? (x (j) ) ? ??(x (i) , x (j) ) + ? L ? (x (i) ).</p><p>Hence, by the definition of L ? (x) and taking the maximum over j on the left hand side, we have</p><formula xml:id="formula_61">L ? (x (i) ) ? L ? (x (i) )</formula><p>On the other hand, we have L ? (x (i) ) ? L ? (x (i) ) because L ? (x) ? L ? (x (i) ) ? ??(x, x (i) ) + for any x, and it is true in particular for x = x (i) . This shows L ? (x (i) ) = L ? (x (i) ). Similarly, one can prove L ? (x (i) ) = L ? (x (i) ). To show this, we have L ? (x (j) ) + ??(x (i) , x (j) ) ? L ? (x (i) ) by the Lipschitz continuity of L ? . By taking the minimum over j, we have L ? (x (i) ) ? L ? (x (i) ).</p><p>On the other hand, we have L ? (x (i) ) ? L ? (x (i) ) by the definition of L ? (x (i) ). Combining these two inequalities shows that L ? (x (i) ) = L ? (x (i) ). Now we can prove for any function L ? ? F ? , there exist L ? and L ? both of which attain the same value of S n,m as L ? , since S n,m only depends on the values of L ? on the data points {x (i) }. In particular, this shows that any global minimum in F ? of S n,m can also be attained by the corresponding functions of the form (10). By setting l * i = L ? * (x (i) ) = L ? * (x (i) ) for i = 1, ? ? ? , n+m, this completes the proof.</p><p>G.-J. Qi Finally, we prove Corollary 2 that bounds L ? with L ? (x) and L ? (x) constructed above.</p><p>Proof. By the Lipschitz continuity, we have L ? (x (i) ) ? ??(x, x (i) ) ? L ? (x)</p><p>Since L ? (x) ? 0, it follows that</p><formula xml:id="formula_62">L ? (x (i) ) ? ??(x, x (i) ) + ? L ? (x)</formula><p>Taking the maximum over i on the left hand side, we obtain</p><formula xml:id="formula_63">L ? (x) ? L ? (x)</formula><p>This proves the lower bound.</p><p>Similarly, we have by Lipschitz continuity</p><formula xml:id="formula_64">L ? (x) ? ??(x, x (i) ) + L ? (x (i) )</formula><p>which, by taking the minimum over i on the left hand side, leads to</p><formula xml:id="formula_65">L ? (x) ? L ? (x)</formula><p>This shows the upper bound.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>( 4 )</head><label>4</label><figDesc>with the population expectations S = min ? S(?, ? * ) and the empirical objective (6) with the sample means S m = min ? S m (?, ? * ). We need to show if and how fast the difference |S m ? S| would eventually vanish as the number m of training examples grows.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Lemma 3 .</head><label>3</label><figDesc>Under Assumption 1, given an optimal solution</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>the first n data points are real examples and the rest m are generated samples. Then we have the following theorem.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Theorem 4 .</head><label>4</label><figDesc>The following functions L ? * and</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 1 :</head><label>1</label><figDesc>Comparison between two optimal loss functions L ? * and L ? * in F ? for LS-GAN. They are upper and lower bounds of the class of optimal loss functions L ? * to Problem<ref type="bibr" target="#b7">(6)</ref>. Both the upper and the lower bounds are cone-shaped, and have non-vanishing gradient almost everywhere. Specifically, in this one-dimensional example, both bounds are piecewise linear, having a slope of ?? almost everywhere.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Assumption 4 .</head><label>4</label><figDesc>For each y, the conditional density P data (x|y) is Lipschitz, and is supported in a convex compact set of x.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>16 Figure 2 :</head><label>162</label><figDesc>Images generated by the LS-GAN on the CelebA dataset, in which the margin is computed as the distance between the features extracted from the Inception and VGG-16 networks. Images are resized to 128 ? 128 to fit the input size of both networks. output the activation before the removed sigmoid layer.On the other hand, for the loss function network in CLS-GAN, a global mean-pooling layer was added on top of convolutional layers. This produced a 1?1 feature map that output the conditional loss L ? (x, y) on different classes y. In the generator network, Tanh was used to produce images whose pixel values are scaled to [?1, 1]. Thus, all image examples in datasets were preprocessed to have their pixel values in [?<ref type="bibr" target="#b0">1,</ref><ref type="bibr" target="#b0">1]</ref></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 3 :</head><label>3</label><figDesc>Images generated by the DCGAN and the LS-GAN on the CelebA dataset. The results are obtained after 25 epochs of training the models. Unif[?1, 1] as input. For the CLS-GAN generator, an one-hot vector encoding the image class condition was concatenated with the sampled random vector. The CLS-GAN was trained by involving both unlabeled and labeled examples as in Section 8. This was compared against the other state-of-the-art supervised and semi-supervised models.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 4 :</head><label>4</label><figDesc>Images generated by the DCGAN and the LS-GAN on the CelebA dataset without batch normalization for the generator networks. The results are obtained after 25 epochs of training the models.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 5 :</head><label>5</label><figDesc>The log of the generator's gradient norm over iterations. The generator is updated every 1, 3, and 5 iterations while the loss function is updated every iteration. The loss function can be quickly updated to be optimal, and the figure shows the generator's gradient does not vanish even if the loss function is well trained.in the visual quality. This shows the LS-GAN was not affected by over-trained loss function in experiments.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 8 :</head><label>8</label><figDesc>Illustration of generated images that are collapsed to a single mode of the underlying image density on MNIST, CIFAR-10 and SVHN.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 9 :</head><label>9</label><figDesc>The change of test MREs on CIFAR-10 and tiny ImageNet over epochs. Image pixels were scaled to [?1, 1] to compute the MREs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 10 :</head><label>10</label><figDesc>The figure illustrates the images reconstructed by various GANs on CIFAR-10 with their MREs on the test set in the parentheses.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Lemma 6 .</head><label>6</label><figDesc>For all loss functions L ? , with at least the probability of 1 ? ?, we have|S m (?, ? * ) ? S(?, ? * )| ? ? when the number of samples m ? CB 2 ? (? + 1) 2 N log(? L N/?) + log(1/?) ? 2with a sufficiently large constant C.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head></head><label></label><figDesc>??? ,m S m (?, ? * ), we have P (|S m (?, ? * ) ? S(?, ? * )| ? ?/2) ? 2 exp(? ? 2 m 8(1 + ?) 2 B 2 ? )</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>The Network architecture used in CLS-GAN for training CIFAR-10 and SVHN, where BN stands for batch normalization, LeakyReLU for Leaky Rectifier with a slope of 0.2 for negative value, and "3c1s96o Conv." means a 3 ? 3 convolution kernel with stride 1 and 96 outputs, while "UpConv." denotes the fractionally-stride convolution.</figDesc><table><row><cell>(a) Loss Function Network</cell><cell>(b) Generator Network</cell></row><row><cell>Input 32 ? 32 ? 3</cell><cell>Input 100-D random vector + 10-D one-hot vector</cell></row><row><cell>3c1s96o Conv. BN LeakyReLU</cell><cell>4c1s512o UpConv. BN LeakyReLU</cell></row><row><cell>3c1s96o Conv. BN LeakyReLU</cell><cell>4c2s256o UpConv. BN LeakyReLU</cell></row><row><cell>4c2s96o Conv. BN LeakyReLU</cell><cell>4c2s128o UpConv. BN LeakyReLU</cell></row><row><cell>3c1s192o Conv. BN LeakyReLU</cell><cell>4c2s3o UpConv. BN LeakyReLU</cell></row><row><cell>3c1s192o Conv. BN LeakyReLU</cell><cell>Elementwise Tanh</cell></row><row><cell>4c2s192o Conv. BN LeakyReLU</cell><cell>Output 32 ? 32 ? 3</cell></row><row><cell>3c1s192o Conv. BN LeakyReLU</cell><cell></cell></row><row><cell>3c1s192o Conv. BN LeakyReLU</cell><cell></cell></row><row><cell>1c1s192o Conv. BN LeakyReLU</cell><cell></cell></row><row><cell>global meanpool</cell><cell></cell></row><row><cell>Output 1 ? 1 ? 10</cell><cell></cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table /><note>Classification accuracies on CIFAR-10 dataset. Accuracies with all training examples labeled (all) and with only 400 labeled examples per class (400) are reported. The best result is highlighted in bold.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 3 :</head><label>3</label><figDesc>Classification errors on SVHN dataset with 1, 000 labeled examples. The best result is highlighted in bold.</figDesc><table /><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">the minus sign exists as the U is maximized over fw in the WGAN. On the contrary, in the GLS-GAN, SC is minimized over L ? .</note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Proof of Lemma 2</head><p>To prove Lemma 2, we need the following lemma. Proof. We have the following equalities and inequalities:</p><p>This completes the proof. Now we can prove Lemma 2.</p><p>Proof. Suppose (? * , ? * ) is a Nash equilibrium for the problem (4) and <ref type="bibr" target="#b4">(5)</ref>.</p><p>N is the number of parameters in a loss function. Note that we implicitly assume the parameter space of the loss function is bounded so we can construct such a net containing finite points here. Therefore, we have the following union bound for all ? ? N that, with probability 1 ? ?,</p><p>The last step is to obtain the union bound for all loss functions beyond N . To show that, we consider the following inequality</p><p>where the first inequality uses that fact that (?) + is 1-Lipschitz again, and the second inequality follows from that L ? is ? L -Lipschitz in ?. Similarly, we can also show that</p><p>Now we can derive the union bound over all loss functions. For any ?, by construction we can find a ? ? N such that ? ? ? ? ?/8? L . Then, with probability 1 ? ?, we have</p><p>This proves the lemma. Now we can prove Theorem 2.</p><p>Proof. First let us bound S m ? S. Consider L ? * that minimizes S(?, ? * ). Then with probability</p><p>where the first inequality follows from the inequality S m ? S m (? * , ? * ) as ? * may not minimize S m , and the second inequality is a direct application of the above lemma. Similarly, we can prove the other direction. With probability 1 ? ?, we have</p><p>Finally, a more rigourous discussion about the generalizability should consider that G ? * is updated iteratively. Therefore we have a sequence of G (t) ? * generated over T iterations for t =</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Towards principled methods for training generative adversarial networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Arjovsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Bottou</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Arjovsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chintala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Bottou</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1701.07875</idno>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
	<note type="report_type">Wasserstein gan. arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Arora</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1703.00573</idno>
		<title level="m">Generalization and equilibrium in generative adversarial nets (gans)</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Fixed point theorems with applications to economics and game theory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">C</forename><surname>Border</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
			<publisher>Cambridge university press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Nonparametric likelihood based estimation for a multivariate lipschitz density</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Carando</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Fraiman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Groisman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Multivariate Analysis</title>
		<imprint>
			<biblScope unit="volume">100</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="981" to="992" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
	<note>a) Original test images (b) LS-GAN(0.2093</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Gls-Gan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2085" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
			</analytic>
	<monogr>
		<title level="m">The figure illustrates the images reconstructed by various GANs on tiny ImageNet with their MREs on the test set in the parentheses</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Infogan: Interpretable representation learning by information maximizing generative adversarial nets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Duan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Houthooft</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schulman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Abbeel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="2172" to="2180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Selecting receptive fields in deep networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Coates</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">Y</forename><surname>Ng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="2528" to="2536" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Deep generative image models using a laplacian pyramid of adversarial networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">L</forename><surname>Denton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chintala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Fergus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="1486" to="1494" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Discriminative unsupervised feature learning with exemplar convolutional neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dosovitskiy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Fischer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename><surname>Springenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Riedmiller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Brox</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Learning to generate chairs with convolutional neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dosovitskiy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tobias Springenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Brox</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition</title>
		<meeting>the IEEE Conference on Computer Vision and Pattern Recognition</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="1538" to="1546" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Dumoulin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Belghazi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Poole</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lamb</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Arjovsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Mastropietro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Courville</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1606.00704</idno>
		<title level="m">Adversarially learned inference</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">A</forename><surname>Gatys</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">S</forename><surname>Ecker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bethge</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1508.06576</idno>
		<title level="m">A neural algorithm of artistic style</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Generative adversarial nets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Goodfellow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Pouget-Abadie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mirza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Warde-Farley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ozair</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Courville</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="2672" to="2680" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Gregor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Danihelka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Rezende</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wierstra</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1502.04623</idno>
		<title level="m">Draw: A recurrent neural network for image generation</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Gulrajani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Ahmed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Arjovsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Dumoulin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Courville</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1704.00028</idno>
		<title level="m">Improved training of wasserstein gans</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Direct modeling of complex invariances for visual object features</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">Y</forename><surname>Hui</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="352" to="360" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Im</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Memisevic</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1602.05110</idno>
		<title level="m">Generating images with recurrent adversarial networks</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kingma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ba</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1412.6980</idno>
		<title level="m">Adam: A method for stochastic optimization</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Semi-supervised learning with deep generative models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">P</forename><surname>Kingma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mohamed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Rezende</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Welling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="3581" to="3589" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">P</forename><surname>Kingma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Welling</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1312.6114</idno>
		<title level="m">Auto-encoding variational bayes</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Learning multiple layers of features from tiny images</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Krizhevsky</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Maal?e</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">K</forename><surname>S?nderby</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>S?nderby</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Winther</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1602.05473</idno>
		<title level="m">Auxiliary deep generative models</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mirza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Osindero</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1411.1784</idno>
		<title level="m">Conditional generative adversarial nets</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Miyato</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">I</forename><surname>Maeda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Koyama</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Nakae</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ishii</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1507.00677</idno>
		<title level="m">Distributional smoothing by virtual adversarial examples</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Netzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Coates</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bissacco</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">Y</forename><surname>Ng</surname></persName>
		</author>
		<title level="m">Reading digits in natural images with unsupervised feature learning</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Nowozin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cseke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Tomioka</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1606.00709</idno>
		<title level="m">f-gan: Training generative neural samplers using variational divergence minimization</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Semi-supervised learning with generative adversarial networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Odena</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1606.01583</idno>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Global versus localized generative adversarial nets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">J</forename><surname>Qi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Edraki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><forename type="middle">S</forename><surname>Hua</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Conference on Computer Vision and Pattern Recognition (CVPR)</title>
		<meeting>IEEE Conference on Computer Vision and Pattern Recognition (CVPR)</meeting>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Metz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chintala</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1511.06434</idno>
		<title level="m">Unsupervised representation learning with deep convolutional generative adversarial networks</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Semi-supervised learning with ladder networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rasmus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Berglund</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Honkala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Valpola</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Raiko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="3546" to="3554" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Improved techniques for training gans</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Salimans</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Goodfellow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zaremba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Cheung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="2226" to="2234" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">On general minimax theorems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sion</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Pacific Journal of mathematics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="171" to="176" />
			<date type="published" when="1958" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Unsupervised and semi-supervised learning with categorical generative adversarial networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename><surname>Springenberg</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1511.06390</idno>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">From neural pca to deep unsupervised learning. Adv. in Independent Component Analysis and Learning Machines pp</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Valpola</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="143" to="171" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">The lack of a priori distinctions between learning algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">H</forename><surname>Wolpert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neural computation</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="1341" to="1390" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mathieu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Goroshin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Lecun</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1506.02351</idno>
		<title level="m">Stacked what-where auto-encoders</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mathieu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Lecun</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1609.03126</idno>
		<title level="m">Energy-based generative adversarial network</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
