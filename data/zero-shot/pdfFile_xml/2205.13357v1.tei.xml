<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /nfs/home/kabenamualus/Research/task-dataset-metric-extraction/../grobid-0.6.0/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">The Document Vectors Using Cosine Similarity Revisited</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhang</forename><surname>Bingyu</surname></persName>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nikolay</forename><surname>Arefyev</surname></persName>
							<email>nick.arefyev@gmail.com</email>
							<affiliation key="aff1">
								<orgName type="institution">Samsung Research Center Russia / Moscow</orgName>
								<address>
									<country key="RU">Russia</country>
								</address>
							</affiliation>
							<affiliation key="aff2">
								<orgName type="institution">Lomonosov Moscow State University</orgName>
								<address>
									<settlement>Moscow</settlement>
									<country key="RU">Russia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">National Research University Higher School of Economics / Moscow</orgName>
								<address>
									<country key="RU">Russia</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">The Document Vectors Using Cosine Similarity Revisited</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.6.0" ident="GROBID-SDO" when="2022-11-12T06:14+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid-sdo"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The current state-of-the-art test accuracy (97.42%) on the IMDB movie reviews dataset was reported by Thongtan and Phienthrakul  (2019)  and achieved by the logistic regression classifier trained on the Document Vectors using Cosine Similarity (DV-ngrams-cosine) proposed in their paper and the Bag-of-N-grams (BON) vectors scaled by Naive Bayesian weights. While large pre-trained Transformerbased models have shown SOTA results across many datasets and tasks, the aforementioned model has not been surpassed by them, despite being much simpler and pre-trained on the IMDB dataset only.</p><p>In this paper, we describe an error in the evaluation procedure of this model, which was found when we were trying to analyze its excellent performance on the IMDB dataset. We further show that the previously reported test accuracy of 97.42% is invalid and should be corrected to 93.68%. We also analyze the model performance with different amounts of training data (subsets of the IMDB dataset) and compare it to the Transformerbased RoBERTa model. The results show that while RoBERTa has a clear advantage for larger training sets, the DV-ngrams-cosine performs better than RoBERTa when the labelled training set is very small (10 or 20 documents). Finally, we introduce a sub-sampling scheme based on Naive Bayesian weights for the training process of the DV-ngrams-cosine, which leads to faster training and better quality.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The current state-of-the-art test accuracy (97.42%) on the IMDB movie reviews dataset was reported by <ref type="bibr">Thongtan and Phienthrakul (2019)</ref> and achieved by the logistic regression classifier trained on the Document Vectors using Cosine Similarity (DV-ngrams-cosine) proposed in their paper and the Bag-of-N-grams (BON) vectors scaled by Naive Bayesian weights. While large pre-trained Transformerbased models have shown SOTA results across many datasets and tasks, the aforementioned model has not been surpassed by them, despite being much simpler and pre-trained on the IMDB dataset only.</p><p>In this paper, we describe an error in the evaluation procedure of this model, which was found when we were trying to analyze its excellent performance on the IMDB dataset. We further show that the previously reported test accuracy of 97.42% is invalid and should be corrected to 93.68%. We also analyze the model performance with different amounts of training data (subsets of the IMDB dataset) and compare it to the Transformerbased RoBERTa model. The results show that while RoBERTa has a clear advantage for larger training sets, the DV-ngrams-cosine performs better than RoBERTa when the labelled training set is very small (10 or 20 documents). Finally, we introduce a sub-sampling scheme based on Naive Bayesian weights for the training process of the DV-ngrams-cosine, which leads to faster training and better quality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The word2vec algorithm originally published by <ref type="bibr">Mikolov et al. (2013)</ref> is among the most famous methods to train vector representations of words. Soon after the emergence of word2vec, a similar method to build vector representations of documents was originally proposed by <ref type="bibr">Le and Mikolov (2014)</ref> and further studied by <ref type="bibr">Mesnil et al. (2015)</ref>.</p><p>It is known under different names, including Paragraph Vectors, Sentence Vectors, doc2vec, etc. This method jointly learns word embeddings and document embeddings such that a binary classifier can predict if a given word occurs in a particular document given only the corresponding embeddings. More formally, the following objective is minimized:</p><formula xml:id="formula_0">d?D w?W d [? log ?(v T d v w ) ? w ?V log ?(?v T d v w )]</formula><p>(1) Here D denotes the set of documents, W d is the list of words that make up the document d, w is a word randomly sampled from the full vocabulary V , also known as a negative sample <ref type="bibr">(Goldberg and Levy, 2014)</ref>. Finally, v d and v w are the learnt embeddings of d and w. Intuitively, for each document, an embedding is learnt that has high similarity to the embeddings of those words that occur in this document and low similarity to the embeddings of some random words.</p><p>Later <ref type="bibr">Li et al. (2015)</ref> switched from single words to n-grams and observed significant improvements. Building on that, <ref type="bibr">Thongtan and Phienthrakul (2019)</ref> studied different objective functions. They have found that the cosine similarity outperforms the dot product, which led to a modified model called the Document Vectors using Cosine Similarity (we will call it DV-ngrams-cosine for short). The new objective is:</p><formula xml:id="formula_1">d?D u?U d [? log ?(?cos(v d , v u )) ? u ?V log ?(??cos(v d , v u ))],<label>(2)</label></formula><p>where U d denotes the set of all n-grams in d, v u is the embedding of the n-gram u from d, v u is the embedding of a randomly sampled n-gram, and ? is a hyperparameter.</p><p>In the same paper, the authors proposed an ensemble consisting of the document embeddings from DV-ngrams-cosine and the Bag-of-N-grams vectors scaled by Naive Bayesian weights (NBweighted BON for short). They concatenated these two representations and trained the logistic regression classifier on top. The ensemble was reported to have very high test accuracy (97.42%) on the IMDB movie reviews dataset <ref type="bibr">(Maas et al. (2011)</ref>). To the best of our knowledge, this accuracy remains the SOTA result on IMDB. Even large Transformerbased models pre-trained on a huge amount of texts, both in-domain and out-of-domain, have shown lower accuracy on this dataset <ref type="bibr">(Yang et al., 2019;</ref><ref type="bibr">Suchin et al., 2020;</ref><ref type="bibr">Arefyev et al., 2021)</ref>.</p><p>This extraordinary performance of such a simple model motivated us to thoroughly study the model and its implementation trying to understand the reasons behind its success. Unfortunately, during this study, we found a bug in the implementation of the evaluation procedure of the ensemble, which had made the estimation of the accuracy incorrect.</p><p>In our paper, we re-evaluate the ensemble as well as its individual components. We show that the originally reported test accuracy of the ensemble (97.42%) is incorrect and shall be corrected to 93.68%, which is only 0.55% higher than the accuracy on pure DV-ngrams-cosine embeddings.</p><p>Additionally, we analyze how the amount of training data affects the performance of the ensemble, as well as its individual components, and also the Transformer-based RoBERTa model <ref type="bibr">(Liu et al., 2020)</ref>, which has recently shown SOTA or near-SOTA results over a variety of tasks and datasets. Surprisingly, we have observed that DV-ngramscosine outperforms RoBERTa when the number of labelled training examples is small (10 or 20). We also ensemble RoBERTa with DV-ngrams-cosine, but only have achieved a marginal improvement. Finally, we propose a modification for the training process of DV-ngrams-cosine that results in faster training and better accuracy. The code reproducing our experiments is publicly available 1 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Re-evaluation of the ensemble</head><p>In the aforementioned ensemble proposed by <ref type="bibr">Thongtan and Phienthrakul (2019)</ref>, the NBweighted BON and the DV-ngrams-cosine are concatenated and fed into the logistic regression classifier. However, we have found that in the original implementation the two vectors concatenated to obtain a single training or test example usually cor-1 https://github.com/Bgzh/dv_cosine_revisited respond to two different documents of the same class (see details in Appendix A). Specifically, the DV-ngrams-cosine vectors and the BON vectors are built from two different files having different orders of examples. As a result, after the concatenation, each input to the logistic regression corresponds to a combination of two examples. Due to the special structure of the files, those examples are guaranteed to belong to the same class and the same subset. For instance, a positive example from the test set is concatenated with another positive example from the test set.</p><p>In Appendix B.3 we provide an analysis that shows the reasons of high performance of this concatenation of two representations. From this analysis it follows that most examples from IMDB are correctly classified with high confidence (a large logit) using any of two representations, i.e. they are easy examples. Less than 10% of examples are classified incorrectly by each representation (hard examples), but they often obtain low confidence (a logit near zero). Hard examples are more often combined with easy examples just because of their dominance. In these cases, the logit from the easy example often outweigh the logit from the hard one resulting in the correct final prediction.</p><p>Thus, in both the training and the test sets, hard examples are often combined with simpler examples, making the classification task easier. In this process, the knowledge of the true labels is implicitly exploited to combine the examples this way, in both training and testing. This leads to an incorrect estimation of the classification accuracy for future examples.</p><p>After fixing this issue, we have observed that the combination of different representations of the same document leads to the test accuracy of 93.68% instead of 97.42% originally reported. Compared to the pure DV-ngrams-cosine embeddings, the ensemble improves the test accuracy by 0.55%, not 4.29% reported previously. This improvement also better agrees with the improvements of less than 1% observed by <ref type="bibr">Li et al. (2015)</ref> for similar ensembles with the predecessor model DV-ngram. As a sanity check, Appendix B additionally reports the accuracy for different schemes of combining the two representations, showing that higher accuracy can be achieved only by those schemes that exploit the knowledge of the test labels.</p><p>In his section we further analyze the performance of the ensemble described above, comparing it to its individual components as well as to the recently introduced Transformer-based RoBERTa model <ref type="bibr">(Liu et al., 2020)</ref>. We study the performance of these models depending on the number of labelled examples in the training set. For a more fair comparison, the most important hyperparameters of each model were tuned on the validation set, employing the train/validation/test split of the IMDB dataset provided by <ref type="bibr">(Suchin et al., 2020)</ref>. Subsets of different sizes from 10 to 20000 examples were randomly sampled from the training set. The logistic regression classifier was trained on these subsets using the DV-ngram-cosine embeddings, the NB-weighted BON vectors, or their concatenation as its input representation.</p><p>We tuned the L2-regularization strength C of the classifier individually for each subset of the training set. Additionally, we multiplied the DV-ngramcosine embeddings before concatenating them to the BON vectors in order to balance the magnitudes of the two representations, which may help the classifier to benefit from both representations. The scaling factor was also selected on the validation set.</p><p>The pre-trained RoBERTa base model 2 was finetuned on a part (10 out of 30) of the same subsets of the training set, using the validation set for early stopping. We used a batch size of 32, with a maximum learning rate of 1e-5, recommended by fairseq 3 .</p><p>As shown in <ref type="figure" target="#fig_0">Fig. 1</ref>, the fine-tuned RoBERTa model usually achieves higher test accuracy. But when the number of labelled training examples is very small (10 or 20), the logistic regression on the DV-ngrams-cosine embeddings shows higher mean test accuracy and lower standard deviation. This result corroborated the notion that small models can be a better choice when the data are scarce.</p><p>On the other hand, logistic regression on the BON vectors performs significantly worse than all other models across all training set sizes. Finally, we don't observe any significant improvements from the ensembling when the training set size is less than 20k, as the difference is within one standard deviation.</p><p>It is important to notice that the DV-ngramscosine embeddings were pre-trained on the indomain examples from the whole IMDB dataset, while RoBERTa was pre-trained on a huge but general-domain corpus. It is likely that the domain adaptation techniques <ref type="bibr">(Suchin et al., 2020)</ref> will help RoBERTa when the number of labelled examples is small. However, for our study, we decided to compare the most standard approaches to training the corresponding models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">NB Sub-Sampling</head><p>In this section, we improve the training procedure of DV-ngrams-cosine by applying a sub-sampling procedure based on the Naive Bayesian weights of ngrams (NB Sub-Sampling) in order to make the model focus more on sentiment-related ngrams while building the document embeddings.</p><p>Inspired by the previous works (Wang and Manning (2012), Arefyev et al. <ref type="formula" target="#formula_1">(2021)</ref>), we trained a multinomial Naive Bayesian Classifier and exploited its weights to calculate the importance of each ngram f i for the final classification task:</p><formula xml:id="formula_2">h i = | log p(f i |y = 1) ? log p(f i |y = 0)| (3)</formula><p>In each epoch we put an ngram into training with the probability  where n a and n b are the hyperparameters. The choices are purely empirical. We tried different combinations of n a and n b and found 2 and 3 (respectively) to be the best in them. The comparison of the training process with and without NB sub-sampling is shown in <ref type="figure" target="#fig_1">Fig. 2</ref> (refer to Appendix C for details of the experiments and the accuracy on the validation set).</p><formula xml:id="formula_3">p(f i ) = min(exp(h i /n a )/n b , 1),<label>(4)</label></formula><p>The runs with NB sub-sampling progress faster and show a distinct advantage after 2500 steps. After 30k steps, the runs with NB sub-sampling stagnated and kept fluctuating in a small region; the vanilla runs stagnated after 50k steps, in a lower area. It is also worth noticing that although the labels of the training set are used during pre-training for sub-sampling, we did not observe any significant overfitting due to that. Neither the validation score nor the test score showed a tendency to decay long after reaching the plateau, indicating that this sub-sampling scheme can be used as an add-on to the original model, boosting its performance while not creating additional overfitting trouble.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Ensemble DV-ngrams-cosine and RoBERTa</head><p>The ensemble proposed in (Thongtan and Phienthrakul (2019)) and described in Section 2 combines two different representations of documents, which are the DV-ngrams-cosine embeddings and the NB-weighted BON vectors. However, we have observed in Section 3 that the BON vectors are quite weak on their own, while RoBERTa outperforms all other models unless the number of examples is very small. Thus, it is interesting if DVngram-cosine can help RoBERTa. In this section, we combine the DV-ngrams-cosine (with or without NB sub-sampling) with the output of the last hidden layer of RoBERTa, and test on the IMDB dataset. Again, the train/validation/test splits by Suchin et al. (2020) were used. A scaling factor on the DV-ngrams-cosine and the hyperparameter C in the logistic regression were tuned on the validation set.</p><p>The results are shown in <ref type="table">Table 1</ref>. Although RoBERTa is a much stronger model than DVngram-cosine, combining them has shown a small improvement of 0.13-0.15%.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>The ensemble featuring the DV-ngrams-cosine reported by Thongtan and Phienthrakul <ref type="formula" target="#formula_1">(2019)</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Detailed Description of the Bug</head><p>As depicted in <ref type="figure" target="#fig_2">Fig. 3</ref>, In the original work, neither of the two sets of vectors (DV-ngrams-cosine and NB-weighted BON) were obtained directly from the original IMDB movie review datasets. Instead, they were from two preprocessed versions of the IMDB movie review dataset stored in two files named "alldata-id_p1gram.txt" and "alldata-id_p3gram.txt", respectively. (We will refer to them as "p1gram.txt" and "p3gram.txt" in the remaining of this paper for short.) The file "p1gram.txt" contains unigrams extracted from the IMDB dataset, while "p3gram.txt" contains unigrams, bigrams and trigrams.</p><p>The problem is that the document orders in these two files are not the same. For example, the 7th document in "p1gram.txt" corresponds to the 5978th document in "p3gram.txt".</p><p>After a closer look at these two files, as shown in <ref type="figure">Fig. 4</ref>, one can see that in both files, the preprocessed documents are ordered in such a way that they can be naturally divided into blocks. Each block contains all the documents within one particular class and one particular subset <ref type="bibr">(train, test or unlabelled)</ref>. The orders of these blocks inside the two files are the same. For example, in both files, the positive examples from the training set occupy the first 12500 lines.</p><p>However, inside each block, the documents are ordered differently in these two files. As a result, the document order of "p3gram.txt" is one in-block permutation (permutation within each block) away from the document order of "p3gram.txt".</p><p>In the original code, the DV-ngrams-cosine embeddings are built from "p3gram.txt", while the NBweighted BON vectors are built from "p1gram.txt". They are directly concatenated without any reordering. This leads to the incorrect estimation of the test accuracy of the ensemble.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B Re-Evaluation of the Ensemble</head><p>After finding the aforementioned bug, the next step is evaluating the ensemble correctly. Apart from re-evaluating the ensemble with the correct matching (so that the two vector representations of the same document are concatenated together), we also tried different ways of combining two documents by performing shuffling on one of the two files. Concatenating vectors from different documents is perfectly legit if no test labels are required in this process. Therefore, we compare different shuffling  schemes, both using and not using test labels, for completeness and sanity check.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.1 Experiments</head><p>The ensemble was evaluated by the original code, with both the original matching (the two representations were concatenated according to the document orders of the files "p1gram.txt" and "p3gram.txt") and the correct matching (the representations of the same document are concatenated). Some additional tests with different shuffling schemes were also carried out, only "p1gram.txt" was shuffled in all of these tests. The shuffling schemes are shown in <ref type="figure" target="#fig_3">Fig. 5</ref>.</p><p>In both A and C, the test set was shuffled inclass. This requires using the labels of the test set in order to group documents with the same labels, which may significantly simplify the classification task. Both B and D only underwent cross-class shuffles, in which samples from different classes were mixed and treated equally. This augments the BON vectors with the DV-ngrams-cosine vectors of some random examples, thus, we basically add noise. In C this noise is only added to the test set, while in D it is also added to the training set, so the model can learn to ignore it.</p><p>By comparing A vs. B and C vs. D, we can find out whether the aforementioned leakage of the test labels is necessary to obtain high test accuracy. In particular, C was designed to reproduce the incorrect evaluation in the original paper, except for the randomness in the shuffling process. All tests involving shuffling were run 30 times.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.2 Results and discussions</head><p>The results of the shuffling tests are shown in Table 2. With the correct matching, the test accuracy of the ensemble was 93.68%, which is much lower than the test accuracy of 97.42% achieved by the original matching (this result agrees with the origi- Augmenting the BON vectors with the DVngrams-cosine embeddings of different documents from the same classes (A and C) showed much higher performance than the correct matching. Between them, C got better accuracy due to the consistency in the training and testing process. On the other hand, the training examples for A were correctly concatenated so the model suffered from data drift during testing.</p><p>Augmentation using some random documents for the test set only (B) makes the logistic regression perform almost like a random classifier, while when it is done for the training set also (D), it can learn to ignore the added noise. They serve as a sanity check to verify that shuffling without knowing the labels doesn't get better accuracy than the "correct matching".</p><p>Only the shuffling scheme C yielded accuracy that is very similar to the original matching, showing that a random in-class shuffle of both the training and test set can closely reproduce the test accuracy reported in the original paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.3 A closer look at the high estimation of accuracy caused by the incorrect concatenation</head><p>From the accuracy of each part of the ensemble <ref type="table">(table 1)</ref>, we see that each part of the ensemble is incorrect for a rather small portion of examples (less than 7% for DV-ngrams-cosine, less than 9% for NB-weighted BON). As can be seen from the marginal distributions in figure 6, for these incorrectly predicted examples the absolute values of logits are usually much smaller compared to the correctly classified examples. We can also see from the scatter plot of figure 6 (a) that when the vectors are concatenated in the original order, the logits of the two parts (DVngrams-cosine and NB-weighted BON) look independent conditioned on the true label, which corroborates our speculation that "p3gram.txt" were randomly shuffled inside each class.</p><p>Thus, there is a high chance that for an incorrect prediction by the DV-ngrams-cosine part ("hard" example) a random example of the same class will have larger NB-weighted BON logit with the correct sign ("easy" example) and fix this prediction. But as shown in the scatter plot of <ref type="figure">figure 6 (b)</ref>, when the vectors are correctly concatenated, the logits of the two parts have a positive correlation. So, the correct model doesn't benefit from the aforementioned independence.</p><p>To see it more clearly, <ref type="figure">Figure 7 (a)</ref> shows only the examples that are incorrectly classified by the DV-ngrams-cosine part. In the original combination, the complementary BON logit is mostly positive and quit large, moving many of those examples to the correct side of the decision boundary. When concatenated correctly, the BON logit is concentrated near zero and rarely helps. In <ref type="figure">Figure 7</ref> (b) only those examples that are correctly classified by the DV-ngrams-cosine part are shown. We can see that adding the BON logit can sometimes move those examples to the incorrect side of the boundary. However, the proportion of such cases is similar for the original and correctly concatenated representations. <ref type="figure">Figure 8</ref> shows the marginal distributions of the NB-weighted BON part in the same settings. Between the two situations (the DV-ngrams-cosine part is incorrect/correct), the histogram of the BON logits stays in a very similar shape when the vectors are incorrectly concatenated (blue), while showing a shift when the vectors are correctly concatenated (orange). These observations corroborate the argument that the model on the incorrectly concatenated vectors benefits from the aforementioned conditional independence.</p><p>It is also worth noticing from figure 8 that in both (a) and (b), the distribution of the BON logits of the original concatenation (blue) is more on the positive side. This indicates that incorrect concatenation may also help the training of the weights for NB-weighted-BON. We have tentatively run tests on this, but haven't found any overall improve-ments: the ensemble trained on incorrectly concatenated vectors and tested on correctly concatenated vectors only has a test accuracy of 93.0%.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C Training DV-ngrams-cosine with NB Sub-Sampling</head><p>In the experiments of this section (also in section 4), the train/validation/test splits <ref type="bibr">(Suchin et al., 2020)</ref> of the IMDB dataset were also used. During the training, after every epoch, logistic regression was trained on the training set; the hyperparameter C was tuned on the validation set; then the model with the "best" C was tested on the test set. The training of each type (with or without NB sub-sampling) was repeated 3 times.</p><p>The validation accuracy is plotted in <ref type="figure">Figure 9</ref> and the test accuracy is plotted in <ref type="figure" target="#fig_1">Figure 2</ref>. The runs with NB sub-sampling showed slight advantages in both plots, almost everywhere. The mean values and standard deviations were calculated over 3 runs for each type.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>The performance of different models on training sets of different sizes. The mean values and standard deviations were calculated over 10 random subsets for RoBERTa and 30 random subsets for other models for each training set size. BON in the legend implies NB-weighted BON.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Training process with and without NB subsampling. The test accuracy of the logistic regression built on top of the document vectors is plotted. The mean values and standard deviations were calculated over 3 runs for each type.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Diagram of the ensemble and its input in the original code Figure 4: Two preprocessed versions of the IMDB movie review dataset: p1gram.txt and p3gram.txt nal paper).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>The shuffling schemes for re-evaluation of the ensemble. First of all, both the Document Vectors (DV) and the BON vectors are sorted in the document order of p1gram.txt. Then, 4 shuffling schemes are imposed on the Document Vectors, respectively. In A and C, the blocks are shuffled internally, while in B and D, the corresponding positive block and negative block are mixed and shuffled as a whole. The train-test split is respected throughout this experiment. Neither of the BON vectors nor the labels are shuffled.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :Figure 7 :Figure 9 :</head><label>679</label><figDesc>Distributions of the logits (test set). The classification boundaries of the ensemble and the submodels are noted as the red diagonal and the grey dashed lines, respectively. Here we evenly split the intercept of the ensemble for the 2 sub-models.(a) when the document vectors are incorrectly concatenated (as in the original paper); (b) when the document vectors are correctly concatenated. Distributions of the logits of the positive examples. Green/red dots represent documents that are correctly/incorrectly classified by the ensemble. (a) positive documents that are misclassified by the DV_ngrams_cosine part, (b) positive documents that are correctly classified by the DV_ngrams_cosine part Figure 8: Marginal distributions of the BON part of the positive examples. (a) positive documents that are misclassified by the DV_ngrams_cosine part, (b) positive documents that are correctly classified by the DV_ngrams_cosine part Training process with and without NB subsampling. The validation accuracy of the logistic regression built on top of the document vectors is plotted.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>ModelTest Accuracy % Models trained on the original training set of IMDB (25K) NB-weighted BON 91.29 DV-ngrams-cosine 93.13 DV-ngrams-cosine + NB-weightedBON (Thongtan and Phienthrakul, 2019)   #97.42 DV-ngrams-cosine + NB-weighted BON (re-evaluated) 93.68 Models trained using the train/dev split from (Suchin et al., 2020) (20K/5K) DV-ngrams-cosine with NB sub-sampling</figDesc><table><row><cell></cell><cell>93.36</cell></row><row><cell>RoBERTa</cell><cell>95.79</cell></row><row><cell>DV-ngrams-cosine + RoBERTa</cell><cell>95.92</cell></row><row><cell>DV-ngrams-cosine with NB sub-sampling + RoBERTa</cell><cell>95.94</cell></row></table><note>Table 1: Test results on the IMDB dataset. # indicates incorrect previously reported results.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>In this comparison, the DV-ngrams-cosine has surprisingly outperformed RoBERTa for a small number of training examples (10 or 20 documents). A sub-sampling scheme based on the Naive Bayesian weights was introduced to the training process of the DV-ngrams-cosine, resulting in faster training and better quality. Adapt language models to domains and tasks. ACL, pages 8342-8360.Tan Thongtan and Tanasanee Phienthrakul. 2019. Sentiment classification using document embeddings trained with cosine similarity. In Proceedings of the 57th Annual Meeting of the Association for</figDesc><table><row><cell></cell><cell>Computational Linguistics: Student Research Work-</cell></row><row><cell></cell><cell>shop, pages 407-414, Florence, Italy. Association</cell></row><row><cell></cell><cell>for Computational Linguistics.</cell></row><row><cell></cell><cell>Sida Wang and Christopher Manning. 2012. Baselines</cell></row><row><cell></cell><cell>and bigrams: Simple, good sentiment and topic clas-</cell></row><row><cell></cell><cell>sification. In Proceedings of the 50th Annual Meet-</cell></row><row><cell></cell><cell>ing of the Association for Computational Linguistics</cell></row><row><cell></cell><cell>(Volume 2: Short Papers), pages 90-94, Jeju Island,</cell></row><row><cell></cell><cell>Korea. Association for Computational Linguistics.</cell></row><row><cell></cell><cell>Zhilin Yang, Zihang Dai, Yiming Yang, G. Jaime Car-</cell></row><row><cell>Nikolay Arefyev, Dmitry Kharchev, and Artem Shel-manov. 2021. Nb-mlm -efficient domain adaptation of masked language models for sentiment analysis. EMNLP, pages 9114-9124.</cell><cell>bonell, Ruslan Salakhutdinov, and V. Quoc Le. 2019. Xlnet: Generalized autoregressive pretraining for language understanding. ADVANCES IN NEURAL INFORMATION PROCESSING SYSTEMS 32 (NIPS 2019), pages 5754-5764.</cell></row><row><cell>Yoav Goldberg and Omer Levy. 2014. word2vec ex-</cell><cell></cell></row><row><cell>plained: deriving mikolov et al.'s negative-sampling</cell><cell></cell></row><row><cell>word-embedding method. CoRR.</cell><cell></cell></row><row><cell>V. Quoc Le and Tomas Mikolov. 2014. Distributed</cell><cell></cell></row><row><cell>representations of sentences and documents. ICML,</cell><cell></cell></row><row><cell>pages 1188-1196.</cell><cell></cell></row><row><cell>Bofang Li, Tao Liu, Xiaoyong Du, Deyuan Zhang, and</cell><cell></cell></row><row><cell>Zhe Zhao. 2015. Learning document embeddings</cell><cell></cell></row><row><cell>by predicting n-grams for sentiment classification of</cell><cell></cell></row><row><cell>long movie reviews. CoRR.</cell><cell></cell></row><row><cell>Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Man-</cell><cell></cell></row><row><cell>dar Joshi, Danqi Chen, Omer Levy, Mike Lewis,</cell><cell></cell></row><row><cell>Luke Zettlemoyer, and Veselin Stoyanov. 2020.</cell><cell></cell></row><row><cell>Ro{bert}a: A robustly optimized {bert} pretraining</cell><cell></cell></row><row><cell>approach.</cell><cell></cell></row><row><cell>Andrew L. Maas, Raymond E. Daly, Peter T. Pham,</cell><cell></cell></row><row><cell>Dan Huang, Andrew Y. Ng, and Christopher Potts.</cell><cell></cell></row><row><cell>2011. Learning word vectors for sentiment analy-</cell><cell></cell></row><row><cell>sis. In Proceedings of the 49th Annual Meeting of</cell><cell></cell></row><row><cell>the Association for Computational Linguistics: Hu-</cell><cell></cell></row><row><cell>man Language Technologies, pages 142-150, Port-</cell><cell></cell></row><row><cell>land, Oregon, USA. Association for Computational</cell><cell></cell></row><row><cell>Linguistics.</cell><cell></cell></row><row><cell>Gr?goire Mesnil, Tomas Mikolov, Marc'Aurelio Ran-</cell><cell></cell></row><row><cell>zato, and Yoshua Bengio. 2015. Ensemble of gen-</cell><cell></cell></row><row><cell>erative and discriminative techniques for sentiment</cell><cell></cell></row><row><cell>analysis of movie reviews. international conference</cell><cell></cell></row><row><cell>on learning representations.</cell><cell></cell></row></table><note>was re-evaluated. The test accuracy of this ensemble on the IMDB dataset was corrected from 97.42% to 93.68%. The DV-ngrams-cosine embeddings with the logistic regression on top were compared with RoBERTa using different amounts of training data.Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. 2013. Efficient estimation of word represen- tations in vector space. CoRR. Gururangan Suchin, Marasovi? Ana, Swayamdipta Swabha, Lo Kyle, Beltagy Iz, Downey Doug, and Noah Smith A. 2020. Don't stop pretraining:</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 :</head><label>2</label><figDesc>Test accuracy for different shuffling schemes.</figDesc><table /><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2">https://pytorch.org/hub/huggingface_ pytorch-transformers/</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3">https://github.com/pytorch/fairseq/ blob/main/examples/roberta/README. custom_classification.md</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We are grateful to our anonymous reviewers. This research was partially supported by the Basic Research Program at the HSE University.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>References</head></div>
			</div>

			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
